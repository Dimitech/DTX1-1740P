
out/DTX_1740P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000070e0  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004070e0  004070e0  0000f0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008f4  20000000  004070e8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001b604  200008f4  004079dc  000108f4  2**2
                  ALLOC
  4 .stack        00003000  2001bef8  00422fe0  000108f4  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000108f4  2**0
                  CONTENTS, READONLY
  6 .comment      00000070  00000000  00000000  0001091e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005bdf  00000000  00000000  0001098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001282  00000000  00000000  0001656d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000001d0  00000000  00000000  000177ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001026a  00000000  00000000  000179bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005f34  00000000  00000000  00027c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0003e068  00000000  00000000  0002db5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001720  00000000  00000000  0006bbc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .stab         000000cc  00000000  00000000  0006d2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stabstr      000001b9  00000000  00000000  0006d3b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2001eef8 	.word	0x2001eef8
  400004:	004023c5 	.word	0x004023c5
  400008:	00402441 	.word	0x00402441
  40000c:	00402441 	.word	0x00402441
  400010:	00402441 	.word	0x00402441
  400014:	00402441 	.word	0x00402441
  400018:	00402441 	.word	0x00402441
	...
  40002c:	00402441 	.word	0x00402441
  400030:	00402441 	.word	0x00402441
  400034:	00000000 	.word	0x00000000
  400038:	00402441 	.word	0x00402441
  40003c:	00400731 	.word	0x00400731
  400040:	00402441 	.word	0x00402441
  400044:	00402441 	.word	0x00402441
  400048:	00402441 	.word	0x00402441
  40004c:	00402441 	.word	0x00402441
  400050:	00402441 	.word	0x00402441
  400054:	00402441 	.word	0x00402441
  400058:	00402441 	.word	0x00402441
  40005c:	00000000 	.word	0x00000000
  400060:	00402441 	.word	0x00402441
  400064:	00402441 	.word	0x00402441
  400068:	00000000 	.word	0x00000000
  40006c:	00400c81 	.word	0x00400c81
  400070:	00402441 	.word	0x00402441
  400074:	00402441 	.word	0x00402441
  400078:	00402441 	.word	0x00402441
  40007c:	00402441 	.word	0x00402441
	...
  400088:	004008e9 	.word	0x004008e9
  40008c:	00402441 	.word	0x00402441
  400090:	00402441 	.word	0x00402441
  400094:	00400c91 	.word	0x00400c91
  400098:	00402441 	.word	0x00402441
  40009c:	00400899 	.word	0x00400899
  4000a0:	004008cd 	.word	0x004008cd
  4000a4:	00402441 	.word	0x00402441
  4000a8:	00402441 	.word	0x00402441
  4000ac:	00402441 	.word	0x00402441
  4000b0:	00402441 	.word	0x00402441
  4000b4:	00402441 	.word	0x00402441
  4000b8:	00402441 	.word	0x00402441
  4000bc:	00402441 	.word	0x00402441
  4000c0:	00402441 	.word	0x00402441
  4000c4:	00402441 	.word	0x00402441
  4000c8:	00402441 	.word	0x00402441

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200008f4 	.word	0x200008f4
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004070e8 	.word	0x004070e8

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	004070e8 	.word	0x004070e8
  400114:	200008f8 	.word	0x200008f8
  400118:	004070e8 	.word	0x004070e8
  40011c:	00000000 	.word	0x00000000

00400120 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400120:	b082      	sub	sp, #8
  400122:	4603      	mov	r3, r0
  400124:	9100      	str	r1, [sp, #0]
  400126:	f88d 3007 	strb.w	r3, [sp, #7]
  if(IRQn < 0) {
  40012a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
  40012e:	2b00      	cmp	r3, #0
  400130:	da0c      	bge.n	40014c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400132:	490c      	ldr	r1, [pc, #48]	; (400164 <NVIC_SetPriority+0x44>)
  400134:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400138:	f003 030f 	and.w	r3, r3, #15
  40013c:	3b04      	subs	r3, #4
  40013e:	9a00      	ldr	r2, [sp, #0]
  400140:	b2d2      	uxtb	r2, r2
  400142:	0112      	lsls	r2, r2, #4
  400144:	b2d2      	uxtb	r2, r2
  400146:	440b      	add	r3, r1
  400148:	761a      	strb	r2, [r3, #24]
  40014a:	e009      	b.n	400160 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40014c:	4906      	ldr	r1, [pc, #24]	; (400168 <NVIC_SetPriority+0x48>)
  40014e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
  400152:	9a00      	ldr	r2, [sp, #0]
  400154:	b2d2      	uxtb	r2, r2
  400156:	0112      	lsls	r2, r2, #4
  400158:	b2d2      	uxtb	r2, r2
  40015a:	440b      	add	r3, r1
  40015c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400160:	b002      	add	sp, #8
  400162:	4770      	bx	lr
  400164:	e000ed00 	.word	0xe000ed00
  400168:	e000e100 	.word	0xe000e100

0040016c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  40016c:	b500      	push	{lr}
  40016e:	b083      	sub	sp, #12
  400170:	9001      	str	r0, [sp, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  400172:	9b01      	ldr	r3, [sp, #4]
  400174:	3b01      	subs	r3, #1
  400176:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  40017a:	d301      	bcc.n	400180 <SysTick_Config+0x14>
  40017c:	2301      	movs	r3, #1
  40017e:	e00f      	b.n	4001a0 <SysTick_Config+0x34>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400180:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <SysTick_Config+0x3c>)
  400182:	9a01      	ldr	r2, [sp, #4]
  400184:	3a01      	subs	r2, #1
  400186:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  400188:	f04f 30ff 	mov.w	r0, #4294967295
  40018c:	210f      	movs	r1, #15
  40018e:	f7ff ffc7 	bl	400120 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400192:	4b05      	ldr	r3, [pc, #20]	; (4001a8 <SysTick_Config+0x3c>)
  400194:	2200      	movs	r2, #0
  400196:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400198:	4b03      	ldr	r3, [pc, #12]	; (4001a8 <SysTick_Config+0x3c>)
  40019a:	2207      	movs	r2, #7
  40019c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  40019e:	2300      	movs	r3, #0
}
  4001a0:	4618      	mov	r0, r3
  4001a2:	b003      	add	sp, #12
  4001a4:	f85d fb04 	ldr.w	pc, [sp], #4
  4001a8:	e000e010 	.word	0xe000e010

004001ac <mydelay>:
/* Private functions ---------------------------------------------------------*/

/* Public functions ----------------------------------------------------------*/

void mydelay(uint32_t delay)
{
  4001ac:	b084      	sub	sp, #16
  4001ae:	9001      	str	r0, [sp, #4]
uint32_t i;


	for(i = 0; i < delay; i++)
  4001b0:	2300      	movs	r3, #0
  4001b2:	9303      	str	r3, [sp, #12]
  4001b4:	e002      	b.n	4001bc <mydelay+0x10>
  4001b6:	9b03      	ldr	r3, [sp, #12]
  4001b8:	3301      	adds	r3, #1
  4001ba:	9303      	str	r3, [sp, #12]
  4001bc:	9a03      	ldr	r2, [sp, #12]
  4001be:	9b01      	ldr	r3, [sp, #4]
  4001c0:	429a      	cmp	r2, r3
  4001c2:	d3f8      	bcc.n	4001b6 <mydelay+0xa>
	{

	}
}
  4001c4:	b004      	add	sp, #16
  4001c6:	4770      	bx	lr

004001c8 <main>:
  * @brief  This is a "main()" function of the project.
  * @param  None
  * @retval int
  */
int main( void )
{
  4001c8:	b508      	push	{r3, lr}


	SystemInit();
  4001ca:	f002 f877 	bl	4022bc <SystemInit>
	SystemCoreClockUpdate();
  4001ce:	f001 ffa9 	bl	402124 <SystemCoreClockUpdate>

	LedInit();
  4001d2:	f000 facf 	bl	400774 <LedInit>


//	gDrawALineColour(&draw_init);
//	gDrawAPointColour(&draw_init);
	StartVGAOut();
  4001d6:	f000 fd49 	bl	400c6c <StartVGAOut>

	SysTick_Config(SystemCoreClock/100);  /* Generate interrupt each 10 ms      */
  4001da:	4bc0      	ldr	r3, [pc, #768]	; (4004dc <main+0x314>)
  4001dc:	681a      	ldr	r2, [r3, #0]
  4001de:	4bc0      	ldr	r3, [pc, #768]	; (4004e0 <main+0x318>)
  4001e0:	fba3 1302 	umull	r1, r3, r3, r2
  4001e4:	095b      	lsrs	r3, r3, #5
  4001e6:	4618      	mov	r0, r3
  4001e8:	f7ff ffc0 	bl	40016c <SysTick_Config>
//	mSpiSart();

	while(1)
	{
		mydelay(20000000);
  4001ec:	48bd      	ldr	r0, [pc, #756]	; (4004e4 <main+0x31c>)
  4001ee:	f7ff ffdd 	bl	4001ac <mydelay>
		draw_init.x1 			= 10;
  4001f2:	4bbd      	ldr	r3, [pc, #756]	; (4004e8 <main+0x320>)
  4001f4:	2200      	movs	r2, #0
  4001f6:	f042 020a 	orr.w	r2, r2, #10
  4001fa:	71da      	strb	r2, [r3, #7]
  4001fc:	2200      	movs	r2, #0
  4001fe:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 10;
  400200:	4ab9      	ldr	r2, [pc, #740]	; (4004e8 <main+0x320>)
  400202:	6893      	ldr	r3, [r2, #8]
  400204:	210a      	movs	r1, #10
  400206:	f361 2317 	bfi	r3, r1, #8, #16
  40020a:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 630;
  40020c:	4bb6      	ldr	r3, [pc, #728]	; (4004e8 <main+0x320>)
  40020e:	2200      	movs	r2, #0
  400210:	f042 0276 	orr.w	r2, r2, #118	; 0x76
  400214:	72da      	strb	r2, [r3, #11]
  400216:	2200      	movs	r2, #0
  400218:	f042 0202 	orr.w	r2, r2, #2
  40021c:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 320;
  40021e:	4ab2      	ldr	r2, [pc, #712]	; (4004e8 <main+0x320>)
  400220:	68d3      	ldr	r3, [r2, #12]
  400222:	f44f 71a0 	mov.w	r1, #320	; 0x140
  400226:	f361 2317 	bfi	r3, r1, #8, #16
  40022a:	60d3      	str	r3, [r2, #12]
		draw_init.function 		= F_OVERWRITE;
  40022c:	4bae      	ldr	r3, [pc, #696]	; (4004e8 <main+0x320>)
  40022e:	2200      	movs	r2, #0
  400230:	709a      	strb	r2, [r3, #2]
		draw_init.colour 		= 0x0F;
  400232:	4bad      	ldr	r3, [pc, #692]	; (4004e8 <main+0x320>)
  400234:	220f      	movs	r2, #15
  400236:	705a      	strb	r2, [r3, #1]
		gDrawALineColour(&draw_init);
  400238:	48ab      	ldr	r0, [pc, #684]	; (4004e8 <main+0x320>)
  40023a:	f001 f895 	bl	401368 <gDrawALineColour>

		mydelay(10000000);
  40023e:	48ab      	ldr	r0, [pc, #684]	; (4004ec <main+0x324>)
  400240:	f7ff ffb4 	bl	4001ac <mydelay>
		draw_init.x1 			= 10;
  400244:	4ba8      	ldr	r3, [pc, #672]	; (4004e8 <main+0x320>)
  400246:	2200      	movs	r2, #0
  400248:	f042 020a 	orr.w	r2, r2, #10
  40024c:	71da      	strb	r2, [r3, #7]
  40024e:	2200      	movs	r2, #0
  400250:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 320;
  400252:	4aa5      	ldr	r2, [pc, #660]	; (4004e8 <main+0x320>)
  400254:	6893      	ldr	r3, [r2, #8]
  400256:	f44f 71a0 	mov.w	r1, #320	; 0x140
  40025a:	f361 2317 	bfi	r3, r1, #8, #16
  40025e:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 630;
  400260:	4ba1      	ldr	r3, [pc, #644]	; (4004e8 <main+0x320>)
  400262:	2200      	movs	r2, #0
  400264:	f042 0276 	orr.w	r2, r2, #118	; 0x76
  400268:	72da      	strb	r2, [r3, #11]
  40026a:	2200      	movs	r2, #0
  40026c:	f042 0202 	orr.w	r2, r2, #2
  400270:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 10;
  400272:	4a9d      	ldr	r2, [pc, #628]	; (4004e8 <main+0x320>)
  400274:	68d3      	ldr	r3, [r2, #12]
  400276:	210a      	movs	r1, #10
  400278:	f361 2317 	bfi	r3, r1, #8, #16
  40027c:	60d3      	str	r3, [r2, #12]
		draw_init.function 		= F_OVERWRITE;
  40027e:	4b9a      	ldr	r3, [pc, #616]	; (4004e8 <main+0x320>)
  400280:	2200      	movs	r2, #0
  400282:	709a      	strb	r2, [r3, #2]
		draw_init.colour 		= 0x0A;
  400284:	4b98      	ldr	r3, [pc, #608]	; (4004e8 <main+0x320>)
  400286:	220a      	movs	r2, #10
  400288:	705a      	strb	r2, [r3, #1]
		gDrawALineColour(&draw_init);
  40028a:	4897      	ldr	r0, [pc, #604]	; (4004e8 <main+0x320>)
  40028c:	f001 f86c 	bl	401368 <gDrawALineColour>
#if 1
		mydelay(10000000);
  400290:	4896      	ldr	r0, [pc, #600]	; (4004ec <main+0x324>)
  400292:	f7ff ff8b 	bl	4001ac <mydelay>
		draw_init.x1 			= 320;
  400296:	4b94      	ldr	r3, [pc, #592]	; (4004e8 <main+0x320>)
  400298:	2200      	movs	r2, #0
  40029a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40029e:	71da      	strb	r2, [r3, #7]
  4002a0:	2200      	movs	r2, #0
  4002a2:	f042 0201 	orr.w	r2, r2, #1
  4002a6:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 175;
  4002a8:	4a8f      	ldr	r2, [pc, #572]	; (4004e8 <main+0x320>)
  4002aa:	6893      	ldr	r3, [r2, #8]
  4002ac:	21af      	movs	r1, #175	; 0xaf
  4002ae:	f361 2317 	bfi	r3, r1, #8, #16
  4002b2:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 220;
  4002b4:	4b8c      	ldr	r3, [pc, #560]	; (4004e8 <main+0x320>)
  4002b6:	2200      	movs	r2, #0
  4002b8:	f062 0223 	orn	r2, r2, #35	; 0x23
  4002bc:	72da      	strb	r2, [r3, #11]
  4002be:	2200      	movs	r2, #0
  4002c0:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 100;
  4002c2:	4a89      	ldr	r2, [pc, #548]	; (4004e8 <main+0x320>)
  4002c4:	68d3      	ldr	r3, [r2, #12]
  4002c6:	2164      	movs	r1, #100	; 0x64
  4002c8:	f361 2317 	bfi	r3, r1, #8, #16
  4002cc:	60d3      	str	r3, [r2, #12]
		draw_init.function 		= F_OVERWRITE;
  4002ce:	4b86      	ldr	r3, [pc, #536]	; (4004e8 <main+0x320>)
  4002d0:	2200      	movs	r2, #0
  4002d2:	709a      	strb	r2, [r3, #2]
		draw_init.type			= 1;
  4002d4:	4b84      	ldr	r3, [pc, #528]	; (4004e8 <main+0x320>)
  4002d6:	2201      	movs	r2, #1
  4002d8:	70da      	strb	r2, [r3, #3]
		draw_init.colour 		= 0x0D;
  4002da:	4b83      	ldr	r3, [pc, #524]	; (4004e8 <main+0x320>)
  4002dc:	220d      	movs	r2, #13
  4002de:	705a      	strb	r2, [r3, #1]
		gDrawAEllipseColour(&draw_init);
  4002e0:	4881      	ldr	r0, [pc, #516]	; (4004e8 <main+0x320>)
  4002e2:	f001 fc29 	bl	401b38 <gDrawAEllipseColour>

		mydelay(10000000);
  4002e6:	4881      	ldr	r0, [pc, #516]	; (4004ec <main+0x324>)
  4002e8:	f7ff ff60 	bl	4001ac <mydelay>
		draw_init.x1 			= 320;
  4002ec:	4b7e      	ldr	r3, [pc, #504]	; (4004e8 <main+0x320>)
  4002ee:	2200      	movs	r2, #0
  4002f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4002f4:	71da      	strb	r2, [r3, #7]
  4002f6:	2200      	movs	r2, #0
  4002f8:	f042 0201 	orr.w	r2, r2, #1
  4002fc:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 175;
  4002fe:	4a7a      	ldr	r2, [pc, #488]	; (4004e8 <main+0x320>)
  400300:	6893      	ldr	r3, [r2, #8]
  400302:	21af      	movs	r1, #175	; 0xaf
  400304:	f361 2317 	bfi	r3, r1, #8, #16
  400308:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 50;
  40030a:	4b77      	ldr	r3, [pc, #476]	; (4004e8 <main+0x320>)
  40030c:	2200      	movs	r2, #0
  40030e:	f042 0232 	orr.w	r2, r2, #50	; 0x32
  400312:	72da      	strb	r2, [r3, #11]
  400314:	2200      	movs	r2, #0
  400316:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 50;
  400318:	4a73      	ldr	r2, [pc, #460]	; (4004e8 <main+0x320>)
  40031a:	68d3      	ldr	r3, [r2, #12]
  40031c:	2132      	movs	r1, #50	; 0x32
  40031e:	f361 2317 	bfi	r3, r1, #8, #16
  400322:	60d3      	str	r3, [r2, #12]
		draw_init.function 		= F_OVERWRITE;
  400324:	4b70      	ldr	r3, [pc, #448]	; (4004e8 <main+0x320>)
  400326:	2200      	movs	r2, #0
  400328:	709a      	strb	r2, [r3, #2]
		draw_init.type			= 1;
  40032a:	4b6f      	ldr	r3, [pc, #444]	; (4004e8 <main+0x320>)
  40032c:	2201      	movs	r2, #1
  40032e:	70da      	strb	r2, [r3, #3]
		draw_init.colour 		= 0x03;
  400330:	4b6d      	ldr	r3, [pc, #436]	; (4004e8 <main+0x320>)
  400332:	2203      	movs	r2, #3
  400334:	705a      	strb	r2, [r3, #1]
		gDrawAEllipseColour(&draw_init);
  400336:	486c      	ldr	r0, [pc, #432]	; (4004e8 <main+0x320>)
  400338:	f001 fbfe 	bl	401b38 <gDrawAEllipseColour>
#endif
		mydelay(10000000);
  40033c:	486b      	ldr	r0, [pc, #428]	; (4004ec <main+0x324>)
  40033e:	f7ff ff35 	bl	4001ac <mydelay>
		draw_init.x1 			= 5;
  400342:	4b69      	ldr	r3, [pc, #420]	; (4004e8 <main+0x320>)
  400344:	2200      	movs	r2, #0
  400346:	f042 0205 	orr.w	r2, r2, #5
  40034a:	71da      	strb	r2, [r3, #7]
  40034c:	2200      	movs	r2, #0
  40034e:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 5;
  400350:	4a65      	ldr	r2, [pc, #404]	; (4004e8 <main+0x320>)
  400352:	6893      	ldr	r3, [r2, #8]
  400354:	2105      	movs	r1, #5
  400356:	f361 2317 	bfi	r3, r1, #8, #16
  40035a:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 635;
  40035c:	4b62      	ldr	r3, [pc, #392]	; (4004e8 <main+0x320>)
  40035e:	2200      	movs	r2, #0
  400360:	f042 027b 	orr.w	r2, r2, #123	; 0x7b
  400364:	72da      	strb	r2, [r3, #11]
  400366:	2200      	movs	r2, #0
  400368:	f042 0202 	orr.w	r2, r2, #2
  40036c:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 315;
  40036e:	4a5e      	ldr	r2, [pc, #376]	; (4004e8 <main+0x320>)
  400370:	68d3      	ldr	r3, [r2, #12]
  400372:	f240 113b 	movw	r1, #315	; 0x13b
  400376:	f361 2317 	bfi	r3, r1, #8, #16
  40037a:	60d3      	str	r3, [r2, #12]
		draw_init.function 		= F_OVERWRITE;
  40037c:	4b5a      	ldr	r3, [pc, #360]	; (4004e8 <main+0x320>)
  40037e:	2200      	movs	r2, #0
  400380:	709a      	strb	r2, [r3, #2]
		draw_init.type			= 0;
  400382:	4b59      	ldr	r3, [pc, #356]	; (4004e8 <main+0x320>)
  400384:	2200      	movs	r2, #0
  400386:	70da      	strb	r2, [r3, #3]
		draw_init.colour 		= 0x0E;
  400388:	4b57      	ldr	r3, [pc, #348]	; (4004e8 <main+0x320>)
  40038a:	220e      	movs	r2, #14
  40038c:	705a      	strb	r2, [r3, #1]
		gDrawARectangleColour(&draw_init);
  40038e:	4856      	ldr	r0, [pc, #344]	; (4004e8 <main+0x320>)
  400390:	f001 f992 	bl	4016b8 <gDrawARectangleColour>

		mydelay(10000000);
  400394:	4855      	ldr	r0, [pc, #340]	; (4004ec <main+0x324>)
  400396:	f7ff ff09 	bl	4001ac <mydelay>
		draw_init.x1 			= 50;
  40039a:	4b53      	ldr	r3, [pc, #332]	; (4004e8 <main+0x320>)
  40039c:	2200      	movs	r2, #0
  40039e:	f042 0232 	orr.w	r2, r2, #50	; 0x32
  4003a2:	71da      	strb	r2, [r3, #7]
  4003a4:	2200      	movs	r2, #0
  4003a6:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 50;
  4003a8:	4a4f      	ldr	r2, [pc, #316]	; (4004e8 <main+0x320>)
  4003aa:	6893      	ldr	r3, [r2, #8]
  4003ac:	2132      	movs	r1, #50	; 0x32
  4003ae:	f361 2317 	bfi	r3, r1, #8, #16
  4003b2:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 400;
  4003b4:	4b4c      	ldr	r3, [pc, #304]	; (4004e8 <main+0x320>)
  4003b6:	2200      	movs	r2, #0
  4003b8:	f062 026f 	orn	r2, r2, #111	; 0x6f
  4003bc:	72da      	strb	r2, [r3, #11]
  4003be:	2200      	movs	r2, #0
  4003c0:	f042 0201 	orr.w	r2, r2, #1
  4003c4:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 200;
  4003c6:	4a48      	ldr	r2, [pc, #288]	; (4004e8 <main+0x320>)
  4003c8:	68d3      	ldr	r3, [r2, #12]
  4003ca:	21c8      	movs	r1, #200	; 0xc8
  4003cc:	f361 2317 	bfi	r3, r1, #8, #16
  4003d0:	60d3      	str	r3, [r2, #12]
		draw_init.function 		= F_OVERWRITE;
  4003d2:	4b45      	ldr	r3, [pc, #276]	; (4004e8 <main+0x320>)
  4003d4:	2200      	movs	r2, #0
  4003d6:	709a      	strb	r2, [r3, #2]
		draw_init.type			= 0;
  4003d8:	4b43      	ldr	r3, [pc, #268]	; (4004e8 <main+0x320>)
  4003da:	2200      	movs	r2, #0
  4003dc:	70da      	strb	r2, [r3, #3]
		draw_init.colour 		= 0x04;
  4003de:	4b42      	ldr	r3, [pc, #264]	; (4004e8 <main+0x320>)
  4003e0:	2204      	movs	r2, #4
  4003e2:	705a      	strb	r2, [r3, #1]
		gDrawARectangleColour(&draw_init);
  4003e4:	4840      	ldr	r0, [pc, #256]	; (4004e8 <main+0x320>)
  4003e6:	f001 f967 	bl	4016b8 <gDrawARectangleColour>

		mydelay(10000000);
  4003ea:	4840      	ldr	r0, [pc, #256]	; (4004ec <main+0x324>)
  4003ec:	f7ff fede 	bl	4001ac <mydelay>
		draw_init.x1 			= 52;
  4003f0:	4b3d      	ldr	r3, [pc, #244]	; (4004e8 <main+0x320>)
  4003f2:	2200      	movs	r2, #0
  4003f4:	f042 0234 	orr.w	r2, r2, #52	; 0x34
  4003f8:	71da      	strb	r2, [r3, #7]
  4003fa:	2200      	movs	r2, #0
  4003fc:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 52;
  4003fe:	4a3a      	ldr	r2, [pc, #232]	; (4004e8 <main+0x320>)
  400400:	6893      	ldr	r3, [r2, #8]
  400402:	2134      	movs	r1, #52	; 0x34
  400404:	f361 2317 	bfi	r3, r1, #8, #16
  400408:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 0;
  40040a:	4b37      	ldr	r3, [pc, #220]	; (4004e8 <main+0x320>)
  40040c:	2200      	movs	r2, #0
  40040e:	72da      	strb	r2, [r3, #11]
  400410:	2200      	movs	r2, #0
  400412:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 0;
  400414:	4a34      	ldr	r2, [pc, #208]	; (4004e8 <main+0x320>)
  400416:	68d3      	ldr	r3, [r2, #12]
  400418:	f36f 2317 	bfc	r3, #8, #16
  40041c:	60d3      	str	r3, [r2, #12]
		draw_init.ascii_sym		= 'a';
  40041e:	4b32      	ldr	r3, [pc, #200]	; (4004e8 <main+0x320>)
  400420:	2261      	movs	r2, #97	; 0x61
  400422:	711a      	strb	r2, [r3, #4]
		draw_init.ascii_font	= 0;
  400424:	4b30      	ldr	r3, [pc, #192]	; (4004e8 <main+0x320>)
  400426:	2200      	movs	r2, #0
  400428:	715a      	strb	r2, [r3, #5]
		draw_init.function 		= F_OVERWRITE;
  40042a:	4b2f      	ldr	r3, [pc, #188]	; (4004e8 <main+0x320>)
  40042c:	2200      	movs	r2, #0
  40042e:	709a      	strb	r2, [r3, #2]
		draw_init.type			= 0;
  400430:	4b2d      	ldr	r3, [pc, #180]	; (4004e8 <main+0x320>)
  400432:	2200      	movs	r2, #0
  400434:	70da      	strb	r2, [r3, #3]
		draw_init.colour 		= 0x0F;
  400436:	4b2c      	ldr	r3, [pc, #176]	; (4004e8 <main+0x320>)
  400438:	220f      	movs	r2, #15
  40043a:	705a      	strb	r2, [r3, #1]
		gDrawAAsciiSymbolColour(&draw_init);
  40043c:	482a      	ldr	r0, [pc, #168]	; (4004e8 <main+0x320>)
  40043e:	f001 facb 	bl	4019d8 <gDrawAAsciiSymbolColour>

		draw_init.x1 			= 60;
  400442:	4b29      	ldr	r3, [pc, #164]	; (4004e8 <main+0x320>)
  400444:	2200      	movs	r2, #0
  400446:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
  40044a:	71da      	strb	r2, [r3, #7]
  40044c:	2200      	movs	r2, #0
  40044e:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 52;
  400450:	4a25      	ldr	r2, [pc, #148]	; (4004e8 <main+0x320>)
  400452:	6893      	ldr	r3, [r2, #8]
  400454:	2134      	movs	r1, #52	; 0x34
  400456:	f361 2317 	bfi	r3, r1, #8, #16
  40045a:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 0;
  40045c:	4b22      	ldr	r3, [pc, #136]	; (4004e8 <main+0x320>)
  40045e:	2200      	movs	r2, #0
  400460:	72da      	strb	r2, [r3, #11]
  400462:	2200      	movs	r2, #0
  400464:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 0;
  400466:	4a20      	ldr	r2, [pc, #128]	; (4004e8 <main+0x320>)
  400468:	68d3      	ldr	r3, [r2, #12]
  40046a:	f36f 2317 	bfc	r3, #8, #16
  40046e:	60d3      	str	r3, [r2, #12]
		draw_init.ascii_sym		= 'B';
  400470:	4b1d      	ldr	r3, [pc, #116]	; (4004e8 <main+0x320>)
  400472:	2242      	movs	r2, #66	; 0x42
  400474:	711a      	strb	r2, [r3, #4]
		draw_init.ascii_font	= 1;
  400476:	4b1c      	ldr	r3, [pc, #112]	; (4004e8 <main+0x320>)
  400478:	2201      	movs	r2, #1
  40047a:	715a      	strb	r2, [r3, #5]
		draw_init.function 		= F_OVERWRITE;
  40047c:	4b1a      	ldr	r3, [pc, #104]	; (4004e8 <main+0x320>)
  40047e:	2200      	movs	r2, #0
  400480:	709a      	strb	r2, [r3, #2]
		draw_init.type			= 0;
  400482:	4b19      	ldr	r3, [pc, #100]	; (4004e8 <main+0x320>)
  400484:	2200      	movs	r2, #0
  400486:	70da      	strb	r2, [r3, #3]
		draw_init.colour 		= 0x0E;
  400488:	4b17      	ldr	r3, [pc, #92]	; (4004e8 <main+0x320>)
  40048a:	220e      	movs	r2, #14
  40048c:	705a      	strb	r2, [r3, #1]
		gDrawAAsciiSymbolColour(&draw_init);
  40048e:	4816      	ldr	r0, [pc, #88]	; (4004e8 <main+0x320>)
  400490:	f001 faa2 	bl	4019d8 <gDrawAAsciiSymbolColour>

		draw_init.x1 			= 68;
  400494:	4b14      	ldr	r3, [pc, #80]	; (4004e8 <main+0x320>)
  400496:	2200      	movs	r2, #0
  400498:	f042 0244 	orr.w	r2, r2, #68	; 0x44
  40049c:	71da      	strb	r2, [r3, #7]
  40049e:	2200      	movs	r2, #0
  4004a0:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 52;
  4004a2:	4a11      	ldr	r2, [pc, #68]	; (4004e8 <main+0x320>)
  4004a4:	6893      	ldr	r3, [r2, #8]
  4004a6:	2134      	movs	r1, #52	; 0x34
  4004a8:	f361 2317 	bfi	r3, r1, #8, #16
  4004ac:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 0;
  4004ae:	4b0e      	ldr	r3, [pc, #56]	; (4004e8 <main+0x320>)
  4004b0:	2200      	movs	r2, #0
  4004b2:	72da      	strb	r2, [r3, #11]
  4004b4:	2200      	movs	r2, #0
  4004b6:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 0;
  4004b8:	4a0b      	ldr	r2, [pc, #44]	; (4004e8 <main+0x320>)
  4004ba:	68d3      	ldr	r3, [r2, #12]
  4004bc:	f36f 2317 	bfc	r3, #8, #16
  4004c0:	60d3      	str	r3, [r2, #12]
		draw_init.ascii_sym		= 'c';
  4004c2:	4b09      	ldr	r3, [pc, #36]	; (4004e8 <main+0x320>)
  4004c4:	2263      	movs	r2, #99	; 0x63
  4004c6:	711a      	strb	r2, [r3, #4]
		draw_init.ascii_font	= 0;
  4004c8:	4b07      	ldr	r3, [pc, #28]	; (4004e8 <main+0x320>)
  4004ca:	2200      	movs	r2, #0
  4004cc:	715a      	strb	r2, [r3, #5]
		draw_init.function 		= F_OVERWRITE;
  4004ce:	4b06      	ldr	r3, [pc, #24]	; (4004e8 <main+0x320>)
  4004d0:	2200      	movs	r2, #0
  4004d2:	709a      	strb	r2, [r3, #2]
		draw_init.type			= 0;
  4004d4:	4b04      	ldr	r3, [pc, #16]	; (4004e8 <main+0x320>)
  4004d6:	2200      	movs	r2, #0
  4004d8:	70da      	strb	r2, [r3, #3]
  4004da:	e009      	b.n	4004f0 <main+0x328>
  4004dc:	2000008c 	.word	0x2000008c
  4004e0:	51eb851f 	.word	0x51eb851f
  4004e4:	01312d00 	.word	0x01312d00
  4004e8:	20000958 	.word	0x20000958
  4004ec:	00989680 	.word	0x00989680
		draw_init.colour 		= 0x0D;
  4004f0:	4b8d      	ldr	r3, [pc, #564]	; (400728 <main+0x560>)
  4004f2:	220d      	movs	r2, #13
  4004f4:	705a      	strb	r2, [r3, #1]
		gDrawAAsciiSymbolColour(&draw_init);
  4004f6:	488c      	ldr	r0, [pc, #560]	; (400728 <main+0x560>)
  4004f8:	f001 fa6e 	bl	4019d8 <gDrawAAsciiSymbolColour>

		draw_init.x1 			= 76;
  4004fc:	4b8a      	ldr	r3, [pc, #552]	; (400728 <main+0x560>)
  4004fe:	2200      	movs	r2, #0
  400500:	f042 024c 	orr.w	r2, r2, #76	; 0x4c
  400504:	71da      	strb	r2, [r3, #7]
  400506:	2200      	movs	r2, #0
  400508:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 52;
  40050a:	4a87      	ldr	r2, [pc, #540]	; (400728 <main+0x560>)
  40050c:	6893      	ldr	r3, [r2, #8]
  40050e:	2134      	movs	r1, #52	; 0x34
  400510:	f361 2317 	bfi	r3, r1, #8, #16
  400514:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 0;
  400516:	4b84      	ldr	r3, [pc, #528]	; (400728 <main+0x560>)
  400518:	2200      	movs	r2, #0
  40051a:	72da      	strb	r2, [r3, #11]
  40051c:	2200      	movs	r2, #0
  40051e:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 0;
  400520:	4a81      	ldr	r2, [pc, #516]	; (400728 <main+0x560>)
  400522:	68d3      	ldr	r3, [r2, #12]
  400524:	f36f 2317 	bfc	r3, #8, #16
  400528:	60d3      	str	r3, [r2, #12]
		draw_init.ascii_sym		= 'D';
  40052a:	4b7f      	ldr	r3, [pc, #508]	; (400728 <main+0x560>)
  40052c:	2244      	movs	r2, #68	; 0x44
  40052e:	711a      	strb	r2, [r3, #4]
		draw_init.ascii_font	= 1;
  400530:	4b7d      	ldr	r3, [pc, #500]	; (400728 <main+0x560>)
  400532:	2201      	movs	r2, #1
  400534:	715a      	strb	r2, [r3, #5]
		draw_init.function 		= F_OVERWRITE;
  400536:	4b7c      	ldr	r3, [pc, #496]	; (400728 <main+0x560>)
  400538:	2200      	movs	r2, #0
  40053a:	709a      	strb	r2, [r3, #2]
		draw_init.type			= 0;
  40053c:	4b7a      	ldr	r3, [pc, #488]	; (400728 <main+0x560>)
  40053e:	2200      	movs	r2, #0
  400540:	70da      	strb	r2, [r3, #3]
		draw_init.colour 		= 0x0C;
  400542:	4b79      	ldr	r3, [pc, #484]	; (400728 <main+0x560>)
  400544:	220c      	movs	r2, #12
  400546:	705a      	strb	r2, [r3, #1]
		gDrawAAsciiSymbolColour(&draw_init);
  400548:	4877      	ldr	r0, [pc, #476]	; (400728 <main+0x560>)
  40054a:	f001 fa45 	bl	4019d8 <gDrawAAsciiSymbolColour>

		draw_init.x1 			= 84;
  40054e:	4b76      	ldr	r3, [pc, #472]	; (400728 <main+0x560>)
  400550:	2200      	movs	r2, #0
  400552:	f042 0254 	orr.w	r2, r2, #84	; 0x54
  400556:	71da      	strb	r2, [r3, #7]
  400558:	2200      	movs	r2, #0
  40055a:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 52;
  40055c:	4a72      	ldr	r2, [pc, #456]	; (400728 <main+0x560>)
  40055e:	6893      	ldr	r3, [r2, #8]
  400560:	2134      	movs	r1, #52	; 0x34
  400562:	f361 2317 	bfi	r3, r1, #8, #16
  400566:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 0;
  400568:	4b6f      	ldr	r3, [pc, #444]	; (400728 <main+0x560>)
  40056a:	2200      	movs	r2, #0
  40056c:	72da      	strb	r2, [r3, #11]
  40056e:	2200      	movs	r2, #0
  400570:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 0;
  400572:	4a6d      	ldr	r2, [pc, #436]	; (400728 <main+0x560>)
  400574:	68d3      	ldr	r3, [r2, #12]
  400576:	f36f 2317 	bfc	r3, #8, #16
  40057a:	60d3      	str	r3, [r2, #12]
		draw_init.ascii_sym		= 'e';
  40057c:	4b6a      	ldr	r3, [pc, #424]	; (400728 <main+0x560>)
  40057e:	2265      	movs	r2, #101	; 0x65
  400580:	711a      	strb	r2, [r3, #4]
		draw_init.ascii_font	= 0;
  400582:	4b69      	ldr	r3, [pc, #420]	; (400728 <main+0x560>)
  400584:	2200      	movs	r2, #0
  400586:	715a      	strb	r2, [r3, #5]
		draw_init.function 		= F_OVERWRITE;
  400588:	4b67      	ldr	r3, [pc, #412]	; (400728 <main+0x560>)
  40058a:	2200      	movs	r2, #0
  40058c:	709a      	strb	r2, [r3, #2]
		draw_init.type			= 0;
  40058e:	4b66      	ldr	r3, [pc, #408]	; (400728 <main+0x560>)
  400590:	2200      	movs	r2, #0
  400592:	70da      	strb	r2, [r3, #3]
		draw_init.colour 		= 0x0B;
  400594:	4b64      	ldr	r3, [pc, #400]	; (400728 <main+0x560>)
  400596:	220b      	movs	r2, #11
  400598:	705a      	strb	r2, [r3, #1]
		gDrawAAsciiSymbolColour(&draw_init);
  40059a:	4863      	ldr	r0, [pc, #396]	; (400728 <main+0x560>)
  40059c:	f001 fa1c 	bl	4019d8 <gDrawAAsciiSymbolColour>

		draw_init.x1 			= 92;
  4005a0:	4b61      	ldr	r3, [pc, #388]	; (400728 <main+0x560>)
  4005a2:	2200      	movs	r2, #0
  4005a4:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
  4005a8:	71da      	strb	r2, [r3, #7]
  4005aa:	2200      	movs	r2, #0
  4005ac:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 52;
  4005ae:	4a5e      	ldr	r2, [pc, #376]	; (400728 <main+0x560>)
  4005b0:	6893      	ldr	r3, [r2, #8]
  4005b2:	2134      	movs	r1, #52	; 0x34
  4005b4:	f361 2317 	bfi	r3, r1, #8, #16
  4005b8:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 0;
  4005ba:	4b5b      	ldr	r3, [pc, #364]	; (400728 <main+0x560>)
  4005bc:	2200      	movs	r2, #0
  4005be:	72da      	strb	r2, [r3, #11]
  4005c0:	2200      	movs	r2, #0
  4005c2:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 0;
  4005c4:	4a58      	ldr	r2, [pc, #352]	; (400728 <main+0x560>)
  4005c6:	68d3      	ldr	r3, [r2, #12]
  4005c8:	f36f 2317 	bfc	r3, #8, #16
  4005cc:	60d3      	str	r3, [r2, #12]
		draw_init.ascii_sym		= 'F';
  4005ce:	4b56      	ldr	r3, [pc, #344]	; (400728 <main+0x560>)
  4005d0:	2246      	movs	r2, #70	; 0x46
  4005d2:	711a      	strb	r2, [r3, #4]
		draw_init.ascii_font	= 1;
  4005d4:	4b54      	ldr	r3, [pc, #336]	; (400728 <main+0x560>)
  4005d6:	2201      	movs	r2, #1
  4005d8:	715a      	strb	r2, [r3, #5]
		draw_init.function 		= F_OVERWRITE;
  4005da:	4b53      	ldr	r3, [pc, #332]	; (400728 <main+0x560>)
  4005dc:	2200      	movs	r2, #0
  4005de:	709a      	strb	r2, [r3, #2]
		draw_init.type			= 0;
  4005e0:	4b51      	ldr	r3, [pc, #324]	; (400728 <main+0x560>)
  4005e2:	2200      	movs	r2, #0
  4005e4:	70da      	strb	r2, [r3, #3]
		draw_init.colour 		= 0x0A;
  4005e6:	4b50      	ldr	r3, [pc, #320]	; (400728 <main+0x560>)
  4005e8:	220a      	movs	r2, #10
  4005ea:	705a      	strb	r2, [r3, #1]
		gDrawAAsciiSymbolColour(&draw_init);
  4005ec:	484e      	ldr	r0, [pc, #312]	; (400728 <main+0x560>)
  4005ee:	f001 f9f3 	bl	4019d8 <gDrawAAsciiSymbolColour>



#if 1
		mydelay(20000000);
  4005f2:	484e      	ldr	r0, [pc, #312]	; (40072c <main+0x564>)
  4005f4:	f7ff fdda 	bl	4001ac <mydelay>
		draw_init.x1 			= 120;
  4005f8:	4b4b      	ldr	r3, [pc, #300]	; (400728 <main+0x560>)
  4005fa:	2200      	movs	r2, #0
  4005fc:	f042 0278 	orr.w	r2, r2, #120	; 0x78
  400600:	71da      	strb	r2, [r3, #7]
  400602:	2200      	movs	r2, #0
  400604:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 120;
  400606:	4a48      	ldr	r2, [pc, #288]	; (400728 <main+0x560>)
  400608:	6893      	ldr	r3, [r2, #8]
  40060a:	2178      	movs	r1, #120	; 0x78
  40060c:	f361 2317 	bfi	r3, r1, #8, #16
  400610:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 240;
  400612:	4b45      	ldr	r3, [pc, #276]	; (400728 <main+0x560>)
  400614:	2200      	movs	r2, #0
  400616:	f062 020f 	orn	r2, r2, #15
  40061a:	72da      	strb	r2, [r3, #11]
  40061c:	2200      	movs	r2, #0
  40061e:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 240;
  400620:	4a41      	ldr	r2, [pc, #260]	; (400728 <main+0x560>)
  400622:	68d3      	ldr	r3, [r2, #12]
  400624:	21f0      	movs	r1, #240	; 0xf0
  400626:	f361 2317 	bfi	r3, r1, #8, #16
  40062a:	60d3      	str	r3, [r2, #12]
		draw_init.function 		= F_OVERWRITE;
  40062c:	4b3e      	ldr	r3, [pc, #248]	; (400728 <main+0x560>)
  40062e:	2200      	movs	r2, #0
  400630:	709a      	strb	r2, [r3, #2]
		draw_init.type			= 1;
  400632:	4b3d      	ldr	r3, [pc, #244]	; (400728 <main+0x560>)
  400634:	2201      	movs	r2, #1
  400636:	70da      	strb	r2, [r3, #3]
		draw_init.colour 		= 0x05;
  400638:	4b3b      	ldr	r3, [pc, #236]	; (400728 <main+0x560>)
  40063a:	2205      	movs	r2, #5
  40063c:	705a      	strb	r2, [r3, #1]
		gDrawARectangleColour(&draw_init);
  40063e:	483a      	ldr	r0, [pc, #232]	; (400728 <main+0x560>)
  400640:	f001 f83a 	bl	4016b8 <gDrawARectangleColour>
#endif
		mydelay(20000000);
  400644:	4839      	ldr	r0, [pc, #228]	; (40072c <main+0x564>)
  400646:	f7ff fdb1 	bl	4001ac <mydelay>
		draw_init.x1 			= 50;
  40064a:	4b37      	ldr	r3, [pc, #220]	; (400728 <main+0x560>)
  40064c:	2200      	movs	r2, #0
  40064e:	f042 0232 	orr.w	r2, r2, #50	; 0x32
  400652:	71da      	strb	r2, [r3, #7]
  400654:	2200      	movs	r2, #0
  400656:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 50;
  400658:	4a33      	ldr	r2, [pc, #204]	; (400728 <main+0x560>)
  40065a:	6893      	ldr	r3, [r2, #8]
  40065c:	2132      	movs	r1, #50	; 0x32
  40065e:	f361 2317 	bfi	r3, r1, #8, #16
  400662:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 400;
  400664:	4b30      	ldr	r3, [pc, #192]	; (400728 <main+0x560>)
  400666:	2200      	movs	r2, #0
  400668:	f062 026f 	orn	r2, r2, #111	; 0x6f
  40066c:	72da      	strb	r2, [r3, #11]
  40066e:	2200      	movs	r2, #0
  400670:	f042 0201 	orr.w	r2, r2, #1
  400674:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 200;
  400676:	4a2c      	ldr	r2, [pc, #176]	; (400728 <main+0x560>)
  400678:	68d3      	ldr	r3, [r2, #12]
  40067a:	21c8      	movs	r1, #200	; 0xc8
  40067c:	f361 2317 	bfi	r3, r1, #8, #16
  400680:	60d3      	str	r3, [r2, #12]
		gSetADrawFrame(&draw_init);
  400682:	4829      	ldr	r0, [pc, #164]	; (400728 <main+0x560>)
  400684:	f001 fcc2 	bl	40200c <gSetADrawFrame>
		draw_init.x1 			= 10;
  400688:	4b27      	ldr	r3, [pc, #156]	; (400728 <main+0x560>)
  40068a:	2200      	movs	r2, #0
  40068c:	f042 020a 	orr.w	r2, r2, #10
  400690:	71da      	strb	r2, [r3, #7]
  400692:	2200      	movs	r2, #0
  400694:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 10;
  400696:	4a24      	ldr	r2, [pc, #144]	; (400728 <main+0x560>)
  400698:	6893      	ldr	r3, [r2, #8]
  40069a:	210a      	movs	r1, #10
  40069c:	f361 2317 	bfi	r3, r1, #8, #16
  4006a0:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 630;
  4006a2:	4b21      	ldr	r3, [pc, #132]	; (400728 <main+0x560>)
  4006a4:	2200      	movs	r2, #0
  4006a6:	f042 0276 	orr.w	r2, r2, #118	; 0x76
  4006aa:	72da      	strb	r2, [r3, #11]
  4006ac:	2200      	movs	r2, #0
  4006ae:	f042 0202 	orr.w	r2, r2, #2
  4006b2:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 320;
  4006b4:	4a1c      	ldr	r2, [pc, #112]	; (400728 <main+0x560>)
  4006b6:	68d3      	ldr	r3, [r2, #12]
  4006b8:	f44f 71a0 	mov.w	r1, #320	; 0x140
  4006bc:	f361 2317 	bfi	r3, r1, #8, #16
  4006c0:	60d3      	str	r3, [r2, #12]
		draw_init.function 		= F_OVERWRITE;
  4006c2:	4b19      	ldr	r3, [pc, #100]	; (400728 <main+0x560>)
  4006c4:	2200      	movs	r2, #0
  4006c6:	709a      	strb	r2, [r3, #2]
		draw_init.colour 		= 0x00;
  4006c8:	4b17      	ldr	r3, [pc, #92]	; (400728 <main+0x560>)
  4006ca:	2200      	movs	r2, #0
  4006cc:	705a      	strb	r2, [r3, #1]
		gDrawALineColour(&draw_init);
  4006ce:	4816      	ldr	r0, [pc, #88]	; (400728 <main+0x560>)
  4006d0:	f000 fe4a 	bl	401368 <gDrawALineColour>

		mydelay(20000000);
  4006d4:	4815      	ldr	r0, [pc, #84]	; (40072c <main+0x564>)
  4006d6:	f7ff fd69 	bl	4001ac <mydelay>
		draw_init.x1 			= 10;
  4006da:	4b13      	ldr	r3, [pc, #76]	; (400728 <main+0x560>)
  4006dc:	2200      	movs	r2, #0
  4006de:	f042 020a 	orr.w	r2, r2, #10
  4006e2:	71da      	strb	r2, [r3, #7]
  4006e4:	2200      	movs	r2, #0
  4006e6:	721a      	strb	r2, [r3, #8]
		draw_init.y1 			= 320;
  4006e8:	4a0f      	ldr	r2, [pc, #60]	; (400728 <main+0x560>)
  4006ea:	6893      	ldr	r3, [r2, #8]
  4006ec:	f44f 71a0 	mov.w	r1, #320	; 0x140
  4006f0:	f361 2317 	bfi	r3, r1, #8, #16
  4006f4:	6093      	str	r3, [r2, #8]
		draw_init.x2_rx 		= 630;
  4006f6:	4b0c      	ldr	r3, [pc, #48]	; (400728 <main+0x560>)
  4006f8:	2200      	movs	r2, #0
  4006fa:	f042 0276 	orr.w	r2, r2, #118	; 0x76
  4006fe:	72da      	strb	r2, [r3, #11]
  400700:	2200      	movs	r2, #0
  400702:	f042 0202 	orr.w	r2, r2, #2
  400706:	731a      	strb	r2, [r3, #12]
		draw_init.y2_ry 		= 10;
  400708:	4a07      	ldr	r2, [pc, #28]	; (400728 <main+0x560>)
  40070a:	68d3      	ldr	r3, [r2, #12]
  40070c:	210a      	movs	r1, #10
  40070e:	f361 2317 	bfi	r3, r1, #8, #16
  400712:	60d3      	str	r3, [r2, #12]
		draw_init.function 		= F_OVERWRITE;
  400714:	4b04      	ldr	r3, [pc, #16]	; (400728 <main+0x560>)
  400716:	2200      	movs	r2, #0
  400718:	709a      	strb	r2, [r3, #2]
		draw_init.colour 		= 0x00;
  40071a:	4b03      	ldr	r3, [pc, #12]	; (400728 <main+0x560>)
  40071c:	2200      	movs	r2, #0
  40071e:	705a      	strb	r2, [r3, #1]
		gDrawALineColour(&draw_init);
  400720:	4801      	ldr	r0, [pc, #4]	; (400728 <main+0x560>)
  400722:	f000 fe21 	bl	401368 <gDrawALineColour>

	  /* Select Idle mode entry -------------------------------------------------*/
	  /* Request Wait For Interrupt	*/
//		Idle();
	}
  400726:	e561      	b.n	4001ec <main+0x24>
  400728:	20000958 	.word	0x20000958
  40072c:	01312d00 	.word	0x01312d00

00400730 <SysTick_Handler>:
  * 				SysTick interrupt happens every 10 ms.
  * @param  None
  * @retval None
  */
void SysTick_Handler( void ) 
{
  400730:	b508      	push	{r3, lr}
 static unsigned long ticks = 0;
 static unsigned int  led_state = 0x00;


  if (ticks++ >= 99) 					/* Set Clock1s to 1 every second */
  400732:	4b0e      	ldr	r3, [pc, #56]	; (40076c <SysTick_Handler+0x3c>)
  400734:	681b      	ldr	r3, [r3, #0]
  400736:	1c59      	adds	r1, r3, #1
  400738:	4a0c      	ldr	r2, [pc, #48]	; (40076c <SysTick_Handler+0x3c>)
  40073a:	6011      	str	r1, [r2, #0]
  40073c:	2b62      	cmp	r3, #98	; 0x62
  40073e:	d913      	bls.n	400768 <SysTick_Handler+0x38>
	{                       
    ticks    = 0;
  400740:	4b0a      	ldr	r3, [pc, #40]	; (40076c <SysTick_Handler+0x3c>)
  400742:	2200      	movs	r2, #0
  400744:	601a      	str	r2, [r3, #0]
		
		/* Blink the LED */
		if( led_state ) 
  400746:	4b0a      	ldr	r3, [pc, #40]	; (400770 <SysTick_Handler+0x40>)
  400748:	681b      	ldr	r3, [r3, #0]
  40074a:	2b00      	cmp	r3, #0
  40074c:	d005      	beq.n	40075a <SysTick_Handler+0x2a>
		{
			LedOff();
  40074e:	f000 f821 	bl	400794 <LedOff>
			led_state = 0;
  400752:	4b07      	ldr	r3, [pc, #28]	; (400770 <SysTick_Handler+0x40>)
  400754:	2200      	movs	r2, #0
  400756:	601a      	str	r2, [r3, #0]
  400758:	e006      	b.n	400768 <SysTick_Handler+0x38>
		}
		else
		{
			LedOn();
  40075a:	f000 f813 	bl	400784 <LedOn>
			led_state++;
  40075e:	4b04      	ldr	r3, [pc, #16]	; (400770 <SysTick_Handler+0x40>)
  400760:	681b      	ldr	r3, [r3, #0]
  400762:	1c5a      	adds	r2, r3, #1
  400764:	4b02      	ldr	r3, [pc, #8]	; (400770 <SysTick_Handler+0x40>)
  400766:	601a      	str	r2, [r3, #0]
		}
  }
}
  400768:	bd08      	pop	{r3, pc}
  40076a:	bf00      	nop
  40076c:	20000910 	.word	0x20000910
  400770:	20000914 	.word	0x20000914

00400774 <LedInit>:
  * @brief  This function ...
  * @param  None
  * @retval None
  */
void LedInit(void)
{
  400774:	b508      	push	{r3, lr}
	
	
	PIO_Configure(&pin_LED0, 1);
  400776:	4802      	ldr	r0, [pc, #8]	; (400780 <LedInit+0xc>)
  400778:	2101      	movs	r1, #1
  40077a:	f001 ff8f 	bl	40269c <PIO_Configure>
}
  40077e:	bd08      	pop	{r3, pc}
  400780:	20000000 	.word	0x20000000

00400784 <LedOn>:
  * @brief  This function ...
  * @param  None
  * @retval None
  */
void LedOn( void )
{
  400784:	b508      	push	{r3, lr}
	
	
	PIO_Set(&pin_LED0);
  400786:	4802      	ldr	r0, [pc, #8]	; (400790 <LedOn+0xc>)
  400788:	f002 f834 	bl	4027f4 <PIO_Set>
}
  40078c:	bd08      	pop	{r3, pc}
  40078e:	bf00      	nop
  400790:	20000000 	.word	0x20000000

00400794 <LedOff>:
  * @brief  This function ...
  * @param  None
  * @retval None
  */
void LedOff( void )
{
  400794:	b508      	push	{r3, lr}
	
	
	PIO_Clear(&pin_LED0);
  400796:	4802      	ldr	r0, [pc, #8]	; (4007a0 <LedOff+0xc>)
  400798:	f002 f836 	bl	402808 <PIO_Clear>
}
  40079c:	bd08      	pop	{r3, pc}
  40079e:	bf00      	nop
  4007a0:	20000000 	.word	0x20000000

004007a4 <LedToggle>:
  * @brief  This function ...
  * @param  None
  * @retval None
  */
void LedToggle( void )
{
  4007a4:	b508      	push	{r3, lr}
	
	if( PIO_GetOutputDataStatus(&pin_LED0) )
  4007a6:	4807      	ldr	r0, [pc, #28]	; (4007c4 <LedToggle+0x20>)
  4007a8:	f002 f858 	bl	40285c <PIO_GetOutputDataStatus>
  4007ac:	4603      	mov	r3, r0
  4007ae:	2b00      	cmp	r3, #0
  4007b0:	d003      	beq.n	4007ba <LedToggle+0x16>
	{
		PIO_Clear(&pin_LED0);
  4007b2:	4804      	ldr	r0, [pc, #16]	; (4007c4 <LedToggle+0x20>)
  4007b4:	f002 f828 	bl	402808 <PIO_Clear>
  4007b8:	e002      	b.n	4007c0 <LedToggle+0x1c>
	}
	else
	{
		PIO_Set(&pin_LED0);
  4007ba:	4802      	ldr	r0, [pc, #8]	; (4007c4 <LedToggle+0x20>)
  4007bc:	f002 f81a 	bl	4027f4 <PIO_Set>
	}
}
  4007c0:	bd08      	pop	{r3, pc}
  4007c2:	bf00      	nop
  4007c4:	20000000 	.word	0x20000000

004007c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4007c8:	b082      	sub	sp, #8
  4007ca:	4603      	mov	r3, r0
  4007cc:	f88d 3007 	strb.w	r3, [sp, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4007d0:	4b07      	ldr	r3, [pc, #28]	; (4007f0 <NVIC_EnableIRQ+0x28>)
  4007d2:	f99d 2007 	ldrsb.w	r2, [sp, #7]
  4007d6:	0952      	lsrs	r2, r2, #5
  4007d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
  4007dc:	f001 011f 	and.w	r1, r1, #31
  4007e0:	2001      	movs	r0, #1
  4007e2:	fa00 f101 	lsl.w	r1, r0, r1
  4007e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4007ea:	b002      	add	sp, #8
  4007ec:	4770      	bx	lr
  4007ee:	bf00      	nop
  4007f0:	e000e100 	.word	0xe000e100

004007f4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4007f4:	b082      	sub	sp, #8
  4007f6:	4603      	mov	r3, r0
  4007f8:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4007fc:	4b07      	ldr	r3, [pc, #28]	; (40081c <NVIC_DisableIRQ+0x28>)
  4007fe:	f99d 2007 	ldrsb.w	r2, [sp, #7]
  400802:	0952      	lsrs	r2, r2, #5
  400804:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400808:	f001 011f 	and.w	r1, r1, #31
  40080c:	2001      	movs	r0, #1
  40080e:	fa00 f101 	lsl.w	r1, r0, r1
  400812:	3220      	adds	r2, #32
  400814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400818:	b002      	add	sp, #8
  40081a:	4770      	bx	lr
  40081c:	e000e100 	.word	0xe000e100

00400820 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400820:	b082      	sub	sp, #8
  400822:	4603      	mov	r3, r0
  400824:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400828:	4b07      	ldr	r3, [pc, #28]	; (400848 <NVIC_ClearPendingIRQ+0x28>)
  40082a:	f99d 2007 	ldrsb.w	r2, [sp, #7]
  40082e:	0952      	lsrs	r2, r2, #5
  400830:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400834:	f001 011f 	and.w	r1, r1, #31
  400838:	2001      	movs	r0, #1
  40083a:	fa00 f101 	lsl.w	r1, r0, r1
  40083e:	3260      	adds	r2, #96	; 0x60
  400840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400844:	b002      	add	sp, #8
  400846:	4770      	bx	lr
  400848:	e000e100 	.word	0xe000e100

0040084c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40084c:	b082      	sub	sp, #8
  40084e:	4603      	mov	r3, r0
  400850:	9100      	str	r1, [sp, #0]
  400852:	f88d 3007 	strb.w	r3, [sp, #7]
  if(IRQn < 0) {
  400856:	f99d 3007 	ldrsb.w	r3, [sp, #7]
  40085a:	2b00      	cmp	r3, #0
  40085c:	da0c      	bge.n	400878 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40085e:	490c      	ldr	r1, [pc, #48]	; (400890 <NVIC_SetPriority+0x44>)
  400860:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400864:	f003 030f 	and.w	r3, r3, #15
  400868:	3b04      	subs	r3, #4
  40086a:	9a00      	ldr	r2, [sp, #0]
  40086c:	b2d2      	uxtb	r2, r2
  40086e:	0112      	lsls	r2, r2, #4
  400870:	b2d2      	uxtb	r2, r2
  400872:	440b      	add	r3, r1
  400874:	761a      	strb	r2, [r3, #24]
  400876:	e009      	b.n	40088c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400878:	4906      	ldr	r1, [pc, #24]	; (400894 <NVIC_SetPriority+0x48>)
  40087a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
  40087e:	9a00      	ldr	r2, [sp, #0]
  400880:	b2d2      	uxtb	r2, r2
  400882:	0112      	lsls	r2, r2, #4
  400884:	b2d2      	uxtb	r2, r2
  400886:	440b      	add	r3, r1
  400888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40088c:	b002      	add	sp, #8
  40088e:	4770      	bx	lr
  400890:	e000ed00 	.word	0xe000ed00
  400894:	e000e100 	.word	0xe000e100

00400898 <TC0_IRQHandler>:
  * @brief  
  * @param  None
  * @retval None
  */
void TC0_IRQHandler(void)
{
  400898:	b082      	sub	sp, #8
volatile uint32_t dummy;


  /* Clear status bit to acknowledge interrupt */
  dummy = TC0->TC_CHANNEL[ 0 ].TC_SR;
  40089a:	4b0a      	ldr	r3, [pc, #40]	; (4008c4 <TC0_IRQHandler+0x2c>)
  40089c:	6a1b      	ldr	r3, [r3, #32]
  40089e:	9301      	str	r3, [sp, #4]
  if( g_vflag )
  4008a0:	4b09      	ldr	r3, [pc, #36]	; (4008c8 <TC0_IRQHandler+0x30>)
  4008a2:	781b      	ldrb	r3, [r3, #0]
  4008a4:	b2db      	uxtb	r3, r3
  4008a6:	2b00      	cmp	r3, #0
  4008a8:	d00a      	beq.n	4008c0 <TC0_IRQHandler+0x28>
  {
    HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
  4008aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4008ae:	f44f 7280 	mov.w	r2, #256	; 0x100
  4008b2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    HSMCI->HSMCI_IER = HSMCI_IER_TXBUFE;
  4008b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4008ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4008be:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
  4008c0:	b002      	add	sp, #8
  4008c2:	4770      	bx	lr
  4008c4:	40010000 	.word	0x40010000
  4008c8:	20000918 	.word	0x20000918

004008cc <TC1_IRQHandler>:
  * @brief  
  * @param  None
  * @retval None
  */
void TC1_IRQHandler(void)
{
  4008cc:	b082      	sub	sp, #8
volatile uint32_t dummy;


  /* Clear status bit to acknowledge interrupt */
  dummy = TC0->TC_CHANNEL[ 1 ].TC_SR;
  4008ce:	4b04      	ldr	r3, [pc, #16]	; (4008e0 <TC1_IRQHandler+0x14>)
  4008d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  4008d2:	9301      	str	r3, [sp, #4]
  g_vflag = 1;
  4008d4:	4b03      	ldr	r3, [pc, #12]	; (4008e4 <TC1_IRQHandler+0x18>)
  4008d6:	2201      	movs	r2, #1
  4008d8:	701a      	strb	r2, [r3, #0]
}
  4008da:	b002      	add	sp, #8
  4008dc:	4770      	bx	lr
  4008de:	bf00      	nop
  4008e0:	40010000 	.word	0x40010000
  4008e4:	20000918 	.word	0x20000918

004008e8 <HSMCI_IRQHandler>:
  * @brief  
  * @param  None
  * @retval None
  */
void HSMCI_IRQHandler( void )
{
  4008e8:	b082      	sub	sp, #8
volatile uint32_t dummy;

//LedOn();
//LedToggle();
  /* Clear status bit to acknowledge interrupt */
  dummy = HSMCI->HSMCI_SR;
  4008ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4008f0:	9301      	str	r3, [sp, #4]
		HSMCI->HSMCI_TCR = HID_VSIZE/4;		
	}
#endif

#if 1
	g_vline++;
  4008f2:	4b19      	ldr	r3, [pc, #100]	; (400958 <HSMCI_IRQHandler+0x70>)
  4008f4:	881b      	ldrh	r3, [r3, #0]
  4008f6:	b29b      	uxth	r3, r3
  4008f8:	3301      	adds	r3, #1
  4008fa:	b29a      	uxth	r2, r3
  4008fc:	4b16      	ldr	r3, [pc, #88]	; (400958 <HSMCI_IRQHandler+0x70>)
  4008fe:	801a      	strh	r2, [r3, #0]
	if( g_vline > VID_VSIZE )
  400900:	4b15      	ldr	r3, [pc, #84]	; (400958 <HSMCI_IRQHandler+0x70>)
  400902:	881b      	ldrh	r3, [r3, #0]
  400904:	b29b      	uxth	r3, r3
  400906:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  40090a:	d905      	bls.n	400918 <HSMCI_IRQHandler+0x30>
  {
  	g_vline = 0;
  40090c:	4b12      	ldr	r3, [pc, #72]	; (400958 <HSMCI_IRQHandler+0x70>)
  40090e:	2200      	movs	r2, #0
  400910:	801a      	strh	r2, [r3, #0]
  	g_vflag = 0;
  400912:	4b12      	ldr	r3, [pc, #72]	; (40095c <HSMCI_IRQHandler+0x74>)
  400914:	2200      	movs	r2, #0
  400916:	701a      	strb	r2, [r3, #0]
  }

	HSMCI->HSMCI_IDR = HSMCI_IDR_TXBUFE;
  400918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40091c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400920:	649a      	str	r2, [r3, #72]	; 0x48
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTDIS;
  400922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400926:	f44f 7200 	mov.w	r2, #512	; 0x200
  40092a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	HSMCI->HSMCI_TPR = (uint32_t)&ga_Write_Block[g_vline][0];
  40092e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400932:	4b09      	ldr	r3, [pc, #36]	; (400958 <HSMCI_IRQHandler+0x70>)
  400934:	881b      	ldrh	r3, [r3, #0]
  400936:	b29b      	uxth	r3, r3
  400938:	461a      	mov	r2, r3
  40093a:	4613      	mov	r3, r2
  40093c:	009b      	lsls	r3, r3, #2
  40093e:	4413      	add	r3, r2
  400940:	019b      	lsls	r3, r3, #6
  400942:	4a07      	ldr	r2, [pc, #28]	; (400960 <HSMCI_IRQHandler+0x78>)
  400944:	4413      	add	r3, r2
  400946:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
	HSMCI->HSMCI_TCR = HID_VSIZE/4;
  40094a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40094e:	2250      	movs	r2, #80	; 0x50
  400950:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

#endif
}
  400954:	b002      	add	sp, #8
  400956:	4770      	bx	lr
  400958:	2000091a 	.word	0x2000091a
  40095c:	20000918 	.word	0x20000918
  400960:	20000974 	.word	0x20000974

00400964 <ConfigTCPins>:
  * @brief  
  * @param  None
  * @retval None
  */
void ConfigTCPins( void )
{
  400964:	b508      	push	{r3, lr}

	/* pin TIOA0 - HSYNC, pin TIOA1 - VSYNC */
	PIO_Configure(pins_TC, PIO_LISTSIZE(pins_TC));
  400966:	4802      	ldr	r0, [pc, #8]	; (400970 <ConfigTCPins+0xc>)
  400968:	2102      	movs	r1, #2
  40096a:	f001 fe97 	bl	40269c <PIO_Configure>
}
  40096e:	bd08      	pop	{r3, pc}
  400970:	2000000c 	.word	0x2000000c

00400974 <ConfigTCInterrupt>:
  * @brief  
  * @param  None
  * @retval None
  */
void ConfigTCInterrupt( void )
{
  400974:	b508      	push	{r3, lr}

  /* Configure TC interrupts */
  NVIC_DisableIRQ(TC0_IRQn);
  400976:	2017      	movs	r0, #23
  400978:	f7ff ff3c 	bl	4007f4 <NVIC_DisableIRQ>
  NVIC_ClearPendingIRQ(TC0_IRQn); 
  40097c:	2017      	movs	r0, #23
  40097e:	f7ff ff4f 	bl	400820 <NVIC_ClearPendingIRQ>
  NVIC_SetPriority(TC0_IRQn,0);
  400982:	2017      	movs	r0, #23
  400984:	2100      	movs	r1, #0
  400986:	f7ff ff61 	bl	40084c <NVIC_SetPriority>
  NVIC_DisableIRQ(TC1_IRQn); 
  40098a:	2018      	movs	r0, #24
  40098c:	f7ff ff32 	bl	4007f4 <NVIC_DisableIRQ>
  NVIC_ClearPendingIRQ(TC1_IRQn); 
  400990:	2018      	movs	r0, #24
  400992:	f7ff ff45 	bl	400820 <NVIC_ClearPendingIRQ>
  NVIC_SetPriority(TC1_IRQn,0);
  400996:	2018      	movs	r0, #24
  400998:	2100      	movs	r1, #0
  40099a:	f7ff ff57 	bl	40084c <NVIC_SetPriority>

  NVIC_EnableIRQ(TC0_IRQn);
  40099e:	2017      	movs	r0, #23
  4009a0:	f7ff ff12 	bl	4007c8 <NVIC_EnableIRQ>
  NVIC_EnableIRQ(TC1_IRQn); 	
  4009a4:	2018      	movs	r0, #24
  4009a6:	f7ff ff0f 	bl	4007c8 <NVIC_EnableIRQ>
}
  4009aa:	bd08      	pop	{r3, pc}

004009ac <ConfigHVSynchroOut>:
  * @brief
  * @param  None
  * @retval None
  */
void ConfigHVSynchroOut( void )
{
  4009ac:	b508      	push	{r3, lr}
__| |______________________________| |___________
  |P|
  |---------------O----------------|

*/
	ConfigTCPins();
  4009ae:	f7ff ffd9 	bl	400964 <ConfigTCPins>

	PMC_EnablePeripheral(ID_TCH);
  4009b2:	2017      	movs	r0, #23
  4009b4:	f002 f972 	bl	402c9c <PMC_EnablePeripheral>
	PMC_EnablePeripheral(ID_TCV);
  4009b8:	2018      	movs	r0, #24
  4009ba:	f002 f96f 	bl	402c9c <PMC_EnablePeripheral>

	/* In clock freq.(f)		-> TIMER_CLOCK1 = MCK/2, 				*/
	/* Out H clock period (T) 	-> A = 1/(TIMER_CLOCK1/RegC), 			*/
	/* H Sync pulse period (T)	-> B = 1/(TIMER_CLOCK1 / RegA), 		*/
	/* H Back porch period (T)	-> C = (1/(TIMER_CLOCK1 / RegB)) - B 	*/
	TC_Configure(TC, CHANNEL_H, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_ACPC_SET | TC_CMR_BCPC_SET | TC_CMR_ACPA_CLEAR | TC_CMR_BCPB_CLEAR | TC_CMR_WAVE | TC_CMR_EEVT_XC0 | TC_CMR_WAVSEL_UP_RC);
  4009be:	4821      	ldr	r0, [pc, #132]	; (400a44 <ConfigHVSynchroOut+0x98>)
  4009c0:	2100      	movs	r1, #0
  4009c2:	4a21      	ldr	r2, [pc, #132]	; (400a48 <ConfigHVSynchroOut+0x9c>)
  4009c4:	f001 ffa8 	bl	402918 <TC_Configure>
	TC_WriteRa(TC, CHANNEL_H, 94);
  4009c8:	481e      	ldr	r0, [pc, #120]	; (400a44 <ConfigHVSynchroOut+0x98>)
  4009ca:	2100      	movs	r1, #0
  4009cc:	225e      	movs	r2, #94	; 0x5e
  4009ce:	f001 ffd5 	bl	40297c <TC_WriteRa>
	TC_WriteRb(TC, CHANNEL_H, 141);
  4009d2:	481c      	ldr	r0, [pc, #112]	; (400a44 <ConfigHVSynchroOut+0x98>)
  4009d4:	2100      	movs	r1, #0
  4009d6:	228d      	movs	r2, #141	; 0x8d
  4009d8:	f001 ffee 	bl	4029b8 <TC_WriteRb>
	TC_WriteRc(TC, CHANNEL_H, 1652);
  4009dc:	4819      	ldr	r0, [pc, #100]	; (400a44 <ConfigHVSynchroOut+0x98>)
  4009de:	2100      	movs	r1, #0
  4009e0:	f240 6274 	movw	r2, #1652	; 0x674
  4009e4:	f002 f806 	bl	4029f4 <TC_WriteRc>

	/* In clock period (T)		-> TIOA0 = A, 			*/
	/* Out V clock period (T) 	-> O = A*RegC, 			*/
	/* V Sync pulse period (T) 	-> P = A*RegA), 		*/
	/* V Back porch period (T) 	-> Q = (A*RegB) - P 	*/
	TC_Configure(TC, CHANNEL_V, TC_CMR_TCCLKS_XC1 | TC_CMR_ACPC_SET | TC_CMR_BCPC_SET | TC_CMR_ACPA_CLEAR | TC_CMR_BCPB_CLEAR | TC_CMR_WAVE | TC_CMR_EEVT_XC0 | TC_CMR_WAVSEL_UP_RC);
  4009e8:	4816      	ldr	r0, [pc, #88]	; (400a44 <ConfigHVSynchroOut+0x98>)
  4009ea:	2101      	movs	r1, #1
  4009ec:	4a17      	ldr	r2, [pc, #92]	; (400a4c <ConfigHVSynchroOut+0xa0>)
  4009ee:	f001 ff93 	bl	402918 <TC_Configure>
	TC_WriteRa(TC, CHANNEL_V, 2);
  4009f2:	4814      	ldr	r0, [pc, #80]	; (400a44 <ConfigHVSynchroOut+0x98>)
  4009f4:	2101      	movs	r1, #1
  4009f6:	2202      	movs	r2, #2
  4009f8:	f001 ffc0 	bl	40297c <TC_WriteRa>
	TC_WriteRb(TC, CHANNEL_V, 52);
  4009fc:	4811      	ldr	r0, [pc, #68]	; (400a44 <ConfigHVSynchroOut+0x98>)
  4009fe:	2101      	movs	r1, #1
  400a00:	2234      	movs	r2, #52	; 0x34
  400a02:	f001 ffd9 	bl	4029b8 <TC_WriteRb>
	TC_WriteRc(TC, CHANNEL_V, 449);
  400a06:	480f      	ldr	r0, [pc, #60]	; (400a44 <ConfigHVSynchroOut+0x98>)
  400a08:	2101      	movs	r1, #1
  400a0a:	f240 12c1 	movw	r2, #449	; 0x1c1
  400a0e:	f001 fff1 	bl	4029f4 <TC_WriteRc>
	TC_SetBlockMode(TC, TC_BMR_TC1XC1S_TIOA0);
  400a12:	480c      	ldr	r0, [pc, #48]	; (400a44 <ConfigHVSynchroOut+0x98>)
  400a14:	2108      	movs	r1, #8
  400a16:	f001 ffa7 	bl	402968 <TC_SetBlockMode>

	TC_EnableInterrupt(TC, CHANNEL_H, TC_IER_CPBS);            	/* Enable interrupt. 	*/
  400a1a:	480a      	ldr	r0, [pc, #40]	; (400a44 <ConfigHVSynchroOut+0x98>)
  400a1c:	2100      	movs	r1, #0
  400a1e:	2208      	movs	r2, #8
  400a20:	f002 f806 	bl	402a30 <TC_EnableInterrupt>
	TC_EnableInterrupt(TC, CHANNEL_V, TC_IER_CPBS);            	/* Enable interrupt. 	*/
  400a24:	4807      	ldr	r0, [pc, #28]	; (400a44 <ConfigHVSynchroOut+0x98>)
  400a26:	2101      	movs	r1, #1
  400a28:	2208      	movs	r2, #8
  400a2a:	f002 f801 	bl	402a30 <TC_EnableInterrupt>

	TC_Start(TC,CHANNEL_H);         							/* Start the TC_H		*/
  400a2e:	4805      	ldr	r0, [pc, #20]	; (400a44 <ConfigHVSynchroOut+0x98>)
  400a30:	2100      	movs	r1, #0
  400a32:	f002 f879 	bl	402b28 <TC_Start>
	TC_Start(TC,CHANNEL_V);         							/* Start the TC_V		*/
  400a36:	4803      	ldr	r0, [pc, #12]	; (400a44 <ConfigHVSynchroOut+0x98>)
  400a38:	2101      	movs	r1, #1
  400a3a:	f002 f875 	bl	402b28 <TC_Start>

	ConfigTCInterrupt();
  400a3e:	f7ff ff99 	bl	400974 <ConfigTCInterrupt>
}
  400a42:	bd08      	pop	{r3, pc}
  400a44:	40010000 	.word	0x40010000
  400a48:	0606c400 	.word	0x0606c400
  400a4c:	0606c406 	.word	0x0606c406

00400a50 <HSMCI_Init>:
  * @brief  
  * @param  None
  * @retval None
  */
void HSMCI_Init( void )
{
  400a50:	b508      	push	{r3, lr}
	/*!!! HSMCI send first Hi half-byte*/
	
	PIO_Configure(pins_HSMCI, PIO_LISTSIZE(pins_HSMCI));
  400a52:	4828      	ldr	r0, [pc, #160]	; (400af4 <HSMCI_Init+0xa4>)
  400a54:	2104      	movs	r1, #4
  400a56:	f001 fe21 	bl	40269c <PIO_Configure>
	MCI_Init(&gs_hsmsi, HSMCI, ID_HSMCI, SystemCoreClock);
  400a5a:	4b27      	ldr	r3, [pc, #156]	; (400af8 <HSMCI_Init+0xa8>)
  400a5c:	681b      	ldr	r3, [r3, #0]
  400a5e:	4827      	ldr	r0, [pc, #156]	; (400afc <HSMCI_Init+0xac>)
  400a60:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400a64:	2212      	movs	r2, #18
  400a66:	f002 fa47 	bl	402ef8 <MCI_Init>
	MCI_SetBusWidth(&gs_hsmsi, HSMCI_SDCR_SDCBUS_4);
  400a6a:	4824      	ldr	r0, [pc, #144]	; (400afc <HSMCI_Init+0xac>)
  400a6c:	2180      	movs	r1, #128	; 0x80
  400a6e:	f002 fbdd 	bl	40322c <MCI_SetBusWidth>

	/* set clock speed for pixel in Hz*/
	MCI_SetSpeed(&gs_hsmsi, 30000000, SystemCoreClock);
  400a72:	4b21      	ldr	r3, [pc, #132]	; (400af8 <HSMCI_Init+0xa8>)
  400a74:	681b      	ldr	r3, [r3, #0]
  400a76:	4821      	ldr	r0, [pc, #132]	; (400afc <HSMCI_Init+0xac>)
  400a78:	4921      	ldr	r1, [pc, #132]	; (400b00 <HSMCI_Init+0xb0>)
  400a7a:	461a      	mov	r2, r3
  400a7c:	f002 faf8 	bl	403070 <MCI_SetSpeed>

	MCI_EnableHsMode(&gs_hsmsi, 1);
  400a80:	481e      	ldr	r0, [pc, #120]	; (400afc <HSMCI_Init+0xac>)
  400a82:	2101      	movs	r1, #1
  400a84:	f002 fb6c 	bl	403160 <MCI_EnableHsMode>
	PMC_EnablePeripheral(ID_HSMCI);
  400a88:	2012      	movs	r0, #18
  400a8a:	f002 f907 	bl	402c9c <PMC_EnablePeripheral>
	
	HSMCI->HSMCI_IER = HSMCI_IER_TXBUFE;
  400a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400a92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a96:	645a      	str	r2, [r3, #68]	; 0x44
	
	MCI_Enable(HSMCI);
  400a98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400a9c:	f002 fa1c 	bl	402ed8 <MCI_Enable>
	
	HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  400aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400aa8:	6852      	ldr	r2, [r2, #4]
  400aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  400aae:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_TPR = (uint32_t)ga_Write_Block;
  400ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400ab4:	4a13      	ldr	r2, [pc, #76]	; (400b04 <HSMCI_Init+0xb4>)
  400ab6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	HSMCI->HSMCI_TCR = HID_VSIZE/4;
  400aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400abe:	2250      	movs	r2, #80	; 0x50
  400ac0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	HSMCI->HSMCI_ARGR = 0;
  400ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400ac8:	2200      	movs	r2, #0
  400aca:	611a      	str	r2, [r3, #16]
	HSMCI->HSMCI_CMDR = 0x00110000;	
  400acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400ad0:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
  400ad4:	615a      	str	r2, [r3, #20]
	
	
	NVIC_DisableIRQ(HSMCI_IRQn); 
  400ad6:	2012      	movs	r0, #18
  400ad8:	f7ff fe8c 	bl	4007f4 <NVIC_DisableIRQ>
	NVIC_ClearPendingIRQ(HSMCI_IRQn);
  400adc:	2012      	movs	r0, #18
  400ade:	f7ff fe9f 	bl	400820 <NVIC_ClearPendingIRQ>
	NVIC_SetPriority(HSMCI_IRQn,0);
  400ae2:	2012      	movs	r0, #18
  400ae4:	2100      	movs	r1, #0
  400ae6:	f7ff feb1 	bl	40084c <NVIC_SetPriority>
	NVIC_EnableIRQ(HSMCI_IRQn);
  400aea:	2012      	movs	r0, #18
  400aec:	f7ff fe6c 	bl	4007c8 <NVIC_EnableIRQ>
}
  400af0:	bd08      	pop	{r3, pc}
  400af2:	bf00      	nop
  400af4:	20000024 	.word	0x20000024
  400af8:	2000008c 	.word	0x2000008c
  400afc:	20000968 	.word	0x20000968
  400b00:	01c9c380 	.word	0x01c9c380
  400b04:	20000974 	.word	0x20000974

00400b08 <ColorColumnGradation4bit>:
  * @brief  
  * @param  None
  * @retval None
  */
void ColorColumnGradation4bit( void )
{
  400b08:	b084      	sub	sp, #16
unsigned int  i,j,k = 0;
  400b0a:	2300      	movs	r3, #0
  400b0c:	9301      	str	r3, [sp, #4]
unsigned char m, mx;


	for( j = 0; j < VID_VSIZE; j++ )
  400b0e:	2300      	movs	r3, #0
  400b10:	9302      	str	r3, [sp, #8]
  400b12:	e03a      	b.n	400b8a <ColorColumnGradation4bit+0x82>
	{
		m = 0, mx = 0;
  400b14:	2300      	movs	r3, #0
  400b16:	f88d 3003 	strb.w	r3, [sp, #3]
  400b1a:	2300      	movs	r3, #0
  400b1c:	f88d 3002 	strb.w	r3, [sp, #2]
		for( k = 0; k < HID_VSIZE; k += 20 )
  400b20:	2300      	movs	r3, #0
  400b22:	9301      	str	r3, [sp, #4]
  400b24:	e02a      	b.n	400b7c <ColorColumnGradation4bit+0x74>
		{
			for( i = 0; i < 20; i++ )
  400b26:	2300      	movs	r3, #0
  400b28:	9303      	str	r3, [sp, #12]
  400b2a:	e010      	b.n	400b4e <ColorColumnGradation4bit+0x46>
			{
				ga_Write_Block[j][i+k] = mx;
  400b2c:	9a03      	ldr	r2, [sp, #12]
  400b2e:	9b01      	ldr	r3, [sp, #4]
  400b30:	18d0      	adds	r0, r2, r3
  400b32:	4919      	ldr	r1, [pc, #100]	; (400b98 <ColorColumnGradation4bit+0x90>)
  400b34:	9a02      	ldr	r2, [sp, #8]
  400b36:	4613      	mov	r3, r2
  400b38:	009b      	lsls	r3, r3, #2
  400b3a:	4413      	add	r3, r2
  400b3c:	019b      	lsls	r3, r3, #6
  400b3e:	4403      	add	r3, r0
  400b40:	440b      	add	r3, r1
  400b42:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400b46:	701a      	strb	r2, [r3, #0]
	for( j = 0; j < VID_VSIZE; j++ )
	{
		m = 0, mx = 0;
		for( k = 0; k < HID_VSIZE; k += 20 )
		{
			for( i = 0; i < 20; i++ )
  400b48:	9b03      	ldr	r3, [sp, #12]
  400b4a:	3301      	adds	r3, #1
  400b4c:	9303      	str	r3, [sp, #12]
  400b4e:	9b03      	ldr	r3, [sp, #12]
  400b50:	2b13      	cmp	r3, #19
  400b52:	d9eb      	bls.n	400b2c <ColorColumnGradation4bit+0x24>
			{
				ga_Write_Block[j][i+k] = mx;
			}
			m ++;
  400b54:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400b58:	3301      	adds	r3, #1
  400b5a:	f88d 3003 	strb.w	r3, [sp, #3]
			mx = m << 4;
  400b5e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400b62:	011b      	lsls	r3, r3, #4
  400b64:	f88d 3002 	strb.w	r3, [sp, #2]
			mx |= m;
  400b68:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400b6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400b70:	4313      	orrs	r3, r2
  400b72:	f88d 3002 	strb.w	r3, [sp, #2]


	for( j = 0; j < VID_VSIZE; j++ )
	{
		m = 0, mx = 0;
		for( k = 0; k < HID_VSIZE; k += 20 )
  400b76:	9b01      	ldr	r3, [sp, #4]
  400b78:	3314      	adds	r3, #20
  400b7a:	9301      	str	r3, [sp, #4]
  400b7c:	9b01      	ldr	r3, [sp, #4]
  400b7e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  400b82:	d3d0      	bcc.n	400b26 <ColorColumnGradation4bit+0x1e>
{
unsigned int  i,j,k = 0;
unsigned char m, mx;


	for( j = 0; j < VID_VSIZE; j++ )
  400b84:	9b02      	ldr	r3, [sp, #8]
  400b86:	3301      	adds	r3, #1
  400b88:	9302      	str	r3, [sp, #8]
  400b8a:	9b02      	ldr	r3, [sp, #8]
  400b8c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  400b90:	d3c0      	bcc.n	400b14 <ColorColumnGradation4bit+0xc>
			m ++;
			mx = m << 4;
			mx |= m;
		}
	}
}
  400b92:	b004      	add	sp, #16
  400b94:	4770      	bx	lr
  400b96:	bf00      	nop
  400b98:	20000974 	.word	0x20000974

00400b9c <Frame4bit>:
  * @brief
  * @param  None
  * @retval None
  */
void Frame4bit( unsigned char color )
{
  400b9c:	b084      	sub	sp, #16
  400b9e:	4603      	mov	r3, r0
  400ba0:	f88d 3007 	strb.w	r3, [sp, #7]
unsigned int  i;
unsigned char  tmp_color;


	color			&= 0x0F;
  400ba4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400ba8:	f003 030f 	and.w	r3, r3, #15
  400bac:	f88d 3007 	strb.w	r3, [sp, #7]
	tmp_color = color << 4;
  400bb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400bb4:	011b      	lsls	r3, r3, #4
  400bb6:	f88d 300b 	strb.w	r3, [sp, #11]
	tmp_color |= color;
  400bba:	f89d 200b 	ldrb.w	r2, [sp, #11]
  400bbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400bc2:	4313      	orrs	r3, r2
  400bc4:	f88d 300b 	strb.w	r3, [sp, #11]

	for( i = 0; i < 640; i++ )
  400bc8:	2300      	movs	r3, #0
  400bca:	9303      	str	r3, [sp, #12]
  400bcc:	e008      	b.n	400be0 <Frame4bit+0x44>
	{
		ga_Write_Block[0][i] = tmp_color;
  400bce:	4a26      	ldr	r2, [pc, #152]	; (400c68 <Frame4bit+0xcc>)
  400bd0:	9b03      	ldr	r3, [sp, #12]
  400bd2:	4413      	add	r3, r2
  400bd4:	f89d 200b 	ldrb.w	r2, [sp, #11]
  400bd8:	701a      	strb	r2, [r3, #0]

	color			&= 0x0F;
	tmp_color = color << 4;
	tmp_color |= color;

	for( i = 0; i < 640; i++ )
  400bda:	9b03      	ldr	r3, [sp, #12]
  400bdc:	3301      	adds	r3, #1
  400bde:	9303      	str	r3, [sp, #12]
  400be0:	9b03      	ldr	r3, [sp, #12]
  400be2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  400be6:	d3f2      	bcc.n	400bce <Frame4bit+0x32>
	{
		ga_Write_Block[0][i] = tmp_color;
	}

	for( i = 0; i < 640; i++ )
  400be8:	2300      	movs	r3, #0
  400bea:	9303      	str	r3, [sp, #12]
  400bec:	e00b      	b.n	400c06 <Frame4bit+0x6a>
	{
		ga_Write_Block[349][i] = tmp_color;
  400bee:	4a1e      	ldr	r2, [pc, #120]	; (400c68 <Frame4bit+0xcc>)
  400bf0:	9b03      	ldr	r3, [sp, #12]
  400bf2:	4413      	add	r3, r2
  400bf4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
  400bf8:	3340      	adds	r3, #64	; 0x40
  400bfa:	f89d 200b 	ldrb.w	r2, [sp, #11]
  400bfe:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 640; i++ )
	{
		ga_Write_Block[0][i] = tmp_color;
	}

	for( i = 0; i < 640; i++ )
  400c00:	9b03      	ldr	r3, [sp, #12]
  400c02:	3301      	adds	r3, #1
  400c04:	9303      	str	r3, [sp, #12]
  400c06:	9b03      	ldr	r3, [sp, #12]
  400c08:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  400c0c:	d3ef      	bcc.n	400bee <Frame4bit+0x52>
	{
		ga_Write_Block[349][i] = tmp_color;
	}

	for( i = 1; i < 350; i++ )
  400c0e:	2301      	movs	r3, #1
  400c10:	9303      	str	r3, [sp, #12]
  400c12:	e00c      	b.n	400c2e <Frame4bit+0x92>
	{
		ga_Write_Block[i][0] = tmp_color;
  400c14:	4914      	ldr	r1, [pc, #80]	; (400c68 <Frame4bit+0xcc>)
  400c16:	9a03      	ldr	r2, [sp, #12]
  400c18:	4613      	mov	r3, r2
  400c1a:	009b      	lsls	r3, r3, #2
  400c1c:	4413      	add	r3, r2
  400c1e:	019b      	lsls	r3, r3, #6
  400c20:	440b      	add	r3, r1
  400c22:	f89d 200b 	ldrb.w	r2, [sp, #11]
  400c26:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 640; i++ )
	{
		ga_Write_Block[349][i] = tmp_color;
	}

	for( i = 1; i < 350; i++ )
  400c28:	9b03      	ldr	r3, [sp, #12]
  400c2a:	3301      	adds	r3, #1
  400c2c:	9303      	str	r3, [sp, #12]
  400c2e:	9b03      	ldr	r3, [sp, #12]
  400c30:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  400c34:	d3ee      	bcc.n	400c14 <Frame4bit+0x78>
	{
		ga_Write_Block[i][0] = tmp_color;
	}

	for( i = 0; i < 350; i++ )
  400c36:	2300      	movs	r3, #0
  400c38:	9303      	str	r3, [sp, #12]
  400c3a:	e00e      	b.n	400c5a <Frame4bit+0xbe>
	{
		ga_Write_Block[i][639] = tmp_color;
  400c3c:	490a      	ldr	r1, [pc, #40]	; (400c68 <Frame4bit+0xcc>)
  400c3e:	9a03      	ldr	r2, [sp, #12]
  400c40:	4613      	mov	r3, r2
  400c42:	009b      	lsls	r3, r3, #2
  400c44:	4413      	add	r3, r2
  400c46:	019b      	lsls	r3, r3, #6
  400c48:	440b      	add	r3, r1
  400c4a:	f203 237f 	addw	r3, r3, #639	; 0x27f
  400c4e:	f89d 200b 	ldrb.w	r2, [sp, #11]
  400c52:	701a      	strb	r2, [r3, #0]
	for( i = 1; i < 350; i++ )
	{
		ga_Write_Block[i][0] = tmp_color;
	}

	for( i = 0; i < 350; i++ )
  400c54:	9b03      	ldr	r3, [sp, #12]
  400c56:	3301      	adds	r3, #1
  400c58:	9303      	str	r3, [sp, #12]
  400c5a:	9b03      	ldr	r3, [sp, #12]
  400c5c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  400c60:	d3ec      	bcc.n	400c3c <Frame4bit+0xa0>
	{
		ga_Write_Block[i][639] = tmp_color;
	}
}
  400c62:	b004      	add	sp, #16
  400c64:	4770      	bx	lr
  400c66:	bf00      	nop
  400c68:	20000974 	.word	0x20000974

00400c6c <StartVGAOut>:
  * @brief  
  * @param  None
  * @retval None
  */
void StartVGAOut( void )
{
  400c6c:	b508      	push	{r3, lr}
	}
	ga_Write_Block[0][3] = 0x30;
#endif	

//	ColorColumnGradation4bit();
	Frame4bit(9);
  400c6e:	2009      	movs	r0, #9
  400c70:	f7ff ff94 	bl	400b9c <Frame4bit>

	HSMCI_Init();
  400c74:	f7ff feec 	bl	400a50 <HSMCI_Init>
	ConfigHVSynchroOut();
  400c78:	f7ff fe98 	bl	4009ac <ConfigHVSynchroOut>
}
  400c7c:	bd08      	pop	{r3, pc}
  400c7e:	bf00      	nop

00400c80 <PIOA_IRQHandler>:

/**
 * \brief Interrupt handler for PIOA Controller.
 */
void PIOA_IRQHandler( void )
{
  400c80:	b082      	sub	sp, #8
volatile uint32_t dummy;

	dummy = PIOA->PIO_ISR;
  400c82:	4b02      	ldr	r3, [pc, #8]	; (400c8c <PIOA_IRQHandler+0xc>)
  400c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  400c86:	9301      	str	r3, [sp, #4]
}
  400c88:	b002      	add	sp, #8
  400c8a:	4770      	bx	lr
  400c8c:	400e0e00 	.word	0x400e0e00

00400c90 <SPI_IRQHandler>:

/**
 * \brief Interrupt handler for SPI.
 */
void SPI_IRQHandler( void )
{
  400c90:	b082      	sub	sp, #8
volatile uint32_t dummy;

	dummy = SPI->SPI_SR;
  400c92:	4b02      	ldr	r3, [pc, #8]	; (400c9c <SPI_IRQHandler+0xc>)
  400c94:	691b      	ldr	r3, [r3, #16]
  400c96:	9301      	str	r3, [sp, #4]
}
  400c98:	b002      	add	sp, #8
  400c9a:	4770      	bx	lr
  400c9c:	40008000 	.word	0x40008000

00400ca0 <mSpiPinsInit>:
  * @brief
  * @param  None
  * @retval None
  */
static void mSpiPinsInit( void )
{
  400ca0:	b508      	push	{r3, lr}


	/* pin PA11 - mSS, pin PA12 - MISO, pin PA12 - MOSI, pin PA12 - SPCK,  */
	PIO_Configure(pins_MSPI, PIO_LISTSIZE(pins_MSPI));
  400ca2:	4802      	ldr	r0, [pc, #8]	; (400cac <mSpiPinsInit+0xc>)
  400ca4:	2104      	movs	r1, #4
  400ca6:	f001 fcf9 	bl	40269c <PIO_Configure>
}
  400caa:	bd08      	pop	{r3, pc}
  400cac:	20000054 	.word	0x20000054

00400cb0 <mSpiSart>:
  * @brief
  * @param  None
  * @retval None
  */
void mSpiSart( void )
{
  400cb0:	b508      	push	{r3, lr}


	mSpiPinsInit();
  400cb2:	f7ff fff5 	bl	400ca0 <mSpiPinsInit>
	SPI_Configure( MSPI, ID_SPI, SPI_MR_PCS(0) | SPI_MR_DLYBCS(6));
  400cb6:	480e      	ldr	r0, [pc, #56]	; (400cf0 <mSpiSart+0x40>)
  400cb8:	2115      	movs	r1, #21
  400cba:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
  400cbe:	f002 fb2f 	bl	403320 <SPI_Configure>
	SPI_ConfigureNPCS( MSPI,MSPI_CS_NUM, SPI_CSR_CPOL | SPI_CSR_BITS_8_BIT | SPI_CSR_SCBR(20) );
  400cc2:	480b      	ldr	r0, [pc, #44]	; (400cf0 <mSpiSart+0x40>)
  400cc4:	2100      	movs	r1, #0
  400cc6:	f241 4201 	movw	r2, #5121	; 0x1401
  400cca:	f002 fb41 	bl	403350 <SPI_ConfigureNPCS>
	SPI_Read( MSPI );
  400cce:	4808      	ldr	r0, [pc, #32]	; (400cf0 <mSpiSart+0x40>)
  400cd0:	f002 fb52 	bl	403378 <SPI_Read>
	SPI_Write( MSPI, MSPI_CS_NUM, EPTY_TX_SPI_BUFF );
  400cd4:	4806      	ldr	r0, [pc, #24]	; (400cf0 <mSpiSart+0x40>)
  400cd6:	2100      	movs	r1, #0
  400cd8:	2200      	movs	r2, #0
  400cda:	f002 fb5d 	bl	403398 <SPI_Write>
	SPI_EnableIt( MSPI, SPI_IER_RDRF );
  400cde:	4804      	ldr	r0, [pc, #16]	; (400cf0 <mSpiSart+0x40>)
  400ce0:	2101      	movs	r1, #1
  400ce2:	f002 fb0d 	bl	403300 <SPI_EnableIt>
	SPI_Enable( MSPI );
  400ce6:	4802      	ldr	r0, [pc, #8]	; (400cf0 <mSpiSart+0x40>)
  400ce8:	f002 fafa 	bl	4032e0 <SPI_Enable>
}
  400cec:	bd08      	pop	{r3, pc}
  400cee:	bf00      	nop
  400cf0:	40008000 	.word	0x40008000

00400cf4 <sDrawAPixel>:
  * @brief
  * @param  None
  * @retval None
  */
static uint8_t sDrawAPixel( draw_t *p_drawpoint )
{
  400cf4:	b086      	sub	sp, #24
  400cf6:	9001      	str	r0, [sp, #4]
uint8_t result = 1, count, tmp_colour, colour;
  400cf8:	2301      	movs	r3, #1
  400cfa:	f88d 3017 	strb.w	r3, [sp, #23]
uint16_t x_coordinate, y_coordinate;
function_t	function;


	x_coordinate = (uint16_t)p_drawpoint->x1;
  400cfe:	9b01      	ldr	r3, [sp, #4]
  400d00:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  400d04:	b29b      	uxth	r3, r3
  400d06:	f8ad 3012 	strh.w	r3, [sp, #18]
	y_coordinate = (uint16_t)p_drawpoint->y1;
  400d0a:	9b01      	ldr	r3, [sp, #4]
  400d0c:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  400d10:	b29b      	uxth	r3, r3
  400d12:	f8ad 3010 	strh.w	r3, [sp, #16]

	if( (x_coordinate < windowframe.x1) || (x_coordinate > windowframe.x2))
  400d16:	4b90      	ldr	r3, [pc, #576]	; (400f58 <sDrawAPixel+0x264>)
  400d18:	881b      	ldrh	r3, [r3, #0]
  400d1a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  400d1e:	429a      	cmp	r2, r3
  400d20:	d305      	bcc.n	400d2e <sDrawAPixel+0x3a>
  400d22:	4b8d      	ldr	r3, [pc, #564]	; (400f58 <sDrawAPixel+0x264>)
  400d24:	889b      	ldrh	r3, [r3, #4]
  400d26:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  400d2a:	429a      	cmp	r2, r3
  400d2c:	d905      	bls.n	400d3a <sDrawAPixel+0x46>
	{
		result = 0;
  400d2e:	2300      	movs	r3, #0
  400d30:	f88d 3017 	strb.w	r3, [sp, #23]
		return(result);
  400d34:	f89d 3017 	ldrb.w	r3, [sp, #23]
  400d38:	e10b      	b.n	400f52 <sDrawAPixel+0x25e>
	}
	if( (y_coordinate < windowframe.y1) || (y_coordinate > windowframe.y2))
  400d3a:	4b87      	ldr	r3, [pc, #540]	; (400f58 <sDrawAPixel+0x264>)
  400d3c:	885b      	ldrh	r3, [r3, #2]
  400d3e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  400d42:	429a      	cmp	r2, r3
  400d44:	d305      	bcc.n	400d52 <sDrawAPixel+0x5e>
  400d46:	4b84      	ldr	r3, [pc, #528]	; (400f58 <sDrawAPixel+0x264>)
  400d48:	88db      	ldrh	r3, [r3, #6]
  400d4a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  400d4e:	429a      	cmp	r2, r3
  400d50:	d905      	bls.n	400d5e <sDrawAPixel+0x6a>
	{
		result = 0;
  400d52:	2300      	movs	r3, #0
  400d54:	f88d 3017 	strb.w	r3, [sp, #23]
		return(result);
  400d58:	f89d 3017 	ldrb.w	r3, [sp, #23]
  400d5c:	e0f9      	b.n	400f52 <sDrawAPixel+0x25e>
	}

	function 	= 	p_drawpoint->function;
  400d5e:	9b01      	ldr	r3, [sp, #4]
  400d60:	789b      	ldrb	r3, [r3, #2]
  400d62:	f88d 300f 	strb.w	r3, [sp, #15]
	colour  	= 	p_drawpoint->colour;
  400d66:	9b01      	ldr	r3, [sp, #4]
  400d68:	785b      	ldrb	r3, [r3, #1]
  400d6a:	f88d 300e 	strb.w	r3, [sp, #14]
	colour 		&= 	0x0F;
  400d6e:	f89d 300e 	ldrb.w	r3, [sp, #14]
  400d72:	f003 030f 	and.w	r3, r3, #15
  400d76:	f88d 300e 	strb.w	r3, [sp, #14]
	tmp_colour = ga_Write_Block[y_coordinate][x_coordinate/2];
  400d7a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  400d7e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400d82:	085b      	lsrs	r3, r3, #1
  400d84:	b29b      	uxth	r3, r3
  400d86:	4618      	mov	r0, r3
  400d88:	4974      	ldr	r1, [pc, #464]	; (400f5c <sDrawAPixel+0x268>)
  400d8a:	4613      	mov	r3, r2
  400d8c:	009b      	lsls	r3, r3, #2
  400d8e:	4413      	add	r3, r2
  400d90:	019b      	lsls	r3, r3, #6
  400d92:	4403      	add	r3, r0
  400d94:	440b      	add	r3, r1
  400d96:	781b      	ldrb	r3, [r3, #0]
  400d98:	f88d 3015 	strb.w	r3, [sp, #21]
	if( x_coordinate & 1 )
  400d9c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400da0:	f003 0301 	and.w	r3, r3, #1
  400da4:	2b00      	cmp	r3, #0
  400da6:	d049      	beq.n	400e3c <sDrawAPixel+0x148>
	{
		if( function == F_OVERWRITE )
  400da8:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400dac:	2b00      	cmp	r3, #0
  400dae:	d10d      	bne.n	400dcc <sDrawAPixel+0xd8>
		{
			tmp_colour &= 0xF0;
  400db0:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400db4:	f023 030f 	bic.w	r3, r3, #15
  400db8:	f88d 3015 	strb.w	r3, [sp, #21]
			tmp_colour |= colour;
  400dbc:	f89d 2015 	ldrb.w	r2, [sp, #21]
  400dc0:	f89d 300e 	ldrb.w	r3, [sp, #14]
  400dc4:	4313      	orrs	r3, r2
  400dc6:	f88d 3015 	strb.w	r3, [sp, #21]
  400dca:	e08a      	b.n	400ee2 <sDrawAPixel+0x1ee>
		}
		else if( function == F_OR )
  400dcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400dd0:	2b01      	cmp	r3, #1
  400dd2:	d107      	bne.n	400de4 <sDrawAPixel+0xf0>
		{
			tmp_colour |= colour;
  400dd4:	f89d 2015 	ldrb.w	r2, [sp, #21]
  400dd8:	f89d 300e 	ldrb.w	r3, [sp, #14]
  400ddc:	4313      	orrs	r3, r2
  400dde:	f88d 3015 	strb.w	r3, [sp, #21]
  400de2:	e07e      	b.n	400ee2 <sDrawAPixel+0x1ee>
		}
		else if( function == F_XOR )
  400de4:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400de8:	2b02      	cmp	r3, #2
  400dea:	d110      	bne.n	400e0e <sDrawAPixel+0x11a>
		{
			tmp_colour |= (colour & (tmp_colour & 0x0F));
  400dec:	f89d 2015 	ldrb.w	r2, [sp, #21]
  400df0:	f89d 300e 	ldrb.w	r3, [sp, #14]
  400df4:	4013      	ands	r3, r2
  400df6:	b2db      	uxtb	r3, r3
  400df8:	b2db      	uxtb	r3, r3
  400dfa:	f003 030f 	and.w	r3, r3, #15
  400dfe:	b2da      	uxtb	r2, r3
  400e00:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400e04:	4313      	orrs	r3, r2
  400e06:	b2db      	uxtb	r3, r3
  400e08:	f88d 3015 	strb.w	r3, [sp, #21]
  400e0c:	e069      	b.n	400ee2 <sDrawAPixel+0x1ee>
		}
		else if( function == F_AND )
  400e0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400e12:	2b03      	cmp	r3, #3
  400e14:	d10f      	bne.n	400e36 <sDrawAPixel+0x142>
		{
			tmp_colour |= (colour ^ (tmp_colour & 0x0F));
  400e16:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400e1a:	f003 030f 	and.w	r3, r3, #15
  400e1e:	b2da      	uxtb	r2, r3
  400e20:	f89d 300e 	ldrb.w	r3, [sp, #14]
  400e24:	4053      	eors	r3, r2
  400e26:	b2da      	uxtb	r2, r3
  400e28:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400e2c:	4313      	orrs	r3, r2
  400e2e:	b2db      	uxtb	r3, r3
  400e30:	f88d 3015 	strb.w	r3, [sp, #21]
  400e34:	e055      	b.n	400ee2 <sDrawAPixel+0x1ee>
		}
		else
		{
			return(result);
  400e36:	f89d 3017 	ldrb.w	r3, [sp, #23]
  400e3a:	e08a      	b.n	400f52 <sDrawAPixel+0x25e>
		}
	}
	else
	{
		if( function == F_OVERWRITE )
  400e3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400e40:	2b00      	cmp	r3, #0
  400e42:	d110      	bne.n	400e66 <sDrawAPixel+0x172>
		{
			tmp_colour &= 0x0F;
  400e44:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400e48:	f003 030f 	and.w	r3, r3, #15
  400e4c:	f88d 3015 	strb.w	r3, [sp, #21]
			tmp_colour |= (colour << 4);
  400e50:	f89d 300e 	ldrb.w	r3, [sp, #14]
  400e54:	011b      	lsls	r3, r3, #4
  400e56:	b2da      	uxtb	r2, r3
  400e58:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400e5c:	4313      	orrs	r3, r2
  400e5e:	b2db      	uxtb	r3, r3
  400e60:	f88d 3015 	strb.w	r3, [sp, #21]
  400e64:	e03d      	b.n	400ee2 <sDrawAPixel+0x1ee>
		}
		else if( function == F_OR )
  400e66:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400e6a:	2b01      	cmp	r3, #1
  400e6c:	d10a      	bne.n	400e84 <sDrawAPixel+0x190>
		{
			tmp_colour |= (colour << 4);
  400e6e:	f89d 300e 	ldrb.w	r3, [sp, #14]
  400e72:	011b      	lsls	r3, r3, #4
  400e74:	b2da      	uxtb	r2, r3
  400e76:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400e7a:	4313      	orrs	r3, r2
  400e7c:	b2db      	uxtb	r3, r3
  400e7e:	f88d 3015 	strb.w	r3, [sp, #21]
  400e82:	e02e      	b.n	400ee2 <sDrawAPixel+0x1ee>
		}
		else if( function == F_XOR )
  400e84:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400e88:	2b02      	cmp	r3, #2
  400e8a:	d111      	bne.n	400eb0 <sDrawAPixel+0x1bc>
		{
			tmp_colour |= ((colour << 4) & (tmp_colour & 0xF0));
  400e8c:	f89d 300e 	ldrb.w	r3, [sp, #14]
  400e90:	011b      	lsls	r3, r3, #4
  400e92:	b2da      	uxtb	r2, r3
  400e94:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400e98:	f023 030f 	bic.w	r3, r3, #15
  400e9c:	b2db      	uxtb	r3, r3
  400e9e:	4013      	ands	r3, r2
  400ea0:	b2da      	uxtb	r2, r3
  400ea2:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400ea6:	4313      	orrs	r3, r2
  400ea8:	b2db      	uxtb	r3, r3
  400eaa:	f88d 3015 	strb.w	r3, [sp, #21]
  400eae:	e018      	b.n	400ee2 <sDrawAPixel+0x1ee>
		}
		else if( function == F_AND )
  400eb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400eb4:	2b03      	cmp	r3, #3
  400eb6:	d111      	bne.n	400edc <sDrawAPixel+0x1e8>
		{
			tmp_colour |= ((colour << 4) ^ (tmp_colour & 0xF0));
  400eb8:	f89d 300e 	ldrb.w	r3, [sp, #14]
  400ebc:	011b      	lsls	r3, r3, #4
  400ebe:	b2da      	uxtb	r2, r3
  400ec0:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400ec4:	f023 030f 	bic.w	r3, r3, #15
  400ec8:	b2db      	uxtb	r3, r3
  400eca:	4053      	eors	r3, r2
  400ecc:	b2da      	uxtb	r2, r3
  400ece:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400ed2:	4313      	orrs	r3, r2
  400ed4:	b2db      	uxtb	r3, r3
  400ed6:	f88d 3015 	strb.w	r3, [sp, #21]
  400eda:	e002      	b.n	400ee2 <sDrawAPixel+0x1ee>
		}
		else
		{
			return(result);
  400edc:	f89d 3017 	ldrb.w	r3, [sp, #23]
  400ee0:	e037      	b.n	400f52 <sDrawAPixel+0x25e>
		}

	}

	for( count = 0; count < 3; count++ )
  400ee2:	2300      	movs	r3, #0
  400ee4:	f88d 3016 	strb.w	r3, [sp, #22]
  400ee8:	e02d      	b.n	400f46 <sDrawAPixel+0x252>
	{
		ga_Write_Block[y_coordinate][x_coordinate/2] = tmp_colour;
  400eea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  400eee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400ef2:	085b      	lsrs	r3, r3, #1
  400ef4:	b29b      	uxth	r3, r3
  400ef6:	4618      	mov	r0, r3
  400ef8:	4918      	ldr	r1, [pc, #96]	; (400f5c <sDrawAPixel+0x268>)
  400efa:	4613      	mov	r3, r2
  400efc:	009b      	lsls	r3, r3, #2
  400efe:	4413      	add	r3, r2
  400f00:	019b      	lsls	r3, r3, #6
  400f02:	4403      	add	r3, r0
  400f04:	440b      	add	r3, r1
  400f06:	f89d 2015 	ldrb.w	r2, [sp, #21]
  400f0a:	701a      	strb	r2, [r3, #0]
		if( ga_Write_Block[y_coordinate][x_coordinate/2] == tmp_colour)
  400f0c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  400f10:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400f14:	085b      	lsrs	r3, r3, #1
  400f16:	b29b      	uxth	r3, r3
  400f18:	4618      	mov	r0, r3
  400f1a:	4910      	ldr	r1, [pc, #64]	; (400f5c <sDrawAPixel+0x268>)
  400f1c:	4613      	mov	r3, r2
  400f1e:	009b      	lsls	r3, r3, #2
  400f20:	4413      	add	r3, r2
  400f22:	019b      	lsls	r3, r3, #6
  400f24:	4403      	add	r3, r0
  400f26:	440b      	add	r3, r1
  400f28:	781b      	ldrb	r3, [r3, #0]
  400f2a:	b2db      	uxtb	r3, r3
  400f2c:	f89d 2015 	ldrb.w	r2, [sp, #21]
  400f30:	429a      	cmp	r2, r3
  400f32:	d103      	bne.n	400f3c <sDrawAPixel+0x248>
		{
			result = 0;
  400f34:	2300      	movs	r3, #0
  400f36:	f88d 3017 	strb.w	r3, [sp, #23]
			break;
  400f3a:	e008      	b.n	400f4e <sDrawAPixel+0x25a>
			return(result);
		}

	}

	for( count = 0; count < 3; count++ )
  400f3c:	f89d 3016 	ldrb.w	r3, [sp, #22]
  400f40:	3301      	adds	r3, #1
  400f42:	f88d 3016 	strb.w	r3, [sp, #22]
  400f46:	f89d 3016 	ldrb.w	r3, [sp, #22]
  400f4a:	2b02      	cmp	r3, #2
  400f4c:	d9cd      	bls.n	400eea <sDrawAPixel+0x1f6>
		{
			result = 0;
			break;
		}
	}
	return(result);
  400f4e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
  400f52:	4618      	mov	r0, r3
  400f54:	b006      	add	sp, #24
  400f56:	4770      	bx	lr
  400f58:	20000084 	.word	0x20000084
  400f5c:	20000974 	.word	0x20000974

00400f60 <sDrawAHorLineColourFast>:
  * @brief
  * @param  None
  * @retval
  */
static uint8_t sDrawAHorLineColourFast( draw_t *p_draw )
{
  400f60:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  400f64:	b085      	sub	sp, #20
  400f66:	9001      	str	r0, [sp, #4]
uint8_t result = 1;
  400f68:	2301      	movs	r3, #1
  400f6a:	f88d 300f 	strb.w	r3, [sp, #15]


int16_t  x1, dx;

	if( p_draw->x2_rx > p_draw->x1 )
  400f6e:	9b01      	ldr	r3, [sp, #4]
  400f70:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  400f74:	b29a      	uxth	r2, r3
  400f76:	9b01      	ldr	r3, [sp, #4]
  400f78:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  400f7c:	b29b      	uxth	r3, r3
  400f7e:	b212      	sxth	r2, r2
  400f80:	b21b      	sxth	r3, r3
  400f82:	429a      	cmp	r2, r3
  400f84:	dd17      	ble.n	400fb6 <sDrawAHorLineColourFast+0x56>
	{
	  dx = p_draw->x2_rx - p_draw->x1;
  400f86:	9b01      	ldr	r3, [sp, #4]
  400f88:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  400f8c:	b29b      	uxth	r3, r3
  400f8e:	b29a      	uxth	r2, r3
  400f90:	9b01      	ldr	r3, [sp, #4]
  400f92:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  400f96:	b29b      	uxth	r3, r3
  400f98:	b29b      	uxth	r3, r3
  400f9a:	1ad3      	subs	r3, r2, r3
  400f9c:	b29b      	uxth	r3, r3
  400f9e:	f8ad 300a 	strh.w	r3, [sp, #10]
	  x1 = p_draw->x1;
  400fa2:	9b01      	ldr	r3, [sp, #4]
  400fa4:	79da      	ldrb	r2, [r3, #7]
  400fa6:	7a1b      	ldrb	r3, [r3, #8]
  400fa8:	021b      	lsls	r3, r3, #8
  400faa:	4313      	orrs	r3, r2
  400fac:	041b      	lsls	r3, r3, #16
  400fae:	141b      	asrs	r3, r3, #16
  400fb0:	f8ad 300c 	strh.w	r3, [sp, #12]
  400fb4:	e016      	b.n	400fe4 <sDrawAHorLineColourFast+0x84>
	}
	else
	{
	  dx = p_draw->x1 - p_draw->x2_rx;
  400fb6:	9b01      	ldr	r3, [sp, #4]
  400fb8:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  400fbc:	b29b      	uxth	r3, r3
  400fbe:	b29a      	uxth	r2, r3
  400fc0:	9b01      	ldr	r3, [sp, #4]
  400fc2:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  400fc6:	b29b      	uxth	r3, r3
  400fc8:	b29b      	uxth	r3, r3
  400fca:	1ad3      	subs	r3, r2, r3
  400fcc:	b29b      	uxth	r3, r3
  400fce:	f8ad 300a 	strh.w	r3, [sp, #10]
	  x1 = p_draw->x2_rx;
  400fd2:	9b01      	ldr	r3, [sp, #4]
  400fd4:	7ada      	ldrb	r2, [r3, #11]
  400fd6:	7b1b      	ldrb	r3, [r3, #12]
  400fd8:	021b      	lsls	r3, r3, #8
  400fda:	4313      	orrs	r3, r2
  400fdc:	041b      	lsls	r3, r3, #16
  400fde:	141b      	asrs	r3, r3, #16
  400fe0:	f8ad 300c 	strh.w	r3, [sp, #12]
	}

	if( (p_draw->y1 < windowframe.y1) || (p_draw->y1 > windowframe.y2))
  400fe4:	9b01      	ldr	r3, [sp, #4]
  400fe6:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  400fea:	b29b      	uxth	r3, r3
  400fec:	b21a      	sxth	r2, r3
  400fee:	4b6f      	ldr	r3, [pc, #444]	; (4011ac <sDrawAHorLineColourFast+0x24c>)
  400ff0:	885b      	ldrh	r3, [r3, #2]
  400ff2:	429a      	cmp	r2, r3
  400ff4:	db08      	blt.n	401008 <sDrawAHorLineColourFast+0xa8>
  400ff6:	9b01      	ldr	r3, [sp, #4]
  400ff8:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  400ffc:	b29b      	uxth	r3, r3
  400ffe:	b21a      	sxth	r2, r3
  401000:	4b6a      	ldr	r3, [pc, #424]	; (4011ac <sDrawAHorLineColourFast+0x24c>)
  401002:	88db      	ldrh	r3, [r3, #6]
  401004:	429a      	cmp	r2, r3
  401006:	dd05      	ble.n	401014 <sDrawAHorLineColourFast+0xb4>
	{
		result = 0;
  401008:	2300      	movs	r3, #0
  40100a:	f88d 300f 	strb.w	r3, [sp, #15]
		return(result);
  40100e:	f89d 300f 	ldrb.w	r3, [sp, #15]
  401012:	e0c6      	b.n	4011a2 <sDrawAHorLineColourFast+0x242>
register uint8_t count, tmp_colour, colour;
register uint16_t x_coordinate, y_coordinate;
register function_t	function;
register int16_t  i;

	x_coordinate 	= x1;
  401014:	f8bd 700c 	ldrh.w	r7, [sp, #12]
	y_coordinate 	= p_draw->y1;
  401018:	9b01      	ldr	r3, [sp, #4]
  40101a:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  40101e:	b29b      	uxth	r3, r3
  401020:	fa1f f983 	uxth.w	r9, r3
	function 		= 	p_draw->function;
  401024:	9b01      	ldr	r3, [sp, #4]
  401026:	789e      	ldrb	r6, [r3, #2]
	colour  		= 	p_draw->colour;
  401028:	9b01      	ldr	r3, [sp, #4]
  40102a:	785d      	ldrb	r5, [r3, #1]
	colour 			&= 	0x0F;
  40102c:	f005 030f 	and.w	r3, r5, #15
  401030:	b2dd      	uxtb	r5, r3

	for( i = 0; i < dx; i++ )
  401032:	f04f 0800 	mov.w	r8, #0
  401036:	e0ab      	b.n	401190 <sDrawAHorLineColourFast+0x230>
	{
		tmp_colour = ga_Write_Block[y_coordinate][x_coordinate/2];
  401038:	464a      	mov	r2, r9
  40103a:	087b      	lsrs	r3, r7, #1
  40103c:	b29b      	uxth	r3, r3
  40103e:	4618      	mov	r0, r3
  401040:	495b      	ldr	r1, [pc, #364]	; (4011b0 <sDrawAHorLineColourFast+0x250>)
  401042:	4613      	mov	r3, r2
  401044:	009b      	lsls	r3, r3, #2
  401046:	4413      	add	r3, r2
  401048:	019b      	lsls	r3, r3, #6
  40104a:	4403      	add	r3, r0
  40104c:	440b      	add	r3, r1
  40104e:	781b      	ldrb	r3, [r3, #0]
  401050:	b2dc      	uxtb	r4, r3
		if( x_coordinate & 1 )
  401052:	463b      	mov	r3, r7
  401054:	f003 0301 	and.w	r3, r3, #1
  401058:	2b00      	cmp	r3, #0
  40105a:	d02d      	beq.n	4010b8 <sDrawAHorLineColourFast+0x158>
		{
			if( function == F_OVERWRITE )
  40105c:	2e00      	cmp	r6, #0
  40105e:	d106      	bne.n	40106e <sDrawAHorLineColourFast+0x10e>
			{
				tmp_colour &= 0xF0;
  401060:	f024 030f 	bic.w	r3, r4, #15
  401064:	b2dc      	uxtb	r4, r3
				tmp_colour |= colour;
  401066:	ea44 0305 	orr.w	r3, r4, r5
  40106a:	b2dc      	uxtb	r4, r3
  40106c:	e05e      	b.n	40112c <sDrawAHorLineColourFast+0x1cc>
			}
			else if( function == F_OR )
  40106e:	2e01      	cmp	r6, #1
  401070:	d103      	bne.n	40107a <sDrawAHorLineColourFast+0x11a>
			{
				tmp_colour |= colour;
  401072:	ea44 0305 	orr.w	r3, r4, r5
  401076:	b2dc      	uxtb	r4, r3
  401078:	e058      	b.n	40112c <sDrawAHorLineColourFast+0x1cc>
			}
			else if( function == F_XOR )
  40107a:	2e02      	cmp	r6, #2
  40107c:	d10b      	bne.n	401096 <sDrawAHorLineColourFast+0x136>
			{
				tmp_colour |= (colour & (tmp_colour & 0x0F));
  40107e:	ea04 0305 	and.w	r3, r4, r5
  401082:	b2db      	uxtb	r3, r3
  401084:	b2db      	uxtb	r3, r3
  401086:	f003 030f 	and.w	r3, r3, #15
  40108a:	b2da      	uxtb	r2, r3
  40108c:	b2e3      	uxtb	r3, r4
  40108e:	4313      	orrs	r3, r2
  401090:	b2db      	uxtb	r3, r3
  401092:	b2dc      	uxtb	r4, r3
  401094:	e04a      	b.n	40112c <sDrawAHorLineColourFast+0x1cc>
			}
			else if( function == F_AND )
  401096:	2e03      	cmp	r6, #3
  401098:	d10b      	bne.n	4010b2 <sDrawAHorLineColourFast+0x152>
			{
				tmp_colour |= (colour ^ (tmp_colour & 0x0F));
  40109a:	b2e3      	uxtb	r3, r4
  40109c:	f003 030f 	and.w	r3, r3, #15
  4010a0:	b2da      	uxtb	r2, r3
  4010a2:	b2eb      	uxtb	r3, r5
  4010a4:	4053      	eors	r3, r2
  4010a6:	b2da      	uxtb	r2, r3
  4010a8:	b2e3      	uxtb	r3, r4
  4010aa:	4313      	orrs	r3, r2
  4010ac:	b2db      	uxtb	r3, r3
  4010ae:	b2dc      	uxtb	r4, r3
  4010b0:	e03c      	b.n	40112c <sDrawAHorLineColourFast+0x1cc>
			}
			else
			{
				return(result);
  4010b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
  4010b6:	e074      	b.n	4011a2 <sDrawAHorLineColourFast+0x242>
			}
		}
		else
		{
			if( function == F_OVERWRITE )
  4010b8:	2e00      	cmp	r6, #0
  4010ba:	d10a      	bne.n	4010d2 <sDrawAHorLineColourFast+0x172>
			{
				tmp_colour &= 0x0F;
  4010bc:	f004 030f 	and.w	r3, r4, #15
  4010c0:	b2dc      	uxtb	r4, r3
				tmp_colour |= (colour << 4);
  4010c2:	462b      	mov	r3, r5
  4010c4:	011b      	lsls	r3, r3, #4
  4010c6:	b2da      	uxtb	r2, r3
  4010c8:	b2e3      	uxtb	r3, r4
  4010ca:	4313      	orrs	r3, r2
  4010cc:	b2db      	uxtb	r3, r3
  4010ce:	b2dc      	uxtb	r4, r3
  4010d0:	e02c      	b.n	40112c <sDrawAHorLineColourFast+0x1cc>
			}
			else if( function == F_OR )
  4010d2:	2e01      	cmp	r6, #1
  4010d4:	d107      	bne.n	4010e6 <sDrawAHorLineColourFast+0x186>
			{
				tmp_colour |= (colour << 4);
  4010d6:	462b      	mov	r3, r5
  4010d8:	011b      	lsls	r3, r3, #4
  4010da:	b2da      	uxtb	r2, r3
  4010dc:	b2e3      	uxtb	r3, r4
  4010de:	4313      	orrs	r3, r2
  4010e0:	b2db      	uxtb	r3, r3
  4010e2:	b2dc      	uxtb	r4, r3
  4010e4:	e022      	b.n	40112c <sDrawAHorLineColourFast+0x1cc>
			}
			else if( function == F_XOR )
  4010e6:	2e02      	cmp	r6, #2
  4010e8:	d10d      	bne.n	401106 <sDrawAHorLineColourFast+0x1a6>
			{
				tmp_colour |= ((colour << 4) & (tmp_colour & 0xF0));
  4010ea:	462b      	mov	r3, r5
  4010ec:	011b      	lsls	r3, r3, #4
  4010ee:	b2da      	uxtb	r2, r3
  4010f0:	b2e3      	uxtb	r3, r4
  4010f2:	f023 030f 	bic.w	r3, r3, #15
  4010f6:	b2db      	uxtb	r3, r3
  4010f8:	4013      	ands	r3, r2
  4010fa:	b2da      	uxtb	r2, r3
  4010fc:	b2e3      	uxtb	r3, r4
  4010fe:	4313      	orrs	r3, r2
  401100:	b2db      	uxtb	r3, r3
  401102:	b2dc      	uxtb	r4, r3
  401104:	e012      	b.n	40112c <sDrawAHorLineColourFast+0x1cc>
			}
			else if( function == F_AND )
  401106:	2e03      	cmp	r6, #3
  401108:	d10d      	bne.n	401126 <sDrawAHorLineColourFast+0x1c6>
			{
				tmp_colour |= ((colour << 4) ^ (tmp_colour & 0xF0));
  40110a:	462b      	mov	r3, r5
  40110c:	011b      	lsls	r3, r3, #4
  40110e:	b2da      	uxtb	r2, r3
  401110:	b2e3      	uxtb	r3, r4
  401112:	f023 030f 	bic.w	r3, r3, #15
  401116:	b2db      	uxtb	r3, r3
  401118:	4053      	eors	r3, r2
  40111a:	b2da      	uxtb	r2, r3
  40111c:	b2e3      	uxtb	r3, r4
  40111e:	4313      	orrs	r3, r2
  401120:	b2db      	uxtb	r3, r3
  401122:	b2dc      	uxtb	r4, r3
  401124:	e002      	b.n	40112c <sDrawAHorLineColourFast+0x1cc>
			}
			else
			{
				return(result);
  401126:	f89d 300f 	ldrb.w	r3, [sp, #15]
  40112a:	e03a      	b.n	4011a2 <sDrawAHorLineColourFast+0x242>
			}

		}

		for( count = 0; count < 3; count++ )
  40112c:	f04f 0a00 	mov.w	sl, #0
  401130:	e023      	b.n	40117a <sDrawAHorLineColourFast+0x21a>
		{
			ga_Write_Block[y_coordinate][x_coordinate/2] = tmp_colour;
  401132:	464a      	mov	r2, r9
  401134:	087b      	lsrs	r3, r7, #1
  401136:	b29b      	uxth	r3, r3
  401138:	4618      	mov	r0, r3
  40113a:	491d      	ldr	r1, [pc, #116]	; (4011b0 <sDrawAHorLineColourFast+0x250>)
  40113c:	4613      	mov	r3, r2
  40113e:	009b      	lsls	r3, r3, #2
  401140:	4413      	add	r3, r2
  401142:	019b      	lsls	r3, r3, #6
  401144:	4403      	add	r3, r0
  401146:	440b      	add	r3, r1
  401148:	4622      	mov	r2, r4
  40114a:	701a      	strb	r2, [r3, #0]
			if( ga_Write_Block[y_coordinate][x_coordinate/2] == tmp_colour)
  40114c:	464a      	mov	r2, r9
  40114e:	087b      	lsrs	r3, r7, #1
  401150:	b29b      	uxth	r3, r3
  401152:	4618      	mov	r0, r3
  401154:	4916      	ldr	r1, [pc, #88]	; (4011b0 <sDrawAHorLineColourFast+0x250>)
  401156:	4613      	mov	r3, r2
  401158:	009b      	lsls	r3, r3, #2
  40115a:	4413      	add	r3, r2
  40115c:	019b      	lsls	r3, r3, #6
  40115e:	4403      	add	r3, r0
  401160:	440b      	add	r3, r1
  401162:	781b      	ldrb	r3, [r3, #0]
  401164:	b2db      	uxtb	r3, r3
  401166:	42a3      	cmp	r3, r4
  401168:	d103      	bne.n	401172 <sDrawAHorLineColourFast+0x212>
			{
				result = 0;
  40116a:	2300      	movs	r3, #0
  40116c:	f88d 300f 	strb.w	r3, [sp, #15]
				break;
  401170:	e006      	b.n	401180 <sDrawAHorLineColourFast+0x220>
				return(result);
			}

		}

		for( count = 0; count < 3; count++ )
  401172:	4653      	mov	r3, sl
  401174:	3301      	adds	r3, #1
  401176:	fa5f fa83 	uxtb.w	sl, r3
  40117a:	f1ba 0f02 	cmp.w	sl, #2
  40117e:	d9d8      	bls.n	401132 <sDrawAHorLineColourFast+0x1d2>
			{
				result = 0;
				break;
			}
		}
		x_coordinate++;
  401180:	463b      	mov	r3, r7
  401182:	3301      	adds	r3, #1
  401184:	b29f      	uxth	r7, r3
	y_coordinate 	= p_draw->y1;
	function 		= 	p_draw->function;
	colour  		= 	p_draw->colour;
	colour 			&= 	0x0F;

	for( i = 0; i < dx; i++ )
  401186:	fa1f f388 	uxth.w	r3, r8
  40118a:	3301      	adds	r3, #1
  40118c:	fa1f f883 	uxth.w	r8, r3
  401190:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  401194:	fa0f f388 	sxth.w	r3, r8
  401198:	429a      	cmp	r2, r3
  40119a:	f73f af4d 	bgt.w	401038 <sDrawAHorLineColourFast+0xd8>
				break;
			}
		}
		x_coordinate++;
	}
	return(result);
  40119e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
  4011a2:	4618      	mov	r0, r3
  4011a4:	b005      	add	sp, #20
  4011a6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  4011aa:	4770      	bx	lr
  4011ac:	20000084 	.word	0x20000084
  4011b0:	20000974 	.word	0x20000974

004011b4 <gDrawAPointColour>:
  * @brief
  * @param  None
  * @retval
  */
uint8_t gDrawAPointColour( draw_t *p_draw )
{
  4011b4:	b500      	push	{lr}
  4011b6:	b085      	sub	sp, #20
  4011b8:	9001      	str	r0, [sp, #4]
uint8_t result;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
  4011ba:	9b01      	ldr	r3, [sp, #4]
  4011bc:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  4011c0:	b29b      	uxth	r3, r3
  4011c2:	b21b      	sxth	r3, r3
  4011c4:	2b00      	cmp	r3, #0
  4011c6:	db34      	blt.n	401232 <gDrawAPointColour+0x7e>
  4011c8:	9b01      	ldr	r3, [sp, #4]
  4011ca:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  4011ce:	b29b      	uxth	r3, r3
  4011d0:	b21b      	sxth	r3, r3
  4011d2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  4011d6:	dc2c      	bgt.n	401232 <gDrawAPointColour+0x7e>
		(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  4011d8:	9b01      	ldr	r3, [sp, #4]
  4011da:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  4011de:	b29b      	uxth	r3, r3
uint8_t gDrawAPointColour( draw_t *p_draw )
{
uint8_t result;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
  4011e0:	b21b      	sxth	r3, r3
  4011e2:	2b00      	cmp	r3, #0
  4011e4:	db25      	blt.n	401232 <gDrawAPointColour+0x7e>
		(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  4011e6:	9b01      	ldr	r3, [sp, #4]
  4011e8:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  4011ec:	b29b      	uxth	r3, r3
  4011ee:	b21b      	sxth	r3, r3
  4011f0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  4011f4:	dc1d      	bgt.n	401232 <gDrawAPointColour+0x7e>
		(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  4011f6:	9b01      	ldr	r3, [sp, #4]
  4011f8:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  4011fc:	b29b      	uxth	r3, r3
{
uint8_t result;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
		(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  4011fe:	b21b      	sxth	r3, r3
  401200:	2b00      	cmp	r3, #0
  401202:	db16      	blt.n	401232 <gDrawAPointColour+0x7e>
		(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  401204:	9b01      	ldr	r3, [sp, #4]
  401206:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  40120a:	b29b      	uxth	r3, r3
  40120c:	b21b      	sxth	r3, r3
  40120e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  401212:	dc0e      	bgt.n	401232 <gDrawAPointColour+0x7e>
		(p_draw->y2_ry < 0) || (p_draw->y2_ry > V_LINE_SIZE) )
  401214:	9b01      	ldr	r3, [sp, #4]
  401216:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  40121a:	b29b      	uxth	r3, r3
uint8_t result;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
		(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
		(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  40121c:	b21b      	sxth	r3, r3
  40121e:	2b00      	cmp	r3, #0
  401220:	db07      	blt.n	401232 <gDrawAPointColour+0x7e>
		(p_draw->y2_ry < 0) || (p_draw->y2_ry > V_LINE_SIZE) )
  401222:	9b01      	ldr	r3, [sp, #4]
  401224:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  401228:	b29b      	uxth	r3, r3
  40122a:	b21b      	sxth	r3, r3
  40122c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  401230:	dd05      	ble.n	40123e <gDrawAPointColour+0x8a>
	{
		result = 1;
  401232:	2301      	movs	r3, #1
  401234:	f88d 300f 	strb.w	r3, [sp, #15]
		return(result);
  401238:	f89d 300f 	ldrb.w	r3, [sp, #15]
  40123c:	e007      	b.n	40124e <gDrawAPointColour+0x9a>
	}
	result = sDrawAPixel( p_draw );
  40123e:	9801      	ldr	r0, [sp, #4]
  401240:	f7ff fd58 	bl	400cf4 <sDrawAPixel>
  401244:	4603      	mov	r3, r0
  401246:	f88d 300f 	strb.w	r3, [sp, #15]
	return(result);
  40124a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
  40124e:	4618      	mov	r0, r3
  401250:	b005      	add	sp, #20
  401252:	f85d fb04 	ldr.w	pc, [sp], #4
  401256:	bf00      	nop

00401258 <gReadAPointColour>:
  * @brief
  * @param  None
  * @retval
  */
uint8_t gReadAPointColour( draw_t *p_draw )
{
  401258:	b084      	sub	sp, #16
  40125a:	9001      	str	r0, [sp, #4]
uint8_t result, tmp_colour;
uint16_t x_coordinate, y_coordinate;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
  40125c:	9b01      	ldr	r3, [sp, #4]
  40125e:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  401262:	b29b      	uxth	r3, r3
  401264:	b21b      	sxth	r3, r3
  401266:	2b00      	cmp	r3, #0
  401268:	db34      	blt.n	4012d4 <gReadAPointColour+0x7c>
  40126a:	9b01      	ldr	r3, [sp, #4]
  40126c:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  401270:	b29b      	uxth	r3, r3
  401272:	b21b      	sxth	r3, r3
  401274:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  401278:	dc2c      	bgt.n	4012d4 <gReadAPointColour+0x7c>
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  40127a:	9b01      	ldr	r3, [sp, #4]
  40127c:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  401280:	b29b      	uxth	r3, r3
{
uint8_t result, tmp_colour;
uint16_t x_coordinate, y_coordinate;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
  401282:	b21b      	sxth	r3, r3
  401284:	2b00      	cmp	r3, #0
  401286:	db25      	blt.n	4012d4 <gReadAPointColour+0x7c>
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  401288:	9b01      	ldr	r3, [sp, #4]
  40128a:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  40128e:	b29b      	uxth	r3, r3
  401290:	b21b      	sxth	r3, r3
  401292:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  401296:	dc1d      	bgt.n	4012d4 <gReadAPointColour+0x7c>
			(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  401298:	9b01      	ldr	r3, [sp, #4]
  40129a:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  40129e:	b29b      	uxth	r3, r3
uint8_t result, tmp_colour;
uint16_t x_coordinate, y_coordinate;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  4012a0:	b21b      	sxth	r3, r3
  4012a2:	2b00      	cmp	r3, #0
  4012a4:	db16      	blt.n	4012d4 <gReadAPointColour+0x7c>
			(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  4012a6:	9b01      	ldr	r3, [sp, #4]
  4012a8:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  4012ac:	b29b      	uxth	r3, r3
  4012ae:	b21b      	sxth	r3, r3
  4012b0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  4012b4:	dc0e      	bgt.n	4012d4 <gReadAPointColour+0x7c>
			(p_draw->y2_ry < 0) || (p_draw->y2_ry > V_LINE_SIZE) )
  4012b6:	9b01      	ldr	r3, [sp, #4]
  4012b8:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  4012bc:	b29b      	uxth	r3, r3
uint16_t x_coordinate, y_coordinate;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
			(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  4012be:	b21b      	sxth	r3, r3
  4012c0:	2b00      	cmp	r3, #0
  4012c2:	db07      	blt.n	4012d4 <gReadAPointColour+0x7c>
			(p_draw->y2_ry < 0) || (p_draw->y2_ry > V_LINE_SIZE) )
  4012c4:	9b01      	ldr	r3, [sp, #4]
  4012c6:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  4012ca:	b29b      	uxth	r3, r3
  4012cc:	b21b      	sxth	r3, r3
  4012ce:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  4012d2:	dd05      	ble.n	4012e0 <gReadAPointColour+0x88>
	{
		result = 1;
  4012d4:	2301      	movs	r3, #1
  4012d6:	f88d 3009 	strb.w	r3, [sp, #9]
		return(result);
  4012da:	f89d 3009 	ldrb.w	r3, [sp, #9]
  4012de:	e03d      	b.n	40135c <gReadAPointColour+0x104>
	}

	x_coordinate = (uint16_t)p_draw->x1;
  4012e0:	9b01      	ldr	r3, [sp, #4]
  4012e2:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  4012e6:	b29b      	uxth	r3, r3
  4012e8:	f8ad 300c 	strh.w	r3, [sp, #12]
	y_coordinate = (uint16_t)p_draw->y1;
  4012ec:	9b01      	ldr	r3, [sp, #4]
  4012ee:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  4012f2:	b29b      	uxth	r3, r3
  4012f4:	f8ad 300a 	strh.w	r3, [sp, #10]
	tmp_colour = ga_Write_Block[y_coordinate][x_coordinate/2];
  4012f8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  4012fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  401300:	085b      	lsrs	r3, r3, #1
  401302:	b29b      	uxth	r3, r3
  401304:	4618      	mov	r0, r3
  401306:	4917      	ldr	r1, [pc, #92]	; (401364 <gReadAPointColour+0x10c>)
  401308:	4613      	mov	r3, r2
  40130a:	009b      	lsls	r3, r3, #2
  40130c:	4413      	add	r3, r2
  40130e:	019b      	lsls	r3, r3, #6
  401310:	4403      	add	r3, r0
  401312:	440b      	add	r3, r1
  401314:	781b      	ldrb	r3, [r3, #0]
  401316:	f88d 300f 	strb.w	r3, [sp, #15]
	if( x_coordinate & 1 )
  40131a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40131e:	f003 0301 	and.w	r3, r3, #1
  401322:	2b00      	cmp	r3, #0
  401324:	d006      	beq.n	401334 <gReadAPointColour+0xdc>
	{
		tmp_colour &= 0x0F;
  401326:	f89d 300f 	ldrb.w	r3, [sp, #15]
  40132a:	f003 030f 	and.w	r3, r3, #15
  40132e:	f88d 300f 	strb.w	r3, [sp, #15]
  401332:	e00a      	b.n	40134a <gReadAPointColour+0xf2>
	}
	else
	{
		tmp_colour &= 0xF0;
  401334:	f89d 300f 	ldrb.w	r3, [sp, #15]
  401338:	f023 030f 	bic.w	r3, r3, #15
  40133c:	f88d 300f 	strb.w	r3, [sp, #15]
		tmp_colour >>= 4;
  401340:	f89d 300f 	ldrb.w	r3, [sp, #15]
  401344:	091b      	lsrs	r3, r3, #4
  401346:	f88d 300f 	strb.w	r3, [sp, #15]
	}
	p_draw->colour = tmp_colour;
  40134a:	9b01      	ldr	r3, [sp, #4]
  40134c:	f89d 200f 	ldrb.w	r2, [sp, #15]
  401350:	705a      	strb	r2, [r3, #1]
	result = 0;
  401352:	2300      	movs	r3, #0
  401354:	f88d 3009 	strb.w	r3, [sp, #9]
	return(result);
  401358:	f89d 3009 	ldrb.w	r3, [sp, #9]
}
  40135c:	4618      	mov	r0, r3
  40135e:	b004      	add	sp, #16
  401360:	4770      	bx	lr
  401362:	bf00      	nop
  401364:	20000974 	.word	0x20000974

00401368 <gDrawALineColour>:
  * @brief
  * @param  None
  * @retval
  */
uint8_t gDrawALineColour( draw_t *p_draw )
{
  401368:	b500      	push	{lr}
  40136a:	b089      	sub	sp, #36	; 0x24
  40136c:	9001      	str	r0, [sp, #4]
uint8_t result;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
  40136e:	9b01      	ldr	r3, [sp, #4]
  401370:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  401374:	b29b      	uxth	r3, r3
  401376:	b21b      	sxth	r3, r3
  401378:	2b00      	cmp	r3, #0
  40137a:	db34      	blt.n	4013e6 <gDrawALineColour+0x7e>
  40137c:	9b01      	ldr	r3, [sp, #4]
  40137e:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  401382:	b29b      	uxth	r3, r3
  401384:	b21b      	sxth	r3, r3
  401386:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  40138a:	dc2c      	bgt.n	4013e6 <gDrawALineColour+0x7e>
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  40138c:	9b01      	ldr	r3, [sp, #4]
  40138e:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  401392:	b29b      	uxth	r3, r3
uint8_t gDrawALineColour( draw_t *p_draw )
{
uint8_t result;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
  401394:	b21b      	sxth	r3, r3
  401396:	2b00      	cmp	r3, #0
  401398:	db25      	blt.n	4013e6 <gDrawALineColour+0x7e>
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  40139a:	9b01      	ldr	r3, [sp, #4]
  40139c:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  4013a0:	b29b      	uxth	r3, r3
  4013a2:	b21b      	sxth	r3, r3
  4013a4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  4013a8:	dc1d      	bgt.n	4013e6 <gDrawALineColour+0x7e>
			(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  4013aa:	9b01      	ldr	r3, [sp, #4]
  4013ac:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  4013b0:	b29b      	uxth	r3, r3
{
uint8_t result;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  4013b2:	b21b      	sxth	r3, r3
  4013b4:	2b00      	cmp	r3, #0
  4013b6:	db16      	blt.n	4013e6 <gDrawALineColour+0x7e>
			(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  4013b8:	9b01      	ldr	r3, [sp, #4]
  4013ba:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  4013be:	b29b      	uxth	r3, r3
  4013c0:	b21b      	sxth	r3, r3
  4013c2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  4013c6:	dc0e      	bgt.n	4013e6 <gDrawALineColour+0x7e>
			(p_draw->y2_ry < 0) || (p_draw->y2_ry > V_LINE_SIZE) )
  4013c8:	9b01      	ldr	r3, [sp, #4]
  4013ca:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  4013ce:	b29b      	uxth	r3, r3
uint8_t result;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
			(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  4013d0:	b21b      	sxth	r3, r3
  4013d2:	2b00      	cmp	r3, #0
  4013d4:	db07      	blt.n	4013e6 <gDrawALineColour+0x7e>
			(p_draw->y2_ry < 0) || (p_draw->y2_ry > V_LINE_SIZE) )
  4013d6:	9b01      	ldr	r3, [sp, #4]
  4013d8:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  4013dc:	b29b      	uxth	r3, r3
  4013de:	b21b      	sxth	r3, r3
  4013e0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  4013e4:	dd05      	ble.n	4013f2 <gDrawALineColour+0x8a>
	{
		result = 1;
  4013e6:	2301      	movs	r3, #1
  4013e8:	f88d 301f 	strb.w	r3, [sp, #31]
		return(result);
  4013ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4013f0:	e15e      	b.n	4016b0 <gDrawALineColour+0x348>
	}

	if( p_draw->y2_ry == p_draw->y1 )
  4013f2:	9b01      	ldr	r3, [sp, #4]
  4013f4:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  4013f8:	b29a      	uxth	r2, r3
  4013fa:	9b01      	ldr	r3, [sp, #4]
  4013fc:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  401400:	b29b      	uxth	r3, r3
  401402:	b212      	sxth	r2, r2
  401404:	b21b      	sxth	r3, r3
  401406:	429a      	cmp	r2, r3
  401408:	d11b      	bne.n	401442 <gDrawALineColour+0xda>
	{
		if(p_draw->x2_rx == p_draw->x1)
  40140a:	9b01      	ldr	r3, [sp, #4]
  40140c:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  401410:	b29a      	uxth	r2, r3
  401412:	9b01      	ldr	r3, [sp, #4]
  401414:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  401418:	b29b      	uxth	r3, r3
  40141a:	b212      	sxth	r2, r2
  40141c:	b21b      	sxth	r3, r3
  40141e:	429a      	cmp	r2, r3
  401420:	d106      	bne.n	401430 <gDrawALineColour+0xc8>
		{
			result = sDrawAPixel( p_draw );
  401422:	9801      	ldr	r0, [sp, #4]
  401424:	f7ff fc66 	bl	400cf4 <sDrawAPixel>
  401428:	4603      	mov	r3, r0
  40142a:	f88d 301f 	strb.w	r3, [sp, #31]
  40142e:	e005      	b.n	40143c <gDrawALineColour+0xd4>
		}
		else
		{
			result = sDrawAHorLineColourFast( p_draw );
  401430:	9801      	ldr	r0, [sp, #4]
  401432:	f7ff fd95 	bl	400f60 <sDrawAHorLineColourFast>
  401436:	4603      	mov	r3, r0
  401438:	f88d 301f 	strb.w	r3, [sp, #31]
		}
		return(result);
  40143c:	f89d 301f 	ldrb.w	r3, [sp, #31]
  401440:	e136      	b.n	4016b0 <gDrawALineColour+0x348>

int16_t  x, y, addx, addy, dx, dy;
int32_t  P;
int16_t  i;

	if( p_draw->x2_rx >= p_draw->x1 )
  401442:	9b01      	ldr	r3, [sp, #4]
  401444:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  401448:	b29a      	uxth	r2, r3
  40144a:	9b01      	ldr	r3, [sp, #4]
  40144c:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  401450:	b29b      	uxth	r3, r3
  401452:	b212      	sxth	r2, r2
  401454:	b21b      	sxth	r3, r3
  401456:	429a      	cmp	r2, r3
  401458:	db0e      	blt.n	401478 <gDrawALineColour+0x110>
	{
	  dx = p_draw->x2_rx - p_draw->x1;
  40145a:	9b01      	ldr	r3, [sp, #4]
  40145c:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  401460:	b29b      	uxth	r3, r3
  401462:	b29a      	uxth	r2, r3
  401464:	9b01      	ldr	r3, [sp, #4]
  401466:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  40146a:	b29b      	uxth	r3, r3
  40146c:	b29b      	uxth	r3, r3
  40146e:	1ad3      	subs	r3, r2, r3
  401470:	b29b      	uxth	r3, r3
  401472:	f8ad 3014 	strh.w	r3, [sp, #20]
  401476:	e00d      	b.n	401494 <gDrawALineColour+0x12c>
	}
	else
	{
	  dx = p_draw->x1 - p_draw->x2_rx;
  401478:	9b01      	ldr	r3, [sp, #4]
  40147a:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  40147e:	b29b      	uxth	r3, r3
  401480:	b29a      	uxth	r2, r3
  401482:	9b01      	ldr	r3, [sp, #4]
  401484:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  401488:	b29b      	uxth	r3, r3
  40148a:	b29b      	uxth	r3, r3
  40148c:	1ad3      	subs	r3, r2, r3
  40148e:	b29b      	uxth	r3, r3
  401490:	f8ad 3014 	strh.w	r3, [sp, #20]
	}

	if( p_draw->y2_ry >= p_draw->y1 )
  401494:	9b01      	ldr	r3, [sp, #4]
  401496:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  40149a:	b29a      	uxth	r2, r3
  40149c:	9b01      	ldr	r3, [sp, #4]
  40149e:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  4014a2:	b29b      	uxth	r3, r3
  4014a4:	b212      	sxth	r2, r2
  4014a6:	b21b      	sxth	r3, r3
  4014a8:	429a      	cmp	r2, r3
  4014aa:	db0e      	blt.n	4014ca <gDrawALineColour+0x162>
	{
	  dy = p_draw->y2_ry - p_draw->y1;
  4014ac:	9b01      	ldr	r3, [sp, #4]
  4014ae:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  4014b2:	b29b      	uxth	r3, r3
  4014b4:	b29a      	uxth	r2, r3
  4014b6:	9b01      	ldr	r3, [sp, #4]
  4014b8:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  4014bc:	b29b      	uxth	r3, r3
  4014be:	b29b      	uxth	r3, r3
  4014c0:	1ad3      	subs	r3, r2, r3
  4014c2:	b29b      	uxth	r3, r3
  4014c4:	f8ad 3012 	strh.w	r3, [sp, #18]
  4014c8:	e00d      	b.n	4014e6 <gDrawALineColour+0x17e>
	}
	else
	{
		dy = p_draw->y1 - p_draw->y2_ry;
  4014ca:	9b01      	ldr	r3, [sp, #4]
  4014cc:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  4014d0:	b29b      	uxth	r3, r3
  4014d2:	b29a      	uxth	r2, r3
  4014d4:	9b01      	ldr	r3, [sp, #4]
  4014d6:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  4014da:	b29b      	uxth	r3, r3
  4014dc:	b29b      	uxth	r3, r3
  4014de:	1ad3      	subs	r3, r2, r3
  4014e0:	b29b      	uxth	r3, r3
  4014e2:	f8ad 3012 	strh.w	r3, [sp, #18]
	}

	x = p_draw->x1;
  4014e6:	9b01      	ldr	r3, [sp, #4]
  4014e8:	79da      	ldrb	r2, [r3, #7]
  4014ea:	7a1b      	ldrb	r3, [r3, #8]
  4014ec:	021b      	lsls	r3, r3, #8
  4014ee:	4313      	orrs	r3, r2
  4014f0:	041b      	lsls	r3, r3, #16
  4014f2:	141b      	asrs	r3, r3, #16
  4014f4:	f8ad 301c 	strh.w	r3, [sp, #28]
	y = p_draw->y1;
  4014f8:	9b01      	ldr	r3, [sp, #4]
  4014fa:	7a5a      	ldrb	r2, [r3, #9]
  4014fc:	7a9b      	ldrb	r3, [r3, #10]
  4014fe:	021b      	lsls	r3, r3, #8
  401500:	4313      	orrs	r3, r2
  401502:	041b      	lsls	r3, r3, #16
  401504:	141b      	asrs	r3, r3, #16
  401506:	f8ad 301a 	strh.w	r3, [sp, #26]

	if(p_draw->x1 > p_draw->x2_rx)
  40150a:	9b01      	ldr	r3, [sp, #4]
  40150c:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  401510:	b29a      	uxth	r2, r3
  401512:	9b01      	ldr	r3, [sp, #4]
  401514:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  401518:	b29b      	uxth	r3, r3
  40151a:	b212      	sxth	r2, r2
  40151c:	b21b      	sxth	r3, r3
  40151e:	429a      	cmp	r2, r3
  401520:	dd04      	ble.n	40152c <gDrawALineColour+0x1c4>
	{
		addx = -1;
  401522:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401526:	f8ad 3018 	strh.w	r3, [sp, #24]
  40152a:	e002      	b.n	401532 <gDrawALineColour+0x1ca>
	}
	else
	{
		addx = 1;
  40152c:	2301      	movs	r3, #1
  40152e:	f8ad 3018 	strh.w	r3, [sp, #24]
	}
	if(p_draw->y1 > p_draw->y2_ry)
  401532:	9b01      	ldr	r3, [sp, #4]
  401534:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  401538:	b29a      	uxth	r2, r3
  40153a:	9b01      	ldr	r3, [sp, #4]
  40153c:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  401540:	b29b      	uxth	r3, r3
  401542:	b212      	sxth	r2, r2
  401544:	b21b      	sxth	r3, r3
  401546:	429a      	cmp	r2, r3
  401548:	dd04      	ble.n	401554 <gDrawALineColour+0x1ec>
	{
		addy = -1;
  40154a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40154e:	f8ad 3016 	strh.w	r3, [sp, #22]
  401552:	e002      	b.n	40155a <gDrawALineColour+0x1f2>
	}
	else
	{
		addy = 1;
  401554:	2301      	movs	r3, #1
  401556:	f8ad 3016 	strh.w	r3, [sp, #22]
	}

	if(dx >= dy)
  40155a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  40155e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  401562:	429a      	cmp	r2, r3
  401564:	db51      	blt.n	40160a <gDrawALineColour+0x2a2>
	{
	  P = 2*dy - dx;
  401566:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  40156a:	005a      	lsls	r2, r3, #1
  40156c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  401570:	1ad3      	subs	r3, r2, r3
  401572:	9303      	str	r3, [sp, #12]
	  for( i=0; i<=dx; i++ )
  401574:	2300      	movs	r3, #0
  401576:	f8ad 300a 	strh.w	r3, [sp, #10]
  40157a:	e03f      	b.n	4015fc <gDrawALineColour+0x294>
	  {
	  	p_draw->x1 = x;
  40157c:	9b01      	ldr	r3, [sp, #4]
  40157e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  401582:	f8a3 2007 	strh.w	r2, [r3, #7]
	  	p_draw->y1 = y;
  401586:	9b01      	ldr	r3, [sp, #4]
  401588:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40158c:	f8a3 2009 	strh.w	r2, [r3, #9]
	  	result = sDrawAPixel( p_draw );
  401590:	9801      	ldr	r0, [sp, #4]
  401592:	f7ff fbaf 	bl	400cf4 <sDrawAPixel>
  401596:	4603      	mov	r3, r0
  401598:	f88d 301f 	strb.w	r3, [sp, #31]

	  	if(P < 0)
  40159c:	9b03      	ldr	r3, [sp, #12]
  40159e:	2b00      	cmp	r3, #0
  4015a0:	da0e      	bge.n	4015c0 <gDrawALineColour+0x258>
	  	{
	  	  P += 2*dy;
  4015a2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  4015a6:	005b      	lsls	r3, r3, #1
  4015a8:	9a03      	ldr	r2, [sp, #12]
  4015aa:	4413      	add	r3, r2
  4015ac:	9303      	str	r3, [sp, #12]
	  	  x += addx;
  4015ae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  4015b2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  4015b6:	4413      	add	r3, r2
  4015b8:	b29b      	uxth	r3, r3
  4015ba:	f8ad 301c 	strh.w	r3, [sp, #28]
  4015be:	e018      	b.n	4015f2 <gDrawALineColour+0x28a>
	  	}
	  	else
	  	{
	  	  P += 2*dy - 2*dx;
  4015c0:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  4015c4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  4015c8:	1ad3      	subs	r3, r2, r3
  4015ca:	005b      	lsls	r3, r3, #1
  4015cc:	9a03      	ldr	r2, [sp, #12]
  4015ce:	4413      	add	r3, r2
  4015d0:	9303      	str	r3, [sp, #12]
	  	  x += addx;
  4015d2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  4015d6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  4015da:	4413      	add	r3, r2
  4015dc:	b29b      	uxth	r3, r3
  4015de:	f8ad 301c 	strh.w	r3, [sp, #28]
	  	  y += addy;
  4015e2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  4015e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4015ea:	4413      	add	r3, r2
  4015ec:	b29b      	uxth	r3, r3
  4015ee:	f8ad 301a 	strh.w	r3, [sp, #26]
	}

	if(dx >= dy)
	{
	  P = 2*dy - dx;
	  for( i=0; i<=dx; i++ )
  4015f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  4015f6:	3301      	adds	r3, #1
  4015f8:	f8ad 300a 	strh.w	r3, [sp, #10]
  4015fc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  401600:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  401604:	429a      	cmp	r2, r3
  401606:	ddb9      	ble.n	40157c <gDrawALineColour+0x214>
  401608:	e050      	b.n	4016ac <gDrawALineColour+0x344>
	  	}
	  }
	}
	else
	{
	  P = 2*dx - dy;
  40160a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  40160e:	005a      	lsls	r2, r3, #1
  401610:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  401614:	1ad3      	subs	r3, r2, r3
  401616:	9303      	str	r3, [sp, #12]
	  for(i=0; i<=dy; ++i)
  401618:	2300      	movs	r3, #0
  40161a:	f8ad 300a 	strh.w	r3, [sp, #10]
  40161e:	e03f      	b.n	4016a0 <gDrawALineColour+0x338>
	  {
	  	p_draw->x1 = x;
  401620:	9b01      	ldr	r3, [sp, #4]
  401622:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  401626:	f8a3 2007 	strh.w	r2, [r3, #7]
	  	p_draw->y1 = y;
  40162a:	9b01      	ldr	r3, [sp, #4]
  40162c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  401630:	f8a3 2009 	strh.w	r2, [r3, #9]
	  	result = sDrawAPixel( p_draw );
  401634:	9801      	ldr	r0, [sp, #4]
  401636:	f7ff fb5d 	bl	400cf4 <sDrawAPixel>
  40163a:	4603      	mov	r3, r0
  40163c:	f88d 301f 	strb.w	r3, [sp, #31]

	  	if(P < 0)
  401640:	9b03      	ldr	r3, [sp, #12]
  401642:	2b00      	cmp	r3, #0
  401644:	da0e      	bge.n	401664 <gDrawALineColour+0x2fc>
	  	{
	  	  P += 2*dx;
  401646:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  40164a:	005b      	lsls	r3, r3, #1
  40164c:	9a03      	ldr	r2, [sp, #12]
  40164e:	4413      	add	r3, r2
  401650:	9303      	str	r3, [sp, #12]
	      y += addy;
  401652:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  401656:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40165a:	4413      	add	r3, r2
  40165c:	b29b      	uxth	r3, r3
  40165e:	f8ad 301a 	strh.w	r3, [sp, #26]
  401662:	e018      	b.n	401696 <gDrawALineColour+0x32e>
	    }
	    else
	    {
	      P += 2*dx - 2*dy;
  401664:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  401668:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  40166c:	1ad3      	subs	r3, r2, r3
  40166e:	005b      	lsls	r3, r3, #1
  401670:	9a03      	ldr	r2, [sp, #12]
  401672:	4413      	add	r3, r2
  401674:	9303      	str	r3, [sp, #12]
	      x += addx;
  401676:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  40167a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40167e:	4413      	add	r3, r2
  401680:	b29b      	uxth	r3, r3
  401682:	f8ad 301c 	strh.w	r3, [sp, #28]
	      y += addy;
  401686:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40168a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40168e:	4413      	add	r3, r2
  401690:	b29b      	uxth	r3, r3
  401692:	f8ad 301a 	strh.w	r3, [sp, #26]
	  }
	}
	else
	{
	  P = 2*dx - dy;
	  for(i=0; i<=dy; ++i)
  401696:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  40169a:	3301      	adds	r3, #1
  40169c:	f8ad 300a 	strh.w	r3, [sp, #10]
  4016a0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  4016a4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  4016a8:	429a      	cmp	r2, r3
  4016aa:	ddb9      	ble.n	401620 <gDrawALineColour+0x2b8>
	      y += addy;
	    }
	  }
	}

	return(result);
  4016ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
  4016b0:	4618      	mov	r0, r3
  4016b2:	b009      	add	sp, #36	; 0x24
  4016b4:	f85d fb04 	ldr.w	pc, [sp], #4

004016b8 <gDrawARectangleColour>:
  * @brief
  * @param  None
  * @retval
  */
uint8_t gDrawARectangleColour( draw_t *p_draw )
{
  4016b8:	b500      	push	{lr}
  4016ba:	b087      	sub	sp, #28
  4016bc:	9001      	str	r0, [sp, #4]
uint8_t result;

	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
  4016be:	9b01      	ldr	r3, [sp, #4]
  4016c0:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  4016c4:	b29b      	uxth	r3, r3
  4016c6:	b21b      	sxth	r3, r3
  4016c8:	2b00      	cmp	r3, #0
  4016ca:	db34      	blt.n	401736 <gDrawARectangleColour+0x7e>
  4016cc:	9b01      	ldr	r3, [sp, #4]
  4016ce:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  4016d2:	b29b      	uxth	r3, r3
  4016d4:	b21b      	sxth	r3, r3
  4016d6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  4016da:	dc2c      	bgt.n	401736 <gDrawARectangleColour+0x7e>
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  4016dc:	9b01      	ldr	r3, [sp, #4]
  4016de:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  4016e2:	b29b      	uxth	r3, r3
  */
uint8_t gDrawARectangleColour( draw_t *p_draw )
{
uint8_t result;

	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
  4016e4:	b21b      	sxth	r3, r3
  4016e6:	2b00      	cmp	r3, #0
  4016e8:	db25      	blt.n	401736 <gDrawARectangleColour+0x7e>
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  4016ea:	9b01      	ldr	r3, [sp, #4]
  4016ec:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  4016f0:	b29b      	uxth	r3, r3
  4016f2:	b21b      	sxth	r3, r3
  4016f4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  4016f8:	dc1d      	bgt.n	401736 <gDrawARectangleColour+0x7e>
			(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  4016fa:	9b01      	ldr	r3, [sp, #4]
  4016fc:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  401700:	b29b      	uxth	r3, r3
uint8_t gDrawARectangleColour( draw_t *p_draw )
{
uint8_t result;

	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  401702:	b21b      	sxth	r3, r3
  401704:	2b00      	cmp	r3, #0
  401706:	db16      	blt.n	401736 <gDrawARectangleColour+0x7e>
			(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  401708:	9b01      	ldr	r3, [sp, #4]
  40170a:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  40170e:	b29b      	uxth	r3, r3
  401710:	b21b      	sxth	r3, r3
  401712:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  401716:	dc0e      	bgt.n	401736 <gDrawARectangleColour+0x7e>
			(p_draw->y2_ry < 0) || (p_draw->y2_ry > V_LINE_SIZE) )
  401718:	9b01      	ldr	r3, [sp, #4]
  40171a:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  40171e:	b29b      	uxth	r3, r3
{
uint8_t result;

	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
			(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  401720:	b21b      	sxth	r3, r3
  401722:	2b00      	cmp	r3, #0
  401724:	db07      	blt.n	401736 <gDrawARectangleColour+0x7e>
			(p_draw->y2_ry < 0) || (p_draw->y2_ry > V_LINE_SIZE) )
  401726:	9b01      	ldr	r3, [sp, #4]
  401728:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  40172c:	b29b      	uxth	r3, r3
  40172e:	b21b      	sxth	r3, r3
  401730:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  401734:	dd05      	ble.n	401742 <gDrawARectangleColour+0x8a>
	{
		result = 1;
  401736:	2301      	movs	r3, #1
  401738:	f88d 3017 	strb.w	r3, [sp, #23]
		return(result);
  40173c:	f89d 3017 	ldrb.w	r3, [sp, #23]
  401740:	e145      	b.n	4019ce <gDrawARectangleColour+0x316>
	}

uint16_t left, right, top, bottom, temp, i;
uint8_t flag_fill = 0;
  401742:	2300      	movs	r3, #0
  401744:	f88d 300b 	strb.w	r3, [sp, #11]

	left		= p_draw->x1;
  401748:	9b01      	ldr	r3, [sp, #4]
  40174a:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  40174e:	b29b      	uxth	r3, r3
  401750:	f8ad 3014 	strh.w	r3, [sp, #20]
	right		= p_draw->x2_rx;
  401754:	9b01      	ldr	r3, [sp, #4]
  401756:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  40175a:	b29b      	uxth	r3, r3
  40175c:	f8ad 3012 	strh.w	r3, [sp, #18]
	top 		= p_draw->y1;
  401760:	9b01      	ldr	r3, [sp, #4]
  401762:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  401766:	b29b      	uxth	r3, r3
  401768:	f8ad 3010 	strh.w	r3, [sp, #16]
	bottom 	= p_draw->y2_ry;
  40176c:	9b01      	ldr	r3, [sp, #4]
  40176e:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  401772:	b29b      	uxth	r3, r3
  401774:	f8ad 300e 	strh.w	r3, [sp, #14]

	if( (left == right) || (top == bottom) )
  401778:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40177c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  401780:	429a      	cmp	r2, r3
  401782:	d005      	beq.n	401790 <gDrawARectangleColour+0xd8>
  401784:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  401788:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  40178c:	429a      	cmp	r2, r3
  40178e:	d108      	bne.n	4017a2 <gDrawARectangleColour+0xea>
	{
		result = gDrawALineColour( p_draw );
  401790:	9801      	ldr	r0, [sp, #4]
  401792:	f7ff fde9 	bl	401368 <gDrawALineColour>
  401796:	4603      	mov	r3, r0
  401798:	f88d 3017 	strb.w	r3, [sp, #23]
		return(result);
  40179c:	f89d 3017 	ldrb.w	r3, [sp, #23]
  4017a0:	e115      	b.n	4019ce <gDrawARectangleColour+0x316>
	}

	if( top > bottom)
  4017a2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  4017a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4017aa:	429a      	cmp	r2, r3
  4017ac:	d90b      	bls.n	4017c6 <gDrawARectangleColour+0x10e>
	{
		temp 		= top;
  4017ae:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  4017b2:	f8ad 3008 	strh.w	r3, [sp, #8]
		top			= bottom;
  4017b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4017ba:	f8ad 3010 	strh.w	r3, [sp, #16]
		bottom		= temp;
  4017be:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  4017c2:	f8ad 300e 	strh.w	r3, [sp, #14]
	}
	if( left > right )
  4017c6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  4017ca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4017ce:	429a      	cmp	r2, r3
  4017d0:	d90b      	bls.n	4017ea <gDrawARectangleColour+0x132>
	{
		temp		= left;
  4017d2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  4017d6:	f8ad 3008 	strh.w	r3, [sp, #8]
		left		= right;
  4017da:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4017de:	f8ad 3014 	strh.w	r3, [sp, #20]
		right		= temp;
  4017e2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  4017e6:	f8ad 3012 	strh.w	r3, [sp, #18]
	}
	do
	{
		for( i = 0; (left + i) <= right; i++ )
  4017ea:	2300      	movs	r3, #0
  4017ec:	f8ad 300c 	strh.w	r3, [sp, #12]
  4017f0:	e02c      	b.n	40184c <gDrawARectangleColour+0x194>
		{
			p_draw->x1 = left + i;
  4017f2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  4017f6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4017fa:	4413      	add	r3, r2
  4017fc:	b29b      	uxth	r3, r3
  4017fe:	b29a      	uxth	r2, r3
  401800:	9b01      	ldr	r3, [sp, #4]
  401802:	f8a3 2007 	strh.w	r2, [r3, #7]
			p_draw->y1 = top;
  401806:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  40180a:	9b01      	ldr	r3, [sp, #4]
  40180c:	f8a3 2009 	strh.w	r2, [r3, #9]
			result |= sDrawAPixel( p_draw );
  401810:	9801      	ldr	r0, [sp, #4]
  401812:	f7ff fa6f 	bl	400cf4 <sDrawAPixel>
  401816:	4603      	mov	r3, r0
  401818:	461a      	mov	r2, r3
  40181a:	f89d 3017 	ldrb.w	r3, [sp, #23]
  40181e:	4313      	orrs	r3, r2
  401820:	f88d 3017 	strb.w	r3, [sp, #23]
			p_draw->y1 = bottom;
  401824:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  401828:	9b01      	ldr	r3, [sp, #4]
  40182a:	f8a3 2009 	strh.w	r2, [r3, #9]
			result |= sDrawAPixel( p_draw );
  40182e:	9801      	ldr	r0, [sp, #4]
  401830:	f7ff fa60 	bl	400cf4 <sDrawAPixel>
  401834:	4603      	mov	r3, r0
  401836:	461a      	mov	r2, r3
  401838:	f89d 3017 	ldrb.w	r3, [sp, #23]
  40183c:	4313      	orrs	r3, r2
  40183e:	f88d 3017 	strb.w	r3, [sp, #23]
		left		= right;
		right		= temp;
	}
	do
	{
		for( i = 0; (left + i) <= right; i++ )
  401842:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  401846:	3301      	adds	r3, #1
  401848:	f8ad 300c 	strh.w	r3, [sp, #12]
  40184c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  401850:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  401854:	441a      	add	r2, r3
  401856:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40185a:	429a      	cmp	r2, r3
  40185c:	ddc9      	ble.n	4017f2 <gDrawARectangleColour+0x13a>
			p_draw->y1 = top;
			result |= sDrawAPixel( p_draw );
			p_draw->y1 = bottom;
			result |= sDrawAPixel( p_draw );
		}
		for( i = 0; (top + i) <= bottom; i ++ )
  40185e:	2300      	movs	r3, #0
  401860:	f8ad 300c 	strh.w	r3, [sp, #12]
  401864:	e02c      	b.n	4018c0 <gDrawARectangleColour+0x208>
		{
			p_draw->y1 = top + i;
  401866:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  40186a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40186e:	4413      	add	r3, r2
  401870:	b29b      	uxth	r3, r3
  401872:	b29a      	uxth	r2, r3
  401874:	9b01      	ldr	r3, [sp, #4]
  401876:	f8a3 2009 	strh.w	r2, [r3, #9]
			p_draw->x1 = left;
  40187a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40187e:	9b01      	ldr	r3, [sp, #4]
  401880:	f8a3 2007 	strh.w	r2, [r3, #7]
			result |= sDrawAPixel( p_draw );
  401884:	9801      	ldr	r0, [sp, #4]
  401886:	f7ff fa35 	bl	400cf4 <sDrawAPixel>
  40188a:	4603      	mov	r3, r0
  40188c:	461a      	mov	r2, r3
  40188e:	f89d 3017 	ldrb.w	r3, [sp, #23]
  401892:	4313      	orrs	r3, r2
  401894:	f88d 3017 	strb.w	r3, [sp, #23]
			p_draw->x1 = right;
  401898:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40189c:	9b01      	ldr	r3, [sp, #4]
  40189e:	f8a3 2007 	strh.w	r2, [r3, #7]
			result |= sDrawAPixel( p_draw );
  4018a2:	9801      	ldr	r0, [sp, #4]
  4018a4:	f7ff fa26 	bl	400cf4 <sDrawAPixel>
  4018a8:	4603      	mov	r3, r0
  4018aa:	461a      	mov	r2, r3
  4018ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
  4018b0:	4313      	orrs	r3, r2
  4018b2:	f88d 3017 	strb.w	r3, [sp, #23]
			p_draw->y1 = top;
			result |= sDrawAPixel( p_draw );
			p_draw->y1 = bottom;
			result |= sDrawAPixel( p_draw );
		}
		for( i = 0; (top + i) <= bottom; i ++ )
  4018b6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4018ba:	3301      	adds	r3, #1
  4018bc:	f8ad 300c 	strh.w	r3, [sp, #12]
  4018c0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  4018c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4018c8:	441a      	add	r2, r3
  4018ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4018ce:	429a      	cmp	r2, r3
  4018d0:	ddc9      	ble.n	401866 <gDrawARectangleColour+0x1ae>
			result |= sDrawAPixel( p_draw );
			p_draw->x1 = right;
			result |= sDrawAPixel( p_draw );
		}

		if( p_draw->type )				/* if TYPE is "Fill" ... */
  4018d2:	9b01      	ldr	r3, [sp, #4]
  4018d4:	78db      	ldrb	r3, [r3, #3]
  4018d6:	2b00      	cmp	r3, #0
  4018d8:	d072      	beq.n	4019c0 <gDrawARectangleColour+0x308>
		{
			flag_fill = 1;
  4018da:	2301      	movs	r3, #1
  4018dc:	f88d 300b 	strb.w	r3, [sp, #11]
			if( (right - left) <= 2 )
  4018e0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  4018e4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  4018e8:	1ad3      	subs	r3, r2, r3
  4018ea:	2b02      	cmp	r3, #2
  4018ec:	dc26      	bgt.n	40193c <gDrawARectangleColour+0x284>
			{
				right--;
  4018ee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4018f2:	3b01      	subs	r3, #1
  4018f4:	f8ad 3012 	strh.w	r3, [sp, #18]
				p_draw->x1 		= left;
  4018f8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  4018fc:	9b01      	ldr	r3, [sp, #4]
  4018fe:	f8a3 2007 	strh.w	r2, [r3, #7]
				p_draw->y1 		= top;
  401902:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  401906:	9b01      	ldr	r3, [sp, #4]
  401908:	f8a3 2009 	strh.w	r2, [r3, #9]
				p_draw->x2_rx	= right;
  40190c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  401910:	9b01      	ldr	r3, [sp, #4]
  401912:	f8a3 200b 	strh.w	r2, [r3, #11]
				p_draw->y2_ry	= bottom;
  401916:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  40191a:	9b01      	ldr	r3, [sp, #4]
  40191c:	f8a3 200d 	strh.w	r2, [r3, #13]
				result |= gDrawALineColour( p_draw );
  401920:	9801      	ldr	r0, [sp, #4]
  401922:	f7ff fd21 	bl	401368 <gDrawALineColour>
  401926:	4603      	mov	r3, r0
  401928:	461a      	mov	r2, r3
  40192a:	f89d 3017 	ldrb.w	r3, [sp, #23]
  40192e:	4313      	orrs	r3, r2
  401930:	f88d 3017 	strb.w	r3, [sp, #23]
				flag_fill = 0;
  401934:	2300      	movs	r3, #0
  401936:	f88d 300b 	strb.w	r3, [sp, #11]
  40193a:	e041      	b.n	4019c0 <gDrawARectangleColour+0x308>
			}
			else if( (bottom - top) <= 2 )
  40193c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  401940:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  401944:	1ad3      	subs	r3, r2, r3
  401946:	2b02      	cmp	r3, #2
  401948:	dc26      	bgt.n	401998 <gDrawARectangleColour+0x2e0>
			{
				bottom--;
  40194a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  40194e:	3b01      	subs	r3, #1
  401950:	f8ad 300e 	strh.w	r3, [sp, #14]
				p_draw->x1 		= left;
  401954:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  401958:	9b01      	ldr	r3, [sp, #4]
  40195a:	f8a3 2007 	strh.w	r2, [r3, #7]
				p_draw->y1 		= top;
  40195e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  401962:	9b01      	ldr	r3, [sp, #4]
  401964:	f8a3 2009 	strh.w	r2, [r3, #9]
				p_draw->x2_rx	= right;
  401968:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40196c:	9b01      	ldr	r3, [sp, #4]
  40196e:	f8a3 200b 	strh.w	r2, [r3, #11]
				p_draw->y2_ry	= bottom;
  401972:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  401976:	9b01      	ldr	r3, [sp, #4]
  401978:	f8a3 200d 	strh.w	r2, [r3, #13]
				result |= gDrawALineColour( p_draw );
  40197c:	9801      	ldr	r0, [sp, #4]
  40197e:	f7ff fcf3 	bl	401368 <gDrawALineColour>
  401982:	4603      	mov	r3, r0
  401984:	461a      	mov	r2, r3
  401986:	f89d 3017 	ldrb.w	r3, [sp, #23]
  40198a:	4313      	orrs	r3, r2
  40198c:	f88d 3017 	strb.w	r3, [sp, #23]
				flag_fill = 0;
  401990:	2300      	movs	r3, #0
  401992:	f88d 300b 	strb.w	r3, [sp, #11]
  401996:	e013      	b.n	4019c0 <gDrawARectangleColour+0x308>
			}
			else
			{
				left++;
  401998:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40199c:	3301      	adds	r3, #1
  40199e:	f8ad 3014 	strh.w	r3, [sp, #20]
				right--;
  4019a2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4019a6:	3b01      	subs	r3, #1
  4019a8:	f8ad 3012 	strh.w	r3, [sp, #18]
				top++;
  4019ac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  4019b0:	3301      	adds	r3, #1
  4019b2:	f8ad 3010 	strh.w	r3, [sp, #16]
				bottom--;
  4019b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4019ba:	3b01      	subs	r3, #1
  4019bc:	f8ad 300e 	strh.w	r3, [sp, #14]
			}
		}
	}
	while( flag_fill );
  4019c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
  4019c4:	2b00      	cmp	r3, #0
  4019c6:	f47f af10 	bne.w	4017ea <gDrawARectangleColour+0x132>

	return(result);
  4019ca:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
  4019ce:	4618      	mov	r0, r3
  4019d0:	b007      	add	sp, #28
  4019d2:	f85d fb04 	ldr.w	pc, [sp], #4
  4019d6:	bf00      	nop

004019d8 <gDrawAAsciiSymbolColour>:
  * @brief
  * @param  None
  * @retval
  */
uint8_t gDrawAAsciiSymbolColour( draw_t *p_draw )
{
  4019d8:	b500      	push	{lr}
  4019da:	b08b      	sub	sp, #44	; 0x2c
  4019dc:	9001      	str	r0, [sp, #4]
uint8_t 	result = 0;
  4019de:	2300      	movs	r3, #0
  4019e0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
uint8_t 	tmp_pixel;
uint8_t 	tmp_bcount, tmp_min_bcount;
uint8_t 	num_of_pixels_of_row;
uint8_t 	tmp_bytes = 0;
  4019e4:	2300      	movs	r3, #0
  4019e6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
int16_t  	x, y;
const uint8_t* ptmp_font;
const uint8_t* ptmp_char;


	x = p_draw->x1;
  4019ea:	9b01      	ldr	r3, [sp, #4]
  4019ec:	79da      	ldrb	r2, [r3, #7]
  4019ee:	7a1b      	ldrb	r3, [r3, #8]
  4019f0:	021b      	lsls	r3, r3, #8
  4019f2:	4313      	orrs	r3, r2
  4019f4:	041b      	lsls	r3, r3, #16
  4019f6:	141b      	asrs	r3, r3, #16
  4019f8:	f8ad 3020 	strh.w	r3, [sp, #32]
	y = p_draw->y1;
  4019fc:	9b01      	ldr	r3, [sp, #4]
  4019fe:	7a5a      	ldrb	r2, [r3, #9]
  401a00:	7a9b      	ldrb	r3, [r3, #10]
  401a02:	021b      	lsls	r3, r3, #8
  401a04:	4313      	orrs	r3, r2
  401a06:	041b      	lsls	r3, r3, #16
  401a08:	141b      	asrs	r3, r3, #16
  401a0a:	f8ad 301e 	strh.w	r3, [sp, #30]

	num_of_pixels_of_row = NUM_OF_PIXELS_OF_ROW;
  401a0e:	2308      	movs	r3, #8
  401a10:	f88d 301d 	strb.w	r3, [sp, #29]
	tmp_num_of_fonts_bytes = NUM_OF_FONTS_BYTES;
  401a14:	2308      	movs	r3, #8
  401a16:	9306      	str	r3, [sp, #24]
	tmp_num_of_max_collons	= NUM_OF_COLLONS;
  401a18:	2308      	movs	r3, #8
  401a1a:	f88d 3017 	strb.w	r3, [sp, #23]
	ptmp_font = (const uint8_t*)gap_fonts[p_draw->ascii_font];
  401a1e:	9b01      	ldr	r3, [sp, #4]
  401a20:	795b      	ldrb	r3, [r3, #5]
  401a22:	461a      	mov	r2, r3
  401a24:	4b43      	ldr	r3, [pc, #268]	; (401b34 <gDrawAAsciiSymbolColour+0x15c>)
  401a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401a2a:	9304      	str	r3, [sp, #16]
	ptmp_char = ptmp_font + 4 + p_draw->ascii_sym * tmp_num_of_fonts_bytes;
  401a2c:	9b01      	ldr	r3, [sp, #4]
  401a2e:	791b      	ldrb	r3, [r3, #4]
  401a30:	9a06      	ldr	r2, [sp, #24]
  401a32:	fb02 f303 	mul.w	r3, r2, r3
  401a36:	3304      	adds	r3, #4
  401a38:	9a04      	ldr	r2, [sp, #16]
  401a3a:	4413      	add	r3, r2
  401a3c:	9303      	str	r3, [sp, #12]

	for( tmp_num_of_collons = 0; tmp_num_of_collons < tmp_num_of_max_collons; tmp_num_of_collons++ )
  401a3e:	2300      	movs	r3, #0
  401a40:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
  401a44:	e069      	b.n	401b1a <gDrawAAsciiSymbolColour+0x142>
	{
			for( tmp_pixel = num_of_pixels_of_row; tmp_pixel > 0; )
  401a46:	f89d 301d 	ldrb.w	r3, [sp, #29]
  401a4a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  401a4e:	e04d      	b.n	401aec <gDrawAAsciiSymbolColour+0x114>
			{
				if( tmp_pixel >= 8 )
  401a50:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
  401a54:	2b07      	cmp	r3, #7
  401a56:	d903      	bls.n	401a60 <gDrawAAsciiSymbolColour+0x88>
				{
					tmp_min_bcount = 0;
  401a58:	2300      	movs	r3, #0
  401a5a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  401a5e:	e005      	b.n	401a6c <gDrawAAsciiSymbolColour+0x94>
				}
				else
				{
					tmp_min_bcount = 8 - tmp_pixel;
  401a60:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
  401a64:	f1c3 0308 	rsb	r3, r3, #8
  401a68:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
				}
				tmp_bcount = 8;
  401a6c:	2308      	movs	r3, #8
  401a6e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
				do
				{
					if( (1 << (tmp_bcount-1)) & ptmp_char[tmp_bytes] )
  401a72:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
  401a76:	9a03      	ldr	r2, [sp, #12]
  401a78:	4413      	add	r3, r2
  401a7a:	781b      	ldrb	r3, [r3, #0]
  401a7c:	461a      	mov	r2, r3
  401a7e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
  401a82:	3b01      	subs	r3, #1
  401a84:	fa42 f303 	asr.w	r3, r2, r3
  401a88:	f003 0301 	and.w	r3, r3, #1
  401a8c:	2b00      	cmp	r3, #0
  401a8e:	d013      	beq.n	401ab8 <gDrawAAsciiSymbolColour+0xe0>
					{
				  	p_draw->x1 = x;
  401a90:	9b01      	ldr	r3, [sp, #4]
  401a92:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  401a96:	f8a3 2007 	strh.w	r2, [r3, #7]
				  	p_draw->y1 = y;
  401a9a:	9b01      	ldr	r3, [sp, #4]
  401a9c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
  401aa0:	f8a3 2009 	strh.w	r2, [r3, #9]
						result |= sDrawAPixel( p_draw );
  401aa4:	9801      	ldr	r0, [sp, #4]
  401aa6:	f7ff f925 	bl	400cf4 <sDrawAPixel>
  401aaa:	4603      	mov	r3, r0
  401aac:	461a      	mov	r2, r3
  401aae:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  401ab2:	4313      	orrs	r3, r2
  401ab4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
					}
					x++;
  401ab8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  401abc:	3301      	adds	r3, #1
  401abe:	f8ad 3020 	strh.w	r3, [sp, #32]
					tmp_bcount--;
  401ac2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
  401ac6:	3b01      	subs	r3, #1
  401ac8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
				}
				while(tmp_bcount > tmp_min_bcount);
  401acc:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
  401ad0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  401ad4:	429a      	cmp	r2, r3
  401ad6:	d8cc      	bhi.n	401a72 <gDrawAAsciiSymbolColour+0x9a>

				tmp_bytes++;
  401ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
  401adc:	3301      	adds	r3, #1
  401ade:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				tmp_pixel -= 8;
  401ae2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
  401ae6:	3b08      	subs	r3, #8
  401ae8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	ptmp_font = (const uint8_t*)gap_fonts[p_draw->ascii_font];
	ptmp_char = ptmp_font + 4 + p_draw->ascii_sym * tmp_num_of_fonts_bytes;

	for( tmp_num_of_collons = 0; tmp_num_of_collons < tmp_num_of_max_collons; tmp_num_of_collons++ )
	{
			for( tmp_pixel = num_of_pixels_of_row; tmp_pixel > 0; )
  401aec:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
  401af0:	2b00      	cmp	r3, #0
  401af2:	d1ad      	bne.n	401a50 <gDrawAAsciiSymbolColour+0x78>
				while(tmp_bcount > tmp_min_bcount);

				tmp_bytes++;
				tmp_pixel -= 8;
			}
			x -= num_of_pixels_of_row;
  401af4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  401af8:	f89d 301d 	ldrb.w	r3, [sp, #29]
  401afc:	b29b      	uxth	r3, r3
  401afe:	1ad3      	subs	r3, r2, r3
  401b00:	b29b      	uxth	r3, r3
  401b02:	f8ad 3020 	strh.w	r3, [sp, #32]
			y++;
  401b06:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  401b0a:	3301      	adds	r3, #1
  401b0c:	f8ad 301e 	strh.w	r3, [sp, #30]
	tmp_num_of_fonts_bytes = NUM_OF_FONTS_BYTES;
	tmp_num_of_max_collons	= NUM_OF_COLLONS;
	ptmp_font = (const uint8_t*)gap_fonts[p_draw->ascii_font];
	ptmp_char = ptmp_font + 4 + p_draw->ascii_sym * tmp_num_of_fonts_bytes;

	for( tmp_num_of_collons = 0; tmp_num_of_collons < tmp_num_of_max_collons; tmp_num_of_collons++ )
  401b10:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
  401b14:	3301      	adds	r3, #1
  401b16:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
  401b1a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
  401b1e:	f89d 3017 	ldrb.w	r3, [sp, #23]
  401b22:	429a      	cmp	r2, r3
  401b24:	d38f      	bcc.n	401a46 <gDrawAAsciiSymbolColour+0x6e>
			}
			x -= num_of_pixels_of_row;
			y++;
	}

	return(result);
  401b26:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
  401b2a:	4618      	mov	r0, r3
  401b2c:	b00b      	add	sp, #44	; 0x2c
  401b2e:	f85d fb04 	ldr.w	pc, [sp], #4
  401b32:	bf00      	nop
  401b34:	00406598 	.word	0x00406598

00401b38 <gDrawAEllipseColour>:
  * @brief
  * @param  None
  * @retval
  */
uint8_t gDrawAEllipseColour( draw_t *p_draw )
{
  401b38:	b500      	push	{lr}
  401b3a:	b08f      	sub	sp, #60	; 0x3c
  401b3c:	9001      	str	r0, [sp, #4]
uint8_t result = 0;
  401b3e:	2300      	movs	r3, #0
  401b40:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
int32_t a2, b2;
int32_t fa2, fb2;
int32_t x0, y0, x, y, sigma;


	x0 = p_draw->x1;
  401b44:	9b01      	ldr	r3, [sp, #4]
  401b46:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  401b4a:	b29b      	uxth	r3, r3
  401b4c:	b21b      	sxth	r3, r3
  401b4e:	9309      	str	r3, [sp, #36]	; 0x24
	y0 = p_draw->y1;
  401b50:	9b01      	ldr	r3, [sp, #4]
  401b52:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  401b56:	b29b      	uxth	r3, r3
  401b58:	b21b      	sxth	r3, r3
  401b5a:	9308      	str	r3, [sp, #32]
	width = p_draw->x2_rx;
  401b5c:	9b01      	ldr	r3, [sp, #4]
  401b5e:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  401b62:	b29b      	uxth	r3, r3
  401b64:	b21b      	sxth	r3, r3
  401b66:	9307      	str	r3, [sp, #28]
	height = p_draw->y2_ry;
  401b68:	9b01      	ldr	r3, [sp, #4]
  401b6a:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  401b6e:	b29b      	uxth	r3, r3
  401b70:	b21b      	sxth	r3, r3
  401b72:	9306      	str	r3, [sp, #24]

	a2 = width * width;
  401b74:	9b07      	ldr	r3, [sp, #28]
  401b76:	9a07      	ldr	r2, [sp, #28]
  401b78:	fb02 f303 	mul.w	r3, r2, r3
  401b7c:	9305      	str	r3, [sp, #20]
	b2 = height * height;
  401b7e:	9b06      	ldr	r3, [sp, #24]
  401b80:	9a06      	ldr	r2, [sp, #24]
  401b82:	fb02 f303 	mul.w	r3, r2, r3
  401b86:	9304      	str	r3, [sp, #16]
	fa2 = 4 * a2;
  401b88:	9b05      	ldr	r3, [sp, #20]
  401b8a:	009b      	lsls	r3, r3, #2
  401b8c:	9303      	str	r3, [sp, #12]
	fb2 = 4 * b2;
  401b8e:	9b04      	ldr	r3, [sp, #16]
  401b90:	009b      	lsls	r3, r3, #2
  401b92:	9302      	str	r3, [sp, #8]

	/* first half */
	for (x = 0, y = height, sigma = 2*b2+a2*(1-2*height); b2*x <= a2*y; x++)
  401b94:	2300      	movs	r3, #0
  401b96:	930c      	str	r3, [sp, #48]	; 0x30
  401b98:	9b06      	ldr	r3, [sp, #24]
  401b9a:	930b      	str	r3, [sp, #44]	; 0x2c
  401b9c:	9b04      	ldr	r3, [sp, #16]
  401b9e:	0059      	lsls	r1, r3, #1
  401ba0:	9a06      	ldr	r2, [sp, #24]
  401ba2:	4613      	mov	r3, r2
  401ba4:	07db      	lsls	r3, r3, #31
  401ba6:	1a9b      	subs	r3, r3, r2
  401ba8:	005b      	lsls	r3, r3, #1
  401baa:	3301      	adds	r3, #1
  401bac:	9a05      	ldr	r2, [sp, #20]
  401bae:	fb02 f303 	mul.w	r3, r2, r3
  401bb2:	440b      	add	r3, r1
  401bb4:	930a      	str	r3, [sp, #40]	; 0x28
  401bb6:	e0fe      	b.n	401db6 <gDrawAEllipseColour+0x27e>
	{
		if( p_draw->type == 0 )
  401bb8:	9b01      	ldr	r3, [sp, #4]
  401bba:	78db      	ldrb	r3, [r3, #3]
  401bbc:	2b00      	cmp	r3, #0
  401bbe:	d177      	bne.n	401cb0 <gDrawAEllipseColour+0x178>
		{
			p_draw->x1 = (int16_t)(x0 + x);
  401bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401bc2:	b29a      	uxth	r2, r3
  401bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401bc6:	b29b      	uxth	r3, r3
  401bc8:	4413      	add	r3, r2
  401bca:	b29b      	uxth	r3, r3
  401bcc:	b29a      	uxth	r2, r3
  401bce:	9b01      	ldr	r3, [sp, #4]
  401bd0:	f8a3 2007 	strh.w	r2, [r3, #7]
			p_draw->y1 = (int16_t)(y0 + y);
  401bd4:	9b08      	ldr	r3, [sp, #32]
  401bd6:	b29a      	uxth	r2, r3
  401bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401bda:	b29b      	uxth	r3, r3
  401bdc:	4413      	add	r3, r2
  401bde:	b29b      	uxth	r3, r3
  401be0:	b29a      	uxth	r2, r3
  401be2:	9b01      	ldr	r3, [sp, #4]
  401be4:	f8a3 2009 	strh.w	r2, [r3, #9]
			result |= sDrawAPixel( p_draw );
  401be8:	9801      	ldr	r0, [sp, #4]
  401bea:	f7ff f883 	bl	400cf4 <sDrawAPixel>
  401bee:	4603      	mov	r3, r0
  401bf0:	461a      	mov	r2, r3
  401bf2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  401bf6:	4313      	orrs	r3, r2
  401bf8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

			p_draw->x1 = (int16_t)(x0 - x);
  401bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401bfe:	b29a      	uxth	r2, r3
  401c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401c02:	b29b      	uxth	r3, r3
  401c04:	1ad3      	subs	r3, r2, r3
  401c06:	b29b      	uxth	r3, r3
  401c08:	b29a      	uxth	r2, r3
  401c0a:	9b01      	ldr	r3, [sp, #4]
  401c0c:	f8a3 2007 	strh.w	r2, [r3, #7]
			p_draw->y1 = (int16_t)(y0 + y);
  401c10:	9b08      	ldr	r3, [sp, #32]
  401c12:	b29a      	uxth	r2, r3
  401c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401c16:	b29b      	uxth	r3, r3
  401c18:	4413      	add	r3, r2
  401c1a:	b29b      	uxth	r3, r3
  401c1c:	b29a      	uxth	r2, r3
  401c1e:	9b01      	ldr	r3, [sp, #4]
  401c20:	f8a3 2009 	strh.w	r2, [r3, #9]
			result |= sDrawAPixel( p_draw );
  401c24:	9801      	ldr	r0, [sp, #4]
  401c26:	f7ff f865 	bl	400cf4 <sDrawAPixel>
  401c2a:	4603      	mov	r3, r0
  401c2c:	461a      	mov	r2, r3
  401c2e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  401c32:	4313      	orrs	r3, r2
  401c34:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

			p_draw->x1 = (int16_t)(x0 + x);
  401c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401c3a:	b29a      	uxth	r2, r3
  401c3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401c3e:	b29b      	uxth	r3, r3
  401c40:	4413      	add	r3, r2
  401c42:	b29b      	uxth	r3, r3
  401c44:	b29a      	uxth	r2, r3
  401c46:	9b01      	ldr	r3, [sp, #4]
  401c48:	f8a3 2007 	strh.w	r2, [r3, #7]
			p_draw->y1 = (int16_t)(y0 - y);
  401c4c:	9b08      	ldr	r3, [sp, #32]
  401c4e:	b29a      	uxth	r2, r3
  401c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401c52:	b29b      	uxth	r3, r3
  401c54:	1ad3      	subs	r3, r2, r3
  401c56:	b29b      	uxth	r3, r3
  401c58:	b29a      	uxth	r2, r3
  401c5a:	9b01      	ldr	r3, [sp, #4]
  401c5c:	f8a3 2009 	strh.w	r2, [r3, #9]
			result |= sDrawAPixel( p_draw );
  401c60:	9801      	ldr	r0, [sp, #4]
  401c62:	f7ff f847 	bl	400cf4 <sDrawAPixel>
  401c66:	4603      	mov	r3, r0
  401c68:	461a      	mov	r2, r3
  401c6a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  401c6e:	4313      	orrs	r3, r2
  401c70:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

			p_draw->x1 = (int16_t)(x0 - x);
  401c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401c76:	b29a      	uxth	r2, r3
  401c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401c7a:	b29b      	uxth	r3, r3
  401c7c:	1ad3      	subs	r3, r2, r3
  401c7e:	b29b      	uxth	r3, r3
  401c80:	b29a      	uxth	r2, r3
  401c82:	9b01      	ldr	r3, [sp, #4]
  401c84:	f8a3 2007 	strh.w	r2, [r3, #7]
			p_draw->y1 = (int16_t)(y0 - y);
  401c88:	9b08      	ldr	r3, [sp, #32]
  401c8a:	b29a      	uxth	r2, r3
  401c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401c8e:	b29b      	uxth	r3, r3
  401c90:	1ad3      	subs	r3, r2, r3
  401c92:	b29b      	uxth	r3, r3
  401c94:	b29a      	uxth	r2, r3
  401c96:	9b01      	ldr	r3, [sp, #4]
  401c98:	f8a3 2009 	strh.w	r2, [r3, #9]
			result |= sDrawAPixel( p_draw );
  401c9c:	9801      	ldr	r0, [sp, #4]
  401c9e:	f7ff f829 	bl	400cf4 <sDrawAPixel>
  401ca2:	4603      	mov	r3, r0
  401ca4:	461a      	mov	r2, r3
  401ca6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  401caa:	4313      	orrs	r3, r2
  401cac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
		}

		if (sigma >= 0)
  401cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401cb2:	2b00      	cmp	r3, #0
  401cb4:	db73      	blt.n	401d9e <gDrawAEllipseColour+0x266>
		{
			if( p_draw->type )				/* if TYPE is "Fill" ... */
  401cb6:	9b01      	ldr	r3, [sp, #4]
  401cb8:	78db      	ldrb	r3, [r3, #3]
  401cba:	2b00      	cmp	r3, #0
  401cbc:	d063      	beq.n	401d86 <gDrawAEllipseColour+0x24e>
			{
				p_draw->x1 		= x0 - x;
  401cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401cc0:	b29a      	uxth	r2, r3
  401cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401cc4:	b29b      	uxth	r3, r3
  401cc6:	1ad3      	subs	r3, r2, r3
  401cc8:	b29b      	uxth	r3, r3
  401cca:	b29a      	uxth	r2, r3
  401ccc:	9b01      	ldr	r3, [sp, #4]
  401cce:	f8a3 2007 	strh.w	r2, [r3, #7]
				p_draw->y1 		= y0 + y;
  401cd2:	9b08      	ldr	r3, [sp, #32]
  401cd4:	b29a      	uxth	r2, r3
  401cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401cd8:	b29b      	uxth	r3, r3
  401cda:	4413      	add	r3, r2
  401cdc:	b29b      	uxth	r3, r3
  401cde:	b29a      	uxth	r2, r3
  401ce0:	9b01      	ldr	r3, [sp, #4]
  401ce2:	f8a3 2009 	strh.w	r2, [r3, #9]
				p_draw->x2_rx	= x0 + x;
  401ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401ce8:	b29a      	uxth	r2, r3
  401cea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401cec:	b29b      	uxth	r3, r3
  401cee:	4413      	add	r3, r2
  401cf0:	b29b      	uxth	r3, r3
  401cf2:	b29a      	uxth	r2, r3
  401cf4:	9b01      	ldr	r3, [sp, #4]
  401cf6:	f8a3 200b 	strh.w	r2, [r3, #11]
				p_draw->y2_ry	= y0 + y;
  401cfa:	9b08      	ldr	r3, [sp, #32]
  401cfc:	b29a      	uxth	r2, r3
  401cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401d00:	b29b      	uxth	r3, r3
  401d02:	4413      	add	r3, r2
  401d04:	b29b      	uxth	r3, r3
  401d06:	b29a      	uxth	r2, r3
  401d08:	9b01      	ldr	r3, [sp, #4]
  401d0a:	f8a3 200d 	strh.w	r2, [r3, #13]
				result |= gDrawALineColour( p_draw );
  401d0e:	9801      	ldr	r0, [sp, #4]
  401d10:	f7ff fb2a 	bl	401368 <gDrawALineColour>
  401d14:	4603      	mov	r3, r0
  401d16:	461a      	mov	r2, r3
  401d18:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  401d1c:	4313      	orrs	r3, r2
  401d1e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

				p_draw->x1 		= x0 - x;
  401d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d24:	b29a      	uxth	r2, r3
  401d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401d28:	b29b      	uxth	r3, r3
  401d2a:	1ad3      	subs	r3, r2, r3
  401d2c:	b29b      	uxth	r3, r3
  401d2e:	b29a      	uxth	r2, r3
  401d30:	9b01      	ldr	r3, [sp, #4]
  401d32:	f8a3 2007 	strh.w	r2, [r3, #7]
				p_draw->y1 		= y0 - y;
  401d36:	9b08      	ldr	r3, [sp, #32]
  401d38:	b29a      	uxth	r2, r3
  401d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401d3c:	b29b      	uxth	r3, r3
  401d3e:	1ad3      	subs	r3, r2, r3
  401d40:	b29b      	uxth	r3, r3
  401d42:	b29a      	uxth	r2, r3
  401d44:	9b01      	ldr	r3, [sp, #4]
  401d46:	f8a3 2009 	strh.w	r2, [r3, #9]
				p_draw->x2_rx	= x0 + x;
  401d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d4c:	b29a      	uxth	r2, r3
  401d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401d50:	b29b      	uxth	r3, r3
  401d52:	4413      	add	r3, r2
  401d54:	b29b      	uxth	r3, r3
  401d56:	b29a      	uxth	r2, r3
  401d58:	9b01      	ldr	r3, [sp, #4]
  401d5a:	f8a3 200b 	strh.w	r2, [r3, #11]
				p_draw->y2_ry	= y0 - y;
  401d5e:	9b08      	ldr	r3, [sp, #32]
  401d60:	b29a      	uxth	r2, r3
  401d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401d64:	b29b      	uxth	r3, r3
  401d66:	1ad3      	subs	r3, r2, r3
  401d68:	b29b      	uxth	r3, r3
  401d6a:	b29a      	uxth	r2, r3
  401d6c:	9b01      	ldr	r3, [sp, #4]
  401d6e:	f8a3 200d 	strh.w	r2, [r3, #13]
				result |= gDrawALineColour( p_draw );
  401d72:	9801      	ldr	r0, [sp, #4]
  401d74:	f7ff faf8 	bl	401368 <gDrawALineColour>
  401d78:	4603      	mov	r3, r0
  401d7a:	461a      	mov	r2, r3
  401d7c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  401d80:	4313      	orrs	r3, r2
  401d82:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
			}
			sigma += fa2 * (1 - y);
  401d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401d88:	f1c3 0301 	rsb	r3, r3, #1
  401d8c:	9a03      	ldr	r2, [sp, #12]
  401d8e:	fb02 f303 	mul.w	r3, r2, r3
  401d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401d94:	4413      	add	r3, r2
  401d96:	930a      	str	r3, [sp, #40]	; 0x28
			y--;
  401d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401d9a:	3b01      	subs	r3, #1
  401d9c:	930b      	str	r3, [sp, #44]	; 0x2c
		}
		sigma += b2 * ((4 * x) + 6);
  401d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401da0:	009b      	lsls	r3, r3, #2
  401da2:	3306      	adds	r3, #6
  401da4:	9a04      	ldr	r2, [sp, #16]
  401da6:	fb02 f303 	mul.w	r3, r2, r3
  401daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401dac:	4413      	add	r3, r2
  401dae:	930a      	str	r3, [sp, #40]	; 0x28
	b2 = height * height;
	fa2 = 4 * a2;
	fb2 = 4 * b2;

	/* first half */
	for (x = 0, y = height, sigma = 2*b2+a2*(1-2*height); b2*x <= a2*y; x++)
  401db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401db2:	3301      	adds	r3, #1
  401db4:	930c      	str	r3, [sp, #48]	; 0x30
  401db6:	9b04      	ldr	r3, [sp, #16]
  401db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401dba:	fb02 f203 	mul.w	r2, r2, r3
  401dbe:	9b05      	ldr	r3, [sp, #20]
  401dc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401dc2:	fb01 f303 	mul.w	r3, r1, r3
  401dc6:	429a      	cmp	r2, r3
  401dc8:	f77f aef6 	ble.w	401bb8 <gDrawAEllipseColour+0x80>
		}
		sigma += b2 * ((4 * x) + 6);
	}

	/* second half */
	for (x = width, y = 0, sigma = 2*a2+b2*(1-2*width); a2*y <= b2*x; y++)
  401dcc:	9b07      	ldr	r3, [sp, #28]
  401dce:	930c      	str	r3, [sp, #48]	; 0x30
  401dd0:	2300      	movs	r3, #0
  401dd2:	930b      	str	r3, [sp, #44]	; 0x2c
  401dd4:	9b05      	ldr	r3, [sp, #20]
  401dd6:	0059      	lsls	r1, r3, #1
  401dd8:	9a07      	ldr	r2, [sp, #28]
  401dda:	4613      	mov	r3, r2
  401ddc:	07db      	lsls	r3, r3, #31
  401dde:	1a9b      	subs	r3, r3, r2
  401de0:	005b      	lsls	r3, r3, #1
  401de2:	3301      	adds	r3, #1
  401de4:	9a04      	ldr	r2, [sp, #16]
  401de6:	fb02 f303 	mul.w	r3, r2, r3
  401dea:	440b      	add	r3, r1
  401dec:	930a      	str	r3, [sp, #40]	; 0x28
  401dee:	e0fb      	b.n	401fe8 <gDrawAEllipseColour+0x4b0>
	{
		if( p_draw->type == 0 )
  401df0:	9b01      	ldr	r3, [sp, #4]
  401df2:	78db      	ldrb	r3, [r3, #3]
  401df4:	2b00      	cmp	r3, #0
  401df6:	d178      	bne.n	401eea <gDrawAEllipseColour+0x3b2>
		{
			p_draw->x1 = (int16_t)(x0 + x);
  401df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401dfa:	b29a      	uxth	r2, r3
  401dfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401dfe:	b29b      	uxth	r3, r3
  401e00:	4413      	add	r3, r2
  401e02:	b29b      	uxth	r3, r3
  401e04:	b29a      	uxth	r2, r3
  401e06:	9b01      	ldr	r3, [sp, #4]
  401e08:	f8a3 2007 	strh.w	r2, [r3, #7]
			p_draw->y1 = (int16_t)(y0 + y);
  401e0c:	9b08      	ldr	r3, [sp, #32]
  401e0e:	b29a      	uxth	r2, r3
  401e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401e12:	b29b      	uxth	r3, r3
  401e14:	4413      	add	r3, r2
  401e16:	b29b      	uxth	r3, r3
  401e18:	b29a      	uxth	r2, r3
  401e1a:	9b01      	ldr	r3, [sp, #4]
  401e1c:	f8a3 2009 	strh.w	r2, [r3, #9]
			result |= sDrawAPixel( p_draw );
  401e20:	9801      	ldr	r0, [sp, #4]
  401e22:	f7fe ff67 	bl	400cf4 <sDrawAPixel>
  401e26:	4603      	mov	r3, r0
  401e28:	461a      	mov	r2, r3
  401e2a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  401e2e:	4313      	orrs	r3, r2
  401e30:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

			p_draw->x1 = (int16_t)(x0 - x);
  401e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e36:	b29a      	uxth	r2, r3
  401e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401e3a:	b29b      	uxth	r3, r3
  401e3c:	1ad3      	subs	r3, r2, r3
  401e3e:	b29b      	uxth	r3, r3
  401e40:	b29a      	uxth	r2, r3
  401e42:	9b01      	ldr	r3, [sp, #4]
  401e44:	f8a3 2007 	strh.w	r2, [r3, #7]
			p_draw->y1 = (int16_t)(y0 + y);
  401e48:	9b08      	ldr	r3, [sp, #32]
  401e4a:	b29a      	uxth	r2, r3
  401e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401e4e:	b29b      	uxth	r3, r3
  401e50:	4413      	add	r3, r2
  401e52:	b29b      	uxth	r3, r3
  401e54:	b29a      	uxth	r2, r3
  401e56:	9b01      	ldr	r3, [sp, #4]
  401e58:	f8a3 2009 	strh.w	r2, [r3, #9]
			result |= sDrawAPixel( p_draw );
  401e5c:	9801      	ldr	r0, [sp, #4]
  401e5e:	f7fe ff49 	bl	400cf4 <sDrawAPixel>
  401e62:	4603      	mov	r3, r0
  401e64:	461a      	mov	r2, r3
  401e66:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  401e6a:	4313      	orrs	r3, r2
  401e6c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

			p_draw->x1 = (int16_t)(x0 + x);
  401e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e72:	b29a      	uxth	r2, r3
  401e74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401e76:	b29b      	uxth	r3, r3
  401e78:	4413      	add	r3, r2
  401e7a:	b29b      	uxth	r3, r3
  401e7c:	b29a      	uxth	r2, r3
  401e7e:	9b01      	ldr	r3, [sp, #4]
  401e80:	f8a3 2007 	strh.w	r2, [r3, #7]
			p_draw->y1 = (int16_t)(y0 - y);
  401e84:	9b08      	ldr	r3, [sp, #32]
  401e86:	b29a      	uxth	r2, r3
  401e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401e8a:	b29b      	uxth	r3, r3
  401e8c:	1ad3      	subs	r3, r2, r3
  401e8e:	b29b      	uxth	r3, r3
  401e90:	b29a      	uxth	r2, r3
  401e92:	9b01      	ldr	r3, [sp, #4]
  401e94:	f8a3 2009 	strh.w	r2, [r3, #9]
			result |= sDrawAPixel( p_draw );
  401e98:	9801      	ldr	r0, [sp, #4]
  401e9a:	f7fe ff2b 	bl	400cf4 <sDrawAPixel>
  401e9e:	4603      	mov	r3, r0
  401ea0:	461a      	mov	r2, r3
  401ea2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  401ea6:	4313      	orrs	r3, r2
  401ea8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

			p_draw->x1 = (int16_t)(x0 - x);
  401eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401eae:	b29a      	uxth	r2, r3
  401eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401eb2:	b29b      	uxth	r3, r3
  401eb4:	1ad3      	subs	r3, r2, r3
  401eb6:	b29b      	uxth	r3, r3
  401eb8:	b29a      	uxth	r2, r3
  401eba:	9b01      	ldr	r3, [sp, #4]
  401ebc:	f8a3 2007 	strh.w	r2, [r3, #7]
			p_draw->y1 = (int16_t)(y0 - y);
  401ec0:	9b08      	ldr	r3, [sp, #32]
  401ec2:	b29a      	uxth	r2, r3
  401ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401ec6:	b29b      	uxth	r3, r3
  401ec8:	1ad3      	subs	r3, r2, r3
  401eca:	b29b      	uxth	r3, r3
  401ecc:	b29a      	uxth	r2, r3
  401ece:	9b01      	ldr	r3, [sp, #4]
  401ed0:	f8a3 2009 	strh.w	r2, [r3, #9]
			result |= sDrawAPixel( p_draw );
  401ed4:	9801      	ldr	r0, [sp, #4]
  401ed6:	f7fe ff0d 	bl	400cf4 <sDrawAPixel>
  401eda:	4603      	mov	r3, r0
  401edc:	461a      	mov	r2, r3
  401ede:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  401ee2:	4313      	orrs	r3, r2
  401ee4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401ee8:	e063      	b.n	401fb2 <gDrawAEllipseColour+0x47a>
		}
		else				/* if TYPE is "Fill" ... */
		{
			p_draw->x1 		= x0 - x;
  401eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401eec:	b29a      	uxth	r2, r3
  401eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401ef0:	b29b      	uxth	r3, r3
  401ef2:	1ad3      	subs	r3, r2, r3
  401ef4:	b29b      	uxth	r3, r3
  401ef6:	b29a      	uxth	r2, r3
  401ef8:	9b01      	ldr	r3, [sp, #4]
  401efa:	f8a3 2007 	strh.w	r2, [r3, #7]
			p_draw->y1 		= y0 + y;
  401efe:	9b08      	ldr	r3, [sp, #32]
  401f00:	b29a      	uxth	r2, r3
  401f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401f04:	b29b      	uxth	r3, r3
  401f06:	4413      	add	r3, r2
  401f08:	b29b      	uxth	r3, r3
  401f0a:	b29a      	uxth	r2, r3
  401f0c:	9b01      	ldr	r3, [sp, #4]
  401f0e:	f8a3 2009 	strh.w	r2, [r3, #9]
			p_draw->x2_rx	= x0 + x;
  401f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f14:	b29a      	uxth	r2, r3
  401f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401f18:	b29b      	uxth	r3, r3
  401f1a:	4413      	add	r3, r2
  401f1c:	b29b      	uxth	r3, r3
  401f1e:	b29a      	uxth	r2, r3
  401f20:	9b01      	ldr	r3, [sp, #4]
  401f22:	f8a3 200b 	strh.w	r2, [r3, #11]
			p_draw->y2_ry	= y0 + y;
  401f26:	9b08      	ldr	r3, [sp, #32]
  401f28:	b29a      	uxth	r2, r3
  401f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401f2c:	b29b      	uxth	r3, r3
  401f2e:	4413      	add	r3, r2
  401f30:	b29b      	uxth	r3, r3
  401f32:	b29a      	uxth	r2, r3
  401f34:	9b01      	ldr	r3, [sp, #4]
  401f36:	f8a3 200d 	strh.w	r2, [r3, #13]
			result |= gDrawALineColour( p_draw );
  401f3a:	9801      	ldr	r0, [sp, #4]
  401f3c:	f7ff fa14 	bl	401368 <gDrawALineColour>
  401f40:	4603      	mov	r3, r0
  401f42:	461a      	mov	r2, r3
  401f44:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  401f48:	4313      	orrs	r3, r2
  401f4a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

			p_draw->x1 		= x0 - x;
  401f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f50:	b29a      	uxth	r2, r3
  401f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401f54:	b29b      	uxth	r3, r3
  401f56:	1ad3      	subs	r3, r2, r3
  401f58:	b29b      	uxth	r3, r3
  401f5a:	b29a      	uxth	r2, r3
  401f5c:	9b01      	ldr	r3, [sp, #4]
  401f5e:	f8a3 2007 	strh.w	r2, [r3, #7]
			p_draw->y1 		= y0 - y;
  401f62:	9b08      	ldr	r3, [sp, #32]
  401f64:	b29a      	uxth	r2, r3
  401f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401f68:	b29b      	uxth	r3, r3
  401f6a:	1ad3      	subs	r3, r2, r3
  401f6c:	b29b      	uxth	r3, r3
  401f6e:	b29a      	uxth	r2, r3
  401f70:	9b01      	ldr	r3, [sp, #4]
  401f72:	f8a3 2009 	strh.w	r2, [r3, #9]
			p_draw->x2_rx	= x0 + x;
  401f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f78:	b29a      	uxth	r2, r3
  401f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401f7c:	b29b      	uxth	r3, r3
  401f7e:	4413      	add	r3, r2
  401f80:	b29b      	uxth	r3, r3
  401f82:	b29a      	uxth	r2, r3
  401f84:	9b01      	ldr	r3, [sp, #4]
  401f86:	f8a3 200b 	strh.w	r2, [r3, #11]
			p_draw->y2_ry	= y0 - y;
  401f8a:	9b08      	ldr	r3, [sp, #32]
  401f8c:	b29a      	uxth	r2, r3
  401f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401f90:	b29b      	uxth	r3, r3
  401f92:	1ad3      	subs	r3, r2, r3
  401f94:	b29b      	uxth	r3, r3
  401f96:	b29a      	uxth	r2, r3
  401f98:	9b01      	ldr	r3, [sp, #4]
  401f9a:	f8a3 200d 	strh.w	r2, [r3, #13]
			result |= gDrawALineColour( p_draw );
  401f9e:	9801      	ldr	r0, [sp, #4]
  401fa0:	f7ff f9e2 	bl	401368 <gDrawALineColour>
  401fa4:	4603      	mov	r3, r0
  401fa6:	461a      	mov	r2, r3
  401fa8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  401fac:	4313      	orrs	r3, r2
  401fae:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
		}

		if (sigma >= 0)
  401fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401fb4:	2b00      	cmp	r3, #0
  401fb6:	db0b      	blt.n	401fd0 <gDrawAEllipseColour+0x498>
		{
			sigma += fb2 * (1 - x);
  401fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401fba:	f1c3 0301 	rsb	r3, r3, #1
  401fbe:	9a02      	ldr	r2, [sp, #8]
  401fc0:	fb02 f303 	mul.w	r3, r2, r3
  401fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401fc6:	4413      	add	r3, r2
  401fc8:	930a      	str	r3, [sp, #40]	; 0x28
			x--;
  401fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401fcc:	3b01      	subs	r3, #1
  401fce:	930c      	str	r3, [sp, #48]	; 0x30
		}
		sigma += a2 * ((4 * y) + 6);
  401fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401fd2:	009b      	lsls	r3, r3, #2
  401fd4:	3306      	adds	r3, #6
  401fd6:	9a05      	ldr	r2, [sp, #20]
  401fd8:	fb02 f303 	mul.w	r3, r2, r3
  401fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401fde:	4413      	add	r3, r2
  401fe0:	930a      	str	r3, [sp, #40]	; 0x28
		}
		sigma += b2 * ((4 * x) + 6);
	}

	/* second half */
	for (x = width, y = 0, sigma = 2*a2+b2*(1-2*width); a2*y <= b2*x; y++)
  401fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401fe4:	3301      	adds	r3, #1
  401fe6:	930b      	str	r3, [sp, #44]	; 0x2c
  401fe8:	9b05      	ldr	r3, [sp, #20]
  401fea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401fec:	fb02 f203 	mul.w	r2, r2, r3
  401ff0:	9b04      	ldr	r3, [sp, #16]
  401ff2:	990c      	ldr	r1, [sp, #48]	; 0x30
  401ff4:	fb01 f303 	mul.w	r3, r1, r3
  401ff8:	429a      	cmp	r2, r3
  401ffa:	f77f aef9 	ble.w	401df0 <gDrawAEllipseColour+0x2b8>
			x--;
		}
		sigma += a2 * ((4 * y) + 6);
	}

	return(result);
  401ffe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
}
  402002:	4618      	mov	r0, r3
  402004:	b00f      	add	sp, #60	; 0x3c
  402006:	f85d fb04 	ldr.w	pc, [sp], #4
  40200a:	bf00      	nop

0040200c <gSetADrawFrame>:
  * @brief
  * @param  None
  * @retval
  */
uint8_t gSetADrawFrame( draw_t *p_draw )
{
  40200c:	b084      	sub	sp, #16
  40200e:	9001      	str	r0, [sp, #4]
uint16_t x1_coordinate, y1_coordinate, x2_coordinate, y2_coordinate;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
  402010:	9b01      	ldr	r3, [sp, #4]
  402012:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  402016:	b29b      	uxth	r3, r3
  402018:	b21b      	sxth	r3, r3
  40201a:	2b00      	cmp	r3, #0
  40201c:	db34      	blt.n	402088 <gSetADrawFrame+0x7c>
  40201e:	9b01      	ldr	r3, [sp, #4]
  402020:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  402024:	b29b      	uxth	r3, r3
  402026:	b21b      	sxth	r3, r3
  402028:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  40202c:	dc2c      	bgt.n	402088 <gSetADrawFrame+0x7c>
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  40202e:	9b01      	ldr	r3, [sp, #4]
  402030:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  402034:	b29b      	uxth	r3, r3
uint8_t gSetADrawFrame( draw_t *p_draw )
{
uint16_t x1_coordinate, y1_coordinate, x2_coordinate, y2_coordinate;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
  402036:	b21b      	sxth	r3, r3
  402038:	2b00      	cmp	r3, #0
  40203a:	db25      	blt.n	402088 <gSetADrawFrame+0x7c>
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  40203c:	9b01      	ldr	r3, [sp, #4]
  40203e:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  402042:	b29b      	uxth	r3, r3
  402044:	b21b      	sxth	r3, r3
  402046:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  40204a:	dc1d      	bgt.n	402088 <gSetADrawFrame+0x7c>
			(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  40204c:	9b01      	ldr	r3, [sp, #4]
  40204e:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  402052:	b29b      	uxth	r3, r3
{
uint16_t x1_coordinate, y1_coordinate, x2_coordinate, y2_coordinate;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
  402054:	b21b      	sxth	r3, r3
  402056:	2b00      	cmp	r3, #0
  402058:	db16      	blt.n	402088 <gSetADrawFrame+0x7c>
			(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  40205a:	9b01      	ldr	r3, [sp, #4]
  40205c:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  402060:	b29b      	uxth	r3, r3
  402062:	b21b      	sxth	r3, r3
  402064:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  402068:	dc0e      	bgt.n	402088 <gSetADrawFrame+0x7c>
			(p_draw->y2_ry < 0) || (p_draw->y2_ry > V_LINE_SIZE) )
  40206a:	9b01      	ldr	r3, [sp, #4]
  40206c:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  402070:	b29b      	uxth	r3, r3
uint16_t x1_coordinate, y1_coordinate, x2_coordinate, y2_coordinate;


	if( (p_draw->x1 < 0) || (p_draw->x1 > H_LINE_SIZE) ||
			(p_draw->x2_rx < 0) || (p_draw->x2_rx > H_LINE_SIZE) ||
			(p_draw->y1 < 0) || (p_draw->y1 > V_LINE_SIZE) ||
  402072:	b21b      	sxth	r3, r3
  402074:	2b00      	cmp	r3, #0
  402076:	db07      	blt.n	402088 <gSetADrawFrame+0x7c>
			(p_draw->y2_ry < 0) || (p_draw->y2_ry > V_LINE_SIZE) )
  402078:	9b01      	ldr	r3, [sp, #4]
  40207a:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  40207e:	b29b      	uxth	r3, r3
  402080:	b21b      	sxth	r3, r3
  402082:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
  402086:	dd01      	ble.n	40208c <gSetADrawFrame+0x80>
	{
		return(1);
  402088:	2301      	movs	r3, #1
  40208a:	e046      	b.n	40211a <gSetADrawFrame+0x10e>
	}
	x1_coordinate = (uint16_t)p_draw->x1;
  40208c:	9b01      	ldr	r3, [sp, #4]
  40208e:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
  402092:	b29b      	uxth	r3, r3
  402094:	f8ad 300e 	strh.w	r3, [sp, #14]
	y1_coordinate = (uint16_t)p_draw->y1;
  402098:	9b01      	ldr	r3, [sp, #4]
  40209a:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
  40209e:	b29b      	uxth	r3, r3
  4020a0:	f8ad 300c 	strh.w	r3, [sp, #12]
	x2_coordinate = (uint16_t)p_draw->x2_rx;
  4020a4:	9b01      	ldr	r3, [sp, #4]
  4020a6:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
  4020aa:	b29b      	uxth	r3, r3
  4020ac:	f8ad 300a 	strh.w	r3, [sp, #10]
	y2_coordinate = (uint16_t)p_draw->y2_ry;
  4020b0:	9b01      	ldr	r3, [sp, #4]
  4020b2:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
  4020b6:	b29b      	uxth	r3, r3
  4020b8:	f8ad 3008 	strh.w	r3, [sp, #8]

	if( x1_coordinate > x2_coordinate )
  4020bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  4020c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  4020c4:	429a      	cmp	r2, r3
  4020c6:	d908      	bls.n	4020da <gSetADrawFrame+0xce>
	{
		windowframe.x2 = x1_coordinate;
  4020c8:	4b15      	ldr	r3, [pc, #84]	; (402120 <gSetADrawFrame+0x114>)
  4020ca:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  4020ce:	809a      	strh	r2, [r3, #4]
		windowframe.x1 = x2_coordinate;
  4020d0:	4b13      	ldr	r3, [pc, #76]	; (402120 <gSetADrawFrame+0x114>)
  4020d2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  4020d6:	801a      	strh	r2, [r3, #0]
  4020d8:	e007      	b.n	4020ea <gSetADrawFrame+0xde>
	}
	else
	{
		windowframe.x1 = x1_coordinate;
  4020da:	4b11      	ldr	r3, [pc, #68]	; (402120 <gSetADrawFrame+0x114>)
  4020dc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  4020e0:	801a      	strh	r2, [r3, #0]
		windowframe.x2 = x2_coordinate;
  4020e2:	4b0f      	ldr	r3, [pc, #60]	; (402120 <gSetADrawFrame+0x114>)
  4020e4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  4020e8:	809a      	strh	r2, [r3, #4]
	}

	if( y1_coordinate > y2_coordinate )
  4020ea:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4020ee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  4020f2:	429a      	cmp	r2, r3
  4020f4:	d908      	bls.n	402108 <gSetADrawFrame+0xfc>
	{
		windowframe.y2 = y1_coordinate;
  4020f6:	4b0a      	ldr	r3, [pc, #40]	; (402120 <gSetADrawFrame+0x114>)
  4020f8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4020fc:	80da      	strh	r2, [r3, #6]
		windowframe.y1 = y2_coordinate;
  4020fe:	4b08      	ldr	r3, [pc, #32]	; (402120 <gSetADrawFrame+0x114>)
  402100:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  402104:	805a      	strh	r2, [r3, #2]
  402106:	e007      	b.n	402118 <gSetADrawFrame+0x10c>
	}
	else
	{
		windowframe.y1 = y1_coordinate;
  402108:	4b05      	ldr	r3, [pc, #20]	; (402120 <gSetADrawFrame+0x114>)
  40210a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40210e:	805a      	strh	r2, [r3, #2]
		windowframe.y2 = y2_coordinate;
  402110:	4b03      	ldr	r3, [pc, #12]	; (402120 <gSetADrawFrame+0x114>)
  402112:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  402116:	80da      	strh	r2, [r3, #6]
	}
	return(0);
  402118:	2300      	movs	r3, #0
}
  40211a:	4618      	mov	r0, r3
  40211c:	b004      	add	sp, #16
  40211e:	4770      	bx	lr
  402120:	20000084 	.word	0x20000084

00402124 <SystemCoreClockUpdate>:
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  402124:	4b5e      	ldr	r3, [pc, #376]	; (4022a0 <SystemCoreClockUpdate+0x17c>)
  402126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402128:	f003 0303 	and.w	r3, r3, #3
  40212c:	2b03      	cmp	r3, #3
  40212e:	f200 809c 	bhi.w	40226a <SystemCoreClockUpdate+0x146>
  402132:	a101      	add	r1, pc, #4	; (adr r1, 402138 <SystemCoreClockUpdate+0x14>)
  402134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  402138:	00402149 	.word	0x00402149
  40213c:	00402169 	.word	0x00402169
  402140:	004021b9 	.word	0x004021b9
  402144:	004021b9 	.word	0x004021b9
  case PMC_MCKR_CSS_SLOW_CLK:  /* Slow clock */
    if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  402148:	4b56      	ldr	r3, [pc, #344]	; (4022a4 <SystemCoreClockUpdate+0x180>)
  40214a:	695b      	ldr	r3, [r3, #20]
  40214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402150:	2b00      	cmp	r3, #0
  402152:	d004      	beq.n	40215e <SystemCoreClockUpdate+0x3a>
      SystemCoreClock = XTAL32;
  402154:	4b54      	ldr	r3, [pc, #336]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  402156:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40215a:	601a      	str	r2, [r3, #0]
    } else {
      SystemCoreClock = CHIP_FREQ_SLCK_RC;
    }
    break;
  40215c:	e086      	b.n	40226c <SystemCoreClockUpdate+0x148>
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  case PMC_MCKR_CSS_SLOW_CLK:  /* Slow clock */
    if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
      SystemCoreClock = XTAL32;
    } else {
      SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40215e:	4b52      	ldr	r3, [pc, #328]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  402160:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402164:	601a      	str	r2, [r3, #0]
    }
    break;
  402166:	e081      	b.n	40226c <SystemCoreClockUpdate+0x148>
  case PMC_MCKR_CSS_MAIN_CLK:  /* Main clock */
    if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  402168:	4b4d      	ldr	r3, [pc, #308]	; (4022a0 <SystemCoreClockUpdate+0x17c>)
  40216a:	6a1b      	ldr	r3, [r3, #32]
  40216c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402170:	2b00      	cmp	r3, #0
  402172:	d003      	beq.n	40217c <SystemCoreClockUpdate+0x58>
      SystemCoreClock = XTAL;
  402174:	4b4c      	ldr	r3, [pc, #304]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  402176:	4a4d      	ldr	r2, [pc, #308]	; (4022ac <SystemCoreClockUpdate+0x188>)
  402178:	601a      	str	r2, [r3, #0]
  40217a:	e01c      	b.n	4021b6 <SystemCoreClockUpdate+0x92>
    } else {
      SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40217c:	4b4a      	ldr	r3, [pc, #296]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  40217e:	4a4c      	ldr	r2, [pc, #304]	; (4022b0 <SystemCoreClockUpdate+0x18c>)
  402180:	601a      	str	r2, [r3, #0]

      switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  402182:	4b47      	ldr	r3, [pc, #284]	; (4022a0 <SystemCoreClockUpdate+0x17c>)
  402184:	6a1b      	ldr	r3, [r3, #32]
  402186:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40218a:	2b10      	cmp	r3, #16
  40218c:	d004      	beq.n	402198 <SystemCoreClockUpdate+0x74>
  40218e:	2b20      	cmp	r3, #32
  402190:	d008      	beq.n	4021a4 <SystemCoreClockUpdate+0x80>
  402192:	2b00      	cmp	r3, #0
  402194:	d00e      	beq.n	4021b4 <SystemCoreClockUpdate+0x90>
        break;
      case CKGR_MOR_MOSCRCF_12_MHz:
        SystemCoreClock *= 3U;
        break;
      default:
        break;
  402196:	e00e      	b.n	4021b6 <SystemCoreClockUpdate+0x92>

      switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
      case CKGR_MOR_MOSCRCF_4_MHz:
        break;
      case CKGR_MOR_MOSCRCF_8_MHz:
        SystemCoreClock *= 2U;
  402198:	4b43      	ldr	r3, [pc, #268]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  40219a:	681b      	ldr	r3, [r3, #0]
  40219c:	005a      	lsls	r2, r3, #1
  40219e:	4b42      	ldr	r3, [pc, #264]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  4021a0:	601a      	str	r2, [r3, #0]
        break;
  4021a2:	e008      	b.n	4021b6 <SystemCoreClockUpdate+0x92>
      case CKGR_MOR_MOSCRCF_12_MHz:
        SystemCoreClock *= 3U;
  4021a4:	4b40      	ldr	r3, [pc, #256]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  4021a6:	681a      	ldr	r2, [r3, #0]
  4021a8:	4613      	mov	r3, r2
  4021aa:	005b      	lsls	r3, r3, #1
  4021ac:	441a      	add	r2, r3
  4021ae:	4b3e      	ldr	r3, [pc, #248]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  4021b0:	601a      	str	r2, [r3, #0]
        break;
  4021b2:	e000      	b.n	4021b6 <SystemCoreClockUpdate+0x92>
    } else {
      SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

      switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
      case CKGR_MOR_MOSCRCF_4_MHz:
        break;
  4021b4:	bf00      	nop
        break;
      default:
        break;
      }
    }
    break;
  4021b6:	e059      	b.n	40226c <SystemCoreClockUpdate+0x148>
  case PMC_MCKR_CSS_PLLA_CLK:  /* PLLA clock */
  case PMC_MCKR_CSS_PLLB_CLK:  /* PLLB clock */
    if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4021b8:	4b39      	ldr	r3, [pc, #228]	; (4022a0 <SystemCoreClockUpdate+0x17c>)
  4021ba:	6a1b      	ldr	r3, [r3, #32]
  4021bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4021c0:	2b00      	cmp	r3, #0
  4021c2:	d003      	beq.n	4021cc <SystemCoreClockUpdate+0xa8>
      SystemCoreClock = XTAL;
  4021c4:	4b38      	ldr	r3, [pc, #224]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  4021c6:	4a39      	ldr	r2, [pc, #228]	; (4022ac <SystemCoreClockUpdate+0x188>)
  4021c8:	601a      	str	r2, [r3, #0]
  4021ca:	e01c      	b.n	402206 <SystemCoreClockUpdate+0xe2>
    } else {
      SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4021cc:	4b36      	ldr	r3, [pc, #216]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  4021ce:	4a38      	ldr	r2, [pc, #224]	; (4022b0 <SystemCoreClockUpdate+0x18c>)
  4021d0:	601a      	str	r2, [r3, #0]

      switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4021d2:	4b33      	ldr	r3, [pc, #204]	; (4022a0 <SystemCoreClockUpdate+0x17c>)
  4021d4:	6a1b      	ldr	r3, [r3, #32]
  4021d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021da:	2b10      	cmp	r3, #16
  4021dc:	d004      	beq.n	4021e8 <SystemCoreClockUpdate+0xc4>
  4021de:	2b20      	cmp	r3, #32
  4021e0:	d008      	beq.n	4021f4 <SystemCoreClockUpdate+0xd0>
  4021e2:	2b00      	cmp	r3, #0
  4021e4:	d00e      	beq.n	402204 <SystemCoreClockUpdate+0xe0>
        break;
      case CKGR_MOR_MOSCRCF_12_MHz:
        SystemCoreClock *= 3U;
        break;
      default:
        break;
  4021e6:	e00e      	b.n	402206 <SystemCoreClockUpdate+0xe2>

      switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
      case CKGR_MOR_MOSCRCF_4_MHz:
        break;
      case CKGR_MOR_MOSCRCF_8_MHz:
        SystemCoreClock *= 2U;
  4021e8:	4b2f      	ldr	r3, [pc, #188]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  4021ea:	681b      	ldr	r3, [r3, #0]
  4021ec:	005a      	lsls	r2, r3, #1
  4021ee:	4b2e      	ldr	r3, [pc, #184]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  4021f0:	601a      	str	r2, [r3, #0]
        break;
  4021f2:	e008      	b.n	402206 <SystemCoreClockUpdate+0xe2>
      case CKGR_MOR_MOSCRCF_12_MHz:
        SystemCoreClock *= 3U;
  4021f4:	4b2c      	ldr	r3, [pc, #176]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  4021f6:	681a      	ldr	r2, [r3, #0]
  4021f8:	4613      	mov	r3, r2
  4021fa:	005b      	lsls	r3, r3, #1
  4021fc:	441a      	add	r2, r3
  4021fe:	4b2a      	ldr	r3, [pc, #168]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  402200:	601a      	str	r2, [r3, #0]
        break;
  402202:	e000      	b.n	402206 <SystemCoreClockUpdate+0xe2>
    } else {
      SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

      switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
      case CKGR_MOR_MOSCRCF_4_MHz:
        break;
  402204:	bf00      	nop
        break;
      default:
        break;
      }
    }
    if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  402206:	4b26      	ldr	r3, [pc, #152]	; (4022a0 <SystemCoreClockUpdate+0x17c>)
  402208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40220a:	f003 0303 	and.w	r3, r3, #3
  40220e:	2b02      	cmp	r3, #2
  402210:	d115      	bne.n	40223e <SystemCoreClockUpdate+0x11a>
      SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >>
  402212:	4b23      	ldr	r3, [pc, #140]	; (4022a0 <SystemCoreClockUpdate+0x17c>)
  402214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402216:	4b27      	ldr	r3, [pc, #156]	; (4022b4 <SystemCoreClockUpdate+0x190>)
  402218:	4013      	ands	r3, r2
  40221a:	0c1b      	lsrs	r3, r3, #16
                                  CKGR_PLLAR_MULA_Pos) + 1U);
  40221c:	3301      	adds	r3, #1
      default:
        break;
      }
    }
    if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
      SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >>
  40221e:	4a22      	ldr	r2, [pc, #136]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  402220:	6812      	ldr	r2, [r2, #0]
  402222:	fb02 f203 	mul.w	r2, r2, r3
  402226:	4b20      	ldr	r3, [pc, #128]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  402228:	601a      	str	r2, [r3, #0]
                                  CKGR_PLLAR_MULA_Pos) + 1U);
      SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
  40222a:	4b1f      	ldr	r3, [pc, #124]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  40222c:	681a      	ldr	r2, [r3, #0]
  40222e:	4b1c      	ldr	r3, [pc, #112]	; (4022a0 <SystemCoreClockUpdate+0x17c>)
  402230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402232:	b2db      	uxtb	r3, r3
  402234:	fbb2 f2f3 	udiv	r2, r2, r3
  402238:	4b1b      	ldr	r3, [pc, #108]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  40223a:	601a      	str	r2, [r3, #0]
      SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >>
                                   CKGR_PLLBR_MULB_Pos) + 1U);
      SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >>
                                       CKGR_PLLBR_DIVB_Pos));
    }
    break;
  40223c:	e016      	b.n	40226c <SystemCoreClockUpdate+0x148>
      SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >>
                                  CKGR_PLLAR_MULA_Pos) + 1U);
      SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
                                  CKGR_PLLAR_DIVA_Pos));
    } else {
      SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >>
  40223e:	4b18      	ldr	r3, [pc, #96]	; (4022a0 <SystemCoreClockUpdate+0x17c>)
  402240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402242:	4b1c      	ldr	r3, [pc, #112]	; (4022b4 <SystemCoreClockUpdate+0x190>)
  402244:	4013      	ands	r3, r2
  402246:	0c1b      	lsrs	r3, r3, #16
                                   CKGR_PLLBR_MULB_Pos) + 1U);
  402248:	3301      	adds	r3, #1
      SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >>
                                  CKGR_PLLAR_MULA_Pos) + 1U);
      SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
                                  CKGR_PLLAR_DIVA_Pos));
    } else {
      SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >>
  40224a:	4a17      	ldr	r2, [pc, #92]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  40224c:	6812      	ldr	r2, [r2, #0]
  40224e:	fb02 f203 	mul.w	r2, r2, r3
  402252:	4b15      	ldr	r3, [pc, #84]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  402254:	601a      	str	r2, [r3, #0]
                                   CKGR_PLLBR_MULB_Pos) + 1U);
      SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >>
  402256:	4b14      	ldr	r3, [pc, #80]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  402258:	681a      	ldr	r2, [r3, #0]
  40225a:	4b11      	ldr	r3, [pc, #68]	; (4022a0 <SystemCoreClockUpdate+0x17c>)
  40225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40225e:	b2db      	uxtb	r3, r3
  402260:	fbb2 f2f3 	udiv	r2, r2, r3
  402264:	4b10      	ldr	r3, [pc, #64]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  402266:	601a      	str	r2, [r3, #0]
                                       CKGR_PLLBR_DIVB_Pos));
    }
    break;
  402268:	e000      	b.n	40226c <SystemCoreClockUpdate+0x148>
  default:
    break;
  40226a:	bf00      	nop
  }

  if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40226c:	4b0c      	ldr	r3, [pc, #48]	; (4022a0 <SystemCoreClockUpdate+0x17c>)
  40226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402270:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402274:	2b70      	cmp	r3, #112	; 0x70
  402276:	d108      	bne.n	40228a <SystemCoreClockUpdate+0x166>
    SystemCoreClock /= 3U;
  402278:	4b0b      	ldr	r3, [pc, #44]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  40227a:	681a      	ldr	r2, [r3, #0]
  40227c:	4b0e      	ldr	r3, [pc, #56]	; (4022b8 <SystemCoreClockUpdate+0x194>)
  40227e:	fba3 1302 	umull	r1, r3, r3, r2
  402282:	085a      	lsrs	r2, r3, #1
  402284:	4b08      	ldr	r3, [pc, #32]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  402286:	601a      	str	r2, [r3, #0]
  402288:	e009      	b.n	40229e <SystemCoreClockUpdate+0x17a>
  } else {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40228a:	4b07      	ldr	r3, [pc, #28]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  40228c:	681a      	ldr	r2, [r3, #0]
  40228e:	4b04      	ldr	r3, [pc, #16]	; (4022a0 <SystemCoreClockUpdate+0x17c>)
  402290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402292:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402296:	091b      	lsrs	r3, r3, #4
  402298:	40da      	lsrs	r2, r3
  40229a:	4b03      	ldr	r3, [pc, #12]	; (4022a8 <SystemCoreClockUpdate+0x184>)
  40229c:	601a      	str	r2, [r3, #0]
  }
}
  40229e:	4770      	bx	lr
  4022a0:	400e0400 	.word	0x400e0400
  4022a4:	400e1410 	.word	0x400e1410
  4022a8:	2000008c 	.word	0x2000008c
  4022ac:	00b71b00 	.word	0x00b71b00
  4022b0:	003d0900 	.word	0x003d0900
  4022b4:	07ff0000 	.word	0x07ff0000
  4022b8:	aaaaaaab 	.word	0xaaaaaaab

004022bc <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (EEFC_SETUP == 1)                   /* Embedded Flash Controller 0/1 Setup  */
  EFC0->EEFC_FMR = EEFC_FMR_Val;
  4022bc:	4b39      	ldr	r3, [pc, #228]	; (4023a4 <SystemInit+0xe8>)
  4022be:	f44f 62a0 	mov.w	r2, #1280	; 0x500
  4022c2:	601a      	str	r2, [r3, #0]
#if defined(ID_EFC1)
  EFC1->EEFC_FMR = EEFC_FMR_Val;
#endif
#endif

  PMC->PMC_WPMR = 0x504D4300;           /* Disable write protect              */
  4022c4:	4b38      	ldr	r3, [pc, #224]	; (4023a8 <SystemInit+0xec>)
  4022c6:	4a39      	ldr	r2, [pc, #228]	; (4023ac <SystemInit+0xf0>)
  4022c8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

#if (PMC_SETUP == 1)                    /* Power Management Controller Setup  */

  /* before we change the clocksetup we switch Master Clock Source to MAIN_CLK */
  PMC->PMC_MCKR = (PMC->PMC_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
  4022cc:	4b36      	ldr	r3, [pc, #216]	; (4023a8 <SystemInit+0xec>)
  4022ce:	4a36      	ldr	r2, [pc, #216]	; (4023a8 <SystemInit+0xec>)
  4022d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4022d2:	f022 0203 	bic.w	r2, r2, #3
  4022d6:	f042 0201 	orr.w	r2, r2, #1
  4022da:	631a      	str	r2, [r3, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY));     /* Wait for MCKRDY                    */
  4022dc:	bf00      	nop
  4022de:	4b32      	ldr	r3, [pc, #200]	; (4023a8 <SystemInit+0xec>)
  4022e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4022e2:	f003 0308 	and.w	r3, r3, #8
  4022e6:	2b00      	cmp	r3, #0
  4022e8:	d0f9      	beq.n	4022de <SystemInit+0x22>

#if (CKGR_MOR_Val & (CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN))             /* If MOSCRCEN or MOSCXTEN set        */
  PMC->CKGR_MOR  =  (PMC->CKGR_MOR &  CKGR_MOR_MOSCSEL) |                /* Keep the current MOSCSEL  */
  4022ea:	4a2f      	ldr	r2, [pc, #188]	; (4023a8 <SystemInit+0xec>)
  4022ec:	4b2e      	ldr	r3, [pc, #184]	; (4023a8 <SystemInit+0xec>)
  4022ee:	6a1b      	ldr	r3, [r3, #32]
  4022f0:	f003 7180 	and.w	r1, r3, #16777216	; 0x1000000
                    (CKGR_MOR_Val  & ~CKGR_MOR_MOSCSEL) |                /* Set value except MOSCSEL  */
  4022f4:	4b2e      	ldr	r3, [pc, #184]	; (4023b0 <SystemInit+0xf4>)
  4022f6:	430b      	orrs	r3, r1
  /* before we change the clocksetup we switch Master Clock Source to MAIN_CLK */
  PMC->PMC_MCKR = (PMC->PMC_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY));     /* Wait for MCKRDY                    */

#if (CKGR_MOR_Val & (CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN))             /* If MOSCRCEN or MOSCXTEN set        */
  PMC->CKGR_MOR  =  (PMC->CKGR_MOR &  CKGR_MOR_MOSCSEL) |                /* Keep the current MOSCSEL  */
  4022f8:	6213      	str	r3, [r2, #32]
                    (CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN);             /* and enable bothe OSC      */
#if (CKGR_MOR_Val & CKGR_MOR_MOSCRCEN)
  while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));    /* Wait for MOSCRCS                   */
#endif
#if (CKGR_MOR_Val & CKGR_MOR_MOSCXTEN)
  while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));    /* Wait for MOSCXTS                   */
  4022fa:	bf00      	nop
  4022fc:	4b2a      	ldr	r3, [pc, #168]	; (4023a8 <SystemInit+0xec>)
  4022fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402300:	f003 0301 	and.w	r3, r3, #1
  402304:	2b00      	cmp	r3, #0
  402306:	d0f9      	beq.n	4022fc <SystemInit+0x40>
#endif
  PMC->CKGR_MOR  =  CKGR_MOR_Val;             /* set the desired selection          */
  402308:	4b27      	ldr	r3, [pc, #156]	; (4023a8 <SystemInit+0xec>)
  40230a:	4a2a      	ldr	r2, [pc, #168]	; (4023b4 <SystemInit+0xf8>)
  40230c:	621a      	str	r2, [r3, #32]
  while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));   /* Wait for MOSCSELS                  */
  40230e:	bf00      	nop
  402310:	4b25      	ldr	r3, [pc, #148]	; (4023a8 <SystemInit+0xec>)
  402312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  402318:	2b00      	cmp	r3, #0
  40231a:	d0f9      	beq.n	402310 <SystemInit+0x54>
#endif

#if (CKGR_PLLAR_Val & CKGR_PLLAR_MULA_Msk)    /* If MULA != 0                       */
  PMC->CKGR_PLLAR = CKGR_PLLAR_Val | CKGR_PLLAR_ONE;
  40231c:	4b22      	ldr	r3, [pc, #136]	; (4023a8 <SystemInit+0xec>)
  40231e:	4a26      	ldr	r2, [pc, #152]	; (4023b8 <SystemInit+0xfc>)
  402320:	629a      	str	r2, [r3, #40]	; 0x28
  while (!(PMC->PMC_SR & PMC_SR_LOCKA));      /* Wait for LOCKA                     */
  402322:	bf00      	nop
  402324:	4b20      	ldr	r3, [pc, #128]	; (4023a8 <SystemInit+0xec>)
  402326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402328:	f003 0302 	and.w	r3, r3, #2
  40232c:	2b00      	cmp	r3, #0
  40232e:	d0f9      	beq.n	402324 <SystemInit+0x68>
  while (!(PMC->PMC_SR & PMC_SR_LOCKB));      /* Wait for LOCKB                     */
#endif

  if ((PMC_MCKR_Val & 0x03) >= 2) {
    /* Write PRES field only                                                  */
    PMC->PMC_MCKR = (PMC->PMC_MCKR & ~0x70) | (PMC_MCKR_Val & 0x70);
  402330:	4b1d      	ldr	r3, [pc, #116]	; (4023a8 <SystemInit+0xec>)
  402332:	4a1d      	ldr	r2, [pc, #116]	; (4023a8 <SystemInit+0xec>)
  402334:	6b12      	ldr	r2, [r2, #48]	; 0x30
  402336:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  40233a:	631a      	str	r2, [r3, #48]	; 0x30
  } else {
    /* Write CSS field only                                                   */
    PMC->PMC_MCKR = (PMC->PMC_MCKR & ~0x03) | (PMC_MCKR_Val & 0x03);
  }
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY));     /* Wait for MCKRDY                    */
  40233c:	bf00      	nop
  40233e:	4b1a      	ldr	r3, [pc, #104]	; (4023a8 <SystemInit+0xec>)
  402340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402342:	f003 0308 	and.w	r3, r3, #8
  402346:	2b00      	cmp	r3, #0
  402348:	d0f9      	beq.n	40233e <SystemInit+0x82>
  PMC->PMC_MCKR   =  PMC_MCKR_Val;            /* Write all MCKR                     */
  40234a:	4b17      	ldr	r3, [pc, #92]	; (4023a8 <SystemInit+0xec>)
  40234c:	2202      	movs	r2, #2
  40234e:	631a      	str	r2, [r3, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY));     /* Wait for MCKRDY                    */
  402350:	bf00      	nop
  402352:	4b15      	ldr	r3, [pc, #84]	; (4023a8 <SystemInit+0xec>)
  402354:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402356:	f003 0308 	and.w	r3, r3, #8
  40235a:	2b00      	cmp	r3, #0
  40235c:	d0f9      	beq.n	402352 <SystemInit+0x96>

  PMC->PMC_USB   = PMC_USB_Val;
  40235e:	4b12      	ldr	r3, [pc, #72]	; (4023a8 <SystemInit+0xec>)
  402360:	f240 1201 	movw	r2, #257	; 0x101
  402364:	639a      	str	r2, [r3, #56]	; 0x38
  PMC->PMC_SCER  = PMC_SCER_Val;
  402366:	4b10      	ldr	r3, [pc, #64]	; (4023a8 <SystemInit+0xec>)
  402368:	f44f 7280 	mov.w	r2, #256	; 0x100
  40236c:	601a      	str	r2, [r3, #0]
  PMC->PMC_PCER0 = PMC_PCER0_Val;
  40236e:	4b0e      	ldr	r3, [pc, #56]	; (4023a8 <SystemInit+0xec>)
  402370:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
  402374:	611a      	str	r2, [r3, #16]
  PMC->PMC_PCER1 = PMC_PCER1_Val;
  402376:	4b0c      	ldr	r3, [pc, #48]	; (4023a8 <SystemInit+0xec>)
  402378:	2200      	movs	r2, #0
  40237a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

#if (PMC_SCER_Val & PMC_SCER_PCK0)
  PMC->PMC_PCK[0] = PMC_PCK0_Val;             /* Write PCK0                         */
  40237e:	4b0a      	ldr	r3, [pc, #40]	; (4023a8 <SystemInit+0xec>)
  402380:	2202      	movs	r2, #2
  402382:	641a      	str	r2, [r3, #64]	; 0x40
  while (!(PMC->PMC_SR & PMC_SR_PCKRDY0));    /* Wait for PCKRDY0                   */
  402384:	bf00      	nop
  402386:	4b08      	ldr	r3, [pc, #32]	; (4023a8 <SystemInit+0xec>)
  402388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40238e:	2b00      	cmp	r3, #0
  402390:	d0f9      	beq.n	402386 <SystemInit+0xca>
  PMC->PMC_PCK[2] = PMC_PCK2_Val;             /* Write PCK2                         */
  while (!(PMC->PMC_SR & PMC_SR_PCKRDY2));    /* Wait for PCKRDY2                   */
#endif

#endif
  PMC->PMC_WPMR = 0x504D4301;                 /* Enable write protect               */
  402392:	4b05      	ldr	r3, [pc, #20]	; (4023a8 <SystemInit+0xec>)
  402394:	4a09      	ldr	r2, [pc, #36]	; (4023bc <SystemInit+0x100>)
  402396:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

#if (WDT_SETUP == 1)                          /* Watchdog Setup                     */
  WDT->WDT_MR = WDT_MR_WDDIS;
  40239a:	4b09      	ldr	r3, [pc, #36]	; (4023c0 <SystemInit+0x104>)
  40239c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4023a0:	605a      	str	r2, [r3, #4]
#endif
}
  4023a2:	4770      	bx	lr
  4023a4:	400e0a00 	.word	0x400e0a00
  4023a8:	400e0400 	.word	0x400e0400
  4023ac:	504d4300 	.word	0x504d4300
  4023b0:	00370f29 	.word	0x00370f29
  4023b4:	01370f21 	.word	0x01370f21
  4023b8:	20190803 	.word	0x20190803
  4023bc:	504d4301 	.word	0x504d4301
  4023c0:	400e1450 	.word	0x400e1450

004023c4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4023c4:	b500      	push	{lr}
  4023c6:	b083      	sub	sp, #12
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4023c8:	4b16      	ldr	r3, [pc, #88]	; (402424 <Reset_Handler+0x60>)
  4023ca:	9301      	str	r3, [sp, #4]
	pDest = &_srelocate;
  4023cc:	4b16      	ldr	r3, [pc, #88]	; (402428 <Reset_Handler+0x64>)
  4023ce:	9300      	str	r3, [sp, #0]

	if (pSrc != pDest) {
  4023d0:	9a01      	ldr	r2, [sp, #4]
  4023d2:	9b00      	ldr	r3, [sp, #0]
  4023d4:	429a      	cmp	r2, r3
  4023d6:	d00c      	beq.n	4023f2 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  4023d8:	e007      	b.n	4023ea <Reset_Handler+0x26>
			*pDest++ = *pSrc++;
  4023da:	9b00      	ldr	r3, [sp, #0]
  4023dc:	1d1a      	adds	r2, r3, #4
  4023de:	9200      	str	r2, [sp, #0]
  4023e0:	9a01      	ldr	r2, [sp, #4]
  4023e2:	1d11      	adds	r1, r2, #4
  4023e4:	9101      	str	r1, [sp, #4]
  4023e6:	6812      	ldr	r2, [r2, #0]
  4023e8:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  4023ea:	9a00      	ldr	r2, [sp, #0]
  4023ec:	4b0f      	ldr	r3, [pc, #60]	; (40242c <Reset_Handler+0x68>)
  4023ee:	429a      	cmp	r2, r3
  4023f0:	d3f3      	bcc.n	4023da <Reset_Handler+0x16>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4023f2:	4b0f      	ldr	r3, [pc, #60]	; (402430 <Reset_Handler+0x6c>)
  4023f4:	9300      	str	r3, [sp, #0]
  4023f6:	e004      	b.n	402402 <Reset_Handler+0x3e>
		*pDest++ = 0;
  4023f8:	9b00      	ldr	r3, [sp, #0]
  4023fa:	1d1a      	adds	r2, r3, #4
  4023fc:	9200      	str	r2, [sp, #0]
  4023fe:	2200      	movs	r2, #0
  402400:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402402:	9a00      	ldr	r2, [sp, #0]
  402404:	4b0b      	ldr	r3, [pc, #44]	; (402434 <Reset_Handler+0x70>)
  402406:	429a      	cmp	r2, r3
  402408:	d3f6      	bcc.n	4023f8 <Reset_Handler+0x34>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40240a:	4b0b      	ldr	r3, [pc, #44]	; (402438 <Reset_Handler+0x74>)
  40240c:	9301      	str	r3, [sp, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40240e:	4b0b      	ldr	r3, [pc, #44]	; (40243c <Reset_Handler+0x78>)
  402410:	9a01      	ldr	r2, [sp, #4]
  402412:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  402416:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  402418:	f001 f8cc 	bl	4035b4 <__libc_init_array>

	/* Branch to main function */
	main();
  40241c:	f7fd fed4 	bl	4001c8 <main>

	/* Infinite loop */
	while (1);
  402420:	e7fe      	b.n	402420 <Reset_Handler+0x5c>
  402422:	bf00      	nop
  402424:	004070e8 	.word	0x004070e8
  402428:	20000000 	.word	0x20000000
  40242c:	200008f4 	.word	0x200008f4
  402430:	200008f4 	.word	0x200008f4
  402434:	2001bef8 	.word	0x2001bef8
  402438:	00400000 	.word	0x00400000
  40243c:	e000ed00 	.word	0xe000ed00

00402440 <Dummy_Handler>:
 */
void Dummy_Handler(void)
{
//	LedOn();
	while (1) {
	}
  402440:	e7fe      	b.n	402440 <Dummy_Handler>
  402442:	bf00      	nop

00402444 <PIO_SetPeripheralA>:
 */
static void PIO_SetPeripheralA(
    Pio *pio,
    unsigned int mask,
    unsigned char enablePullUp)
{
  402444:	b086      	sub	sp, #24
  402446:	9003      	str	r0, [sp, #12]
  402448:	9102      	str	r1, [sp, #8]
  40244a:	4613      	mov	r3, r2
  40244c:	f88d 3007 	strb.w	r3, [sp, #7]
    unsigned int abcdsr;
    /* Disable interrupts on the pin(s) */
    pio->PIO_IDR = mask;
  402450:	9b03      	ldr	r3, [sp, #12]
  402452:	9a02      	ldr	r2, [sp, #8]
  402454:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the pull-up(s) if necessary */
    if (enablePullUp) {
  402456:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40245a:	2b00      	cmp	r3, #0
  40245c:	d003      	beq.n	402466 <PIO_SetPeripheralA+0x22>
        pio->PIO_PUER = mask;
  40245e:	9b03      	ldr	r3, [sp, #12]
  402460:	9a02      	ldr	r2, [sp, #8]
  402462:	665a      	str	r2, [r3, #100]	; 0x64
  402464:	e002      	b.n	40246c <PIO_SetPeripheralA+0x28>
    }
    else {

        pio->PIO_PUDR = mask;
  402466:	9b03      	ldr	r3, [sp, #12]
  402468:	9a02      	ldr	r2, [sp, #8]
  40246a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    abcdsr = pio->PIO_ABCDSR[0];
  40246c:	9b03      	ldr	r3, [sp, #12]
  40246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402470:	9305      	str	r3, [sp, #20]
    pio->PIO_ABCDSR[0] &= (~mask & abcdsr);
  402472:	9b03      	ldr	r3, [sp, #12]
  402474:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402476:	9b02      	ldr	r3, [sp, #8]
  402478:	43d9      	mvns	r1, r3
  40247a:	9b05      	ldr	r3, [sp, #20]
  40247c:	400b      	ands	r3, r1
  40247e:	401a      	ands	r2, r3
  402480:	9b03      	ldr	r3, [sp, #12]
  402482:	671a      	str	r2, [r3, #112]	; 0x70
    abcdsr = pio->PIO_ABCDSR[1];
  402484:	9b03      	ldr	r3, [sp, #12]
  402486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402488:	9305      	str	r3, [sp, #20]
    pio->PIO_ABCDSR[1] &= (~mask & abcdsr);
  40248a:	9b03      	ldr	r3, [sp, #12]
  40248c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40248e:	9b02      	ldr	r3, [sp, #8]
  402490:	43d9      	mvns	r1, r3
  402492:	9b05      	ldr	r3, [sp, #20]
  402494:	400b      	ands	r3, r1
  402496:	401a      	ands	r2, r3
  402498:	9b03      	ldr	r3, [sp, #12]
  40249a:	675a      	str	r2, [r3, #116]	; 0x74
    pio->PIO_PDR = mask;
  40249c:	9b03      	ldr	r3, [sp, #12]
  40249e:	9a02      	ldr	r2, [sp, #8]
  4024a0:	605a      	str	r2, [r3, #4]
}
  4024a2:	b006      	add	sp, #24
  4024a4:	4770      	bx	lr
  4024a6:	bf00      	nop

004024a8 <PIO_SetPeripheralB>:
 */
static void PIO_SetPeripheralB(
    Pio *pio,
    unsigned int mask,
    unsigned char enablePullUp)
{
  4024a8:	b086      	sub	sp, #24
  4024aa:	9003      	str	r0, [sp, #12]
  4024ac:	9102      	str	r1, [sp, #8]
  4024ae:	4613      	mov	r3, r2
  4024b0:	f88d 3007 	strb.w	r3, [sp, #7]
    unsigned int abcdsr;
    /* Disable interrupts on the pin(s) */
    pio->PIO_IDR = mask;
  4024b4:	9b03      	ldr	r3, [sp, #12]
  4024b6:	9a02      	ldr	r2, [sp, #8]
  4024b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the pull-up(s) if necessary */
    if (enablePullUp) {
  4024ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4024be:	2b00      	cmp	r3, #0
  4024c0:	d003      	beq.n	4024ca <PIO_SetPeripheralB+0x22>

        pio->PIO_PUER = mask;
  4024c2:	9b03      	ldr	r3, [sp, #12]
  4024c4:	9a02      	ldr	r2, [sp, #8]
  4024c6:	665a      	str	r2, [r3, #100]	; 0x64
  4024c8:	e002      	b.n	4024d0 <PIO_SetPeripheralB+0x28>
    }
    else {

        pio->PIO_PUDR = mask;
  4024ca:	9b03      	ldr	r3, [sp, #12]
  4024cc:	9a02      	ldr	r2, [sp, #8]
  4024ce:	661a      	str	r2, [r3, #96]	; 0x60
    }

    abcdsr = pio->PIO_ABCDSR[0];
  4024d0:	9b03      	ldr	r3, [sp, #12]
  4024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4024d4:	9305      	str	r3, [sp, #20]
    pio->PIO_ABCDSR[0] = (mask | abcdsr);
  4024d6:	9a02      	ldr	r2, [sp, #8]
  4024d8:	9b05      	ldr	r3, [sp, #20]
  4024da:	431a      	orrs	r2, r3
  4024dc:	9b03      	ldr	r3, [sp, #12]
  4024de:	671a      	str	r2, [r3, #112]	; 0x70
    abcdsr = pio->PIO_ABCDSR[1];
  4024e0:	9b03      	ldr	r3, [sp, #12]
  4024e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4024e4:	9305      	str	r3, [sp, #20]
    pio->PIO_ABCDSR[1] &= (~mask & abcdsr);
  4024e6:	9b03      	ldr	r3, [sp, #12]
  4024e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4024ea:	9b02      	ldr	r3, [sp, #8]
  4024ec:	43d9      	mvns	r1, r3
  4024ee:	9b05      	ldr	r3, [sp, #20]
  4024f0:	400b      	ands	r3, r1
  4024f2:	401a      	ands	r2, r3
  4024f4:	9b03      	ldr	r3, [sp, #12]
  4024f6:	675a      	str	r2, [r3, #116]	; 0x74

    pio->PIO_PDR = mask;
  4024f8:	9b03      	ldr	r3, [sp, #12]
  4024fa:	9a02      	ldr	r2, [sp, #8]
  4024fc:	605a      	str	r2, [r3, #4]
}
  4024fe:	b006      	add	sp, #24
  402500:	4770      	bx	lr
  402502:	bf00      	nop

00402504 <PIO_SetPeripheralC>:
 */
static void PIO_SetPeripheralC(
    Pio *pio,
    unsigned int mask,
    unsigned char enablePullUp)
{
  402504:	b086      	sub	sp, #24
  402506:	9003      	str	r0, [sp, #12]
  402508:	9102      	str	r1, [sp, #8]
  40250a:	4613      	mov	r3, r2
  40250c:	f88d 3007 	strb.w	r3, [sp, #7]
    unsigned int abcdsr;
    /* Disable interrupts on the pin(s) */
    pio->PIO_IDR = mask;
  402510:	9b03      	ldr	r3, [sp, #12]
  402512:	9a02      	ldr	r2, [sp, #8]
  402514:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the pull-up(s) if necessary */
    if (enablePullUp) {
  402516:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40251a:	2b00      	cmp	r3, #0
  40251c:	d003      	beq.n	402526 <PIO_SetPeripheralC+0x22>

        pio->PIO_PUER = mask;
  40251e:	9b03      	ldr	r3, [sp, #12]
  402520:	9a02      	ldr	r2, [sp, #8]
  402522:	665a      	str	r2, [r3, #100]	; 0x64
  402524:	e002      	b.n	40252c <PIO_SetPeripheralC+0x28>
    }
    else {

        pio->PIO_PUDR = mask;
  402526:	9b03      	ldr	r3, [sp, #12]
  402528:	9a02      	ldr	r2, [sp, #8]
  40252a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    abcdsr = pio->PIO_ABCDSR[0];
  40252c:	9b03      	ldr	r3, [sp, #12]
  40252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402530:	9305      	str	r3, [sp, #20]
    pio->PIO_ABCDSR[0] &= (~mask & abcdsr);
  402532:	9b03      	ldr	r3, [sp, #12]
  402534:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402536:	9b02      	ldr	r3, [sp, #8]
  402538:	43d9      	mvns	r1, r3
  40253a:	9b05      	ldr	r3, [sp, #20]
  40253c:	400b      	ands	r3, r1
  40253e:	401a      	ands	r2, r3
  402540:	9b03      	ldr	r3, [sp, #12]
  402542:	671a      	str	r2, [r3, #112]	; 0x70
    abcdsr = pio->PIO_ABCDSR[1];
  402544:	9b03      	ldr	r3, [sp, #12]
  402546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402548:	9305      	str	r3, [sp, #20]
    pio->PIO_ABCDSR[1] = (mask | abcdsr);
  40254a:	9a02      	ldr	r2, [sp, #8]
  40254c:	9b05      	ldr	r3, [sp, #20]
  40254e:	431a      	orrs	r2, r3
  402550:	9b03      	ldr	r3, [sp, #12]
  402552:	675a      	str	r2, [r3, #116]	; 0x74

    pio->PIO_PDR = mask;
  402554:	9b03      	ldr	r3, [sp, #12]
  402556:	9a02      	ldr	r2, [sp, #8]
  402558:	605a      	str	r2, [r3, #4]
}
  40255a:	b006      	add	sp, #24
  40255c:	4770      	bx	lr
  40255e:	bf00      	nop

00402560 <PIO_SetPeripheralD>:
 */
static void PIO_SetPeripheralD(
    Pio *pio,
    unsigned int mask,
    unsigned char enablePullUp)
{
  402560:	b086      	sub	sp, #24
  402562:	9003      	str	r0, [sp, #12]
  402564:	9102      	str	r1, [sp, #8]
  402566:	4613      	mov	r3, r2
  402568:	f88d 3007 	strb.w	r3, [sp, #7]
    unsigned int abcdsr;
    /* Disable interrupts on the pin(s) */
    pio->PIO_IDR = mask;
  40256c:	9b03      	ldr	r3, [sp, #12]
  40256e:	9a02      	ldr	r2, [sp, #8]
  402570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the pull-up(s) if necessary */
    if (enablePullUp) {
  402572:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402576:	2b00      	cmp	r3, #0
  402578:	d003      	beq.n	402582 <PIO_SetPeripheralD+0x22>

        pio->PIO_PUER = mask;
  40257a:	9b03      	ldr	r3, [sp, #12]
  40257c:	9a02      	ldr	r2, [sp, #8]
  40257e:	665a      	str	r2, [r3, #100]	; 0x64
  402580:	e002      	b.n	402588 <PIO_SetPeripheralD+0x28>
    }
    else {

        pio->PIO_PUDR = mask;
  402582:	9b03      	ldr	r3, [sp, #12]
  402584:	9a02      	ldr	r2, [sp, #8]
  402586:	661a      	str	r2, [r3, #96]	; 0x60
    }

    abcdsr = pio->PIO_ABCDSR[0];
  402588:	9b03      	ldr	r3, [sp, #12]
  40258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40258c:	9305      	str	r3, [sp, #20]
    pio->PIO_ABCDSR[0] = (mask | abcdsr);
  40258e:	9a02      	ldr	r2, [sp, #8]
  402590:	9b05      	ldr	r3, [sp, #20]
  402592:	431a      	orrs	r2, r3
  402594:	9b03      	ldr	r3, [sp, #12]
  402596:	671a      	str	r2, [r3, #112]	; 0x70
    abcdsr = pio->PIO_ABCDSR[1];
  402598:	9b03      	ldr	r3, [sp, #12]
  40259a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40259c:	9305      	str	r3, [sp, #20]
    pio->PIO_ABCDSR[1] = (mask | abcdsr);
  40259e:	9a02      	ldr	r2, [sp, #8]
  4025a0:	9b05      	ldr	r3, [sp, #20]
  4025a2:	431a      	orrs	r2, r3
  4025a4:	9b03      	ldr	r3, [sp, #12]
  4025a6:	675a      	str	r2, [r3, #116]	; 0x74

    pio->PIO_PDR = mask;
  4025a8:	9b03      	ldr	r3, [sp, #12]
  4025aa:	9a02      	ldr	r2, [sp, #8]
  4025ac:	605a      	str	r2, [r3, #4]
}
  4025ae:	b006      	add	sp, #24
  4025b0:	4770      	bx	lr
  4025b2:	bf00      	nop

004025b4 <PIO_SetInput>:
 */
static void PIO_SetInput(
    Pio *pio,
    unsigned int mask,
    unsigned char attribute)
{
  4025b4:	b084      	sub	sp, #16
  4025b6:	9003      	str	r0, [sp, #12]
  4025b8:	9102      	str	r1, [sp, #8]
  4025ba:	4613      	mov	r3, r2
  4025bc:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Disable interrupts */
    pio->PIO_IDR = mask;
  4025c0:	9b03      	ldr	r3, [sp, #12]
  4025c2:	9a02      	ldr	r2, [sp, #8]
  4025c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable pull-up(s) if necessary */
    if (attribute & PIO_PULLUP)
  4025c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4025ca:	f003 0301 	and.w	r3, r3, #1
  4025ce:	2b00      	cmp	r3, #0
  4025d0:	d003      	beq.n	4025da <PIO_SetInput+0x26>
        pio->PIO_PUER = mask;
  4025d2:	9b03      	ldr	r3, [sp, #12]
  4025d4:	9a02      	ldr	r2, [sp, #8]
  4025d6:	665a      	str	r2, [r3, #100]	; 0x64
  4025d8:	e002      	b.n	4025e0 <PIO_SetInput+0x2c>
    else
        pio->PIO_PUDR = mask;
  4025da:	9b03      	ldr	r3, [sp, #12]
  4025dc:	9a02      	ldr	r2, [sp, #8]
  4025de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Enable Input Filter if necessary */
    if (attribute & (PIO_DEGLITCH | PIO_DEBOUNCE))
  4025e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4025e4:	f003 030a 	and.w	r3, r3, #10
  4025e8:	2b00      	cmp	r3, #0
  4025ea:	d003      	beq.n	4025f4 <PIO_SetInput+0x40>
        pio->PIO_IFER = mask;
  4025ec:	9b03      	ldr	r3, [sp, #12]
  4025ee:	9a02      	ldr	r2, [sp, #8]
  4025f0:	621a      	str	r2, [r3, #32]
  4025f2:	e002      	b.n	4025fa <PIO_SetInput+0x46>
    else
        pio->PIO_IFDR = mask;
  4025f4:	9b03      	ldr	r3, [sp, #12]
  4025f6:	9a02      	ldr	r2, [sp, #8]
  4025f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enable de-glitch or de-bounce if necessary */
    if (attribute & PIO_DEGLITCH)
  4025fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4025fe:	f003 0302 	and.w	r3, r3, #2
  402602:	2b00      	cmp	r3, #0
  402604:	d004      	beq.n	402610 <PIO_SetInput+0x5c>
    {
        pio->PIO_IFSCDR = mask;
  402606:	9b03      	ldr	r3, [sp, #12]
  402608:	9a02      	ldr	r2, [sp, #8]
  40260a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40260e:	e009      	b.n	402624 <PIO_SetInput+0x70>
    }
    else
    {
        if (attribute & PIO_DEBOUNCE)
  402610:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402614:	f003 0308 	and.w	r3, r3, #8
  402618:	2b00      	cmp	r3, #0
  40261a:	d003      	beq.n	402624 <PIO_SetInput+0x70>
        {
            pio->PIO_IFSCER = mask;
  40261c:	9b03      	ldr	r3, [sp, #12]
  40261e:	9a02      	ldr	r2, [sp, #8]
  402620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        }
    }

    /* Configure pin as input */
    pio->PIO_ODR = mask;
  402624:	9b03      	ldr	r3, [sp, #12]
  402626:	9a02      	ldr	r2, [sp, #8]
  402628:	615a      	str	r2, [r3, #20]
    pio->PIO_PER = mask;
  40262a:	9b03      	ldr	r3, [sp, #12]
  40262c:	9a02      	ldr	r2, [sp, #8]
  40262e:	601a      	str	r2, [r3, #0]
}
  402630:	b004      	add	sp, #16
  402632:	4770      	bx	lr

00402634 <PIO_SetOutput>:
    Pio *pio,
    unsigned int mask,
    unsigned char defaultValue,
    unsigned char enableMultiDrive,
    unsigned char enablePullUp)
{
  402634:	b084      	sub	sp, #16
  402636:	9003      	str	r0, [sp, #12]
  402638:	9102      	str	r1, [sp, #8]
  40263a:	f88d 2007 	strb.w	r2, [sp, #7]
  40263e:	f88d 3006 	strb.w	r3, [sp, #6]
    /* Disable interrupts */
    pio->PIO_IDR = mask;
  402642:	9b03      	ldr	r3, [sp, #12]
  402644:	9a02      	ldr	r2, [sp, #8]
  402646:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable pull-up(s) if necessary */
    if (enablePullUp) {
  402648:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40264c:	2b00      	cmp	r3, #0
  40264e:	d003      	beq.n	402658 <PIO_SetOutput+0x24>

        pio->PIO_PUER = mask;
  402650:	9b03      	ldr	r3, [sp, #12]
  402652:	9a02      	ldr	r2, [sp, #8]
  402654:	665a      	str	r2, [r3, #100]	; 0x64
  402656:	e002      	b.n	40265e <PIO_SetOutput+0x2a>
    }
    else {

        pio->PIO_PUDR = mask;
  402658:	9b03      	ldr	r3, [sp, #12]
  40265a:	9a02      	ldr	r2, [sp, #8]
  40265c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Enable multi-drive if necessary */
    if (enableMultiDrive) {
  40265e:	f89d 3006 	ldrb.w	r3, [sp, #6]
  402662:	2b00      	cmp	r3, #0
  402664:	d003      	beq.n	40266e <PIO_SetOutput+0x3a>

        pio->PIO_MDER = mask;
  402666:	9b03      	ldr	r3, [sp, #12]
  402668:	9a02      	ldr	r2, [sp, #8]
  40266a:	651a      	str	r2, [r3, #80]	; 0x50
  40266c:	e002      	b.n	402674 <PIO_SetOutput+0x40>
    }
    else {

        pio->PIO_MDDR = mask;
  40266e:	9b03      	ldr	r3, [sp, #12]
  402670:	9a02      	ldr	r2, [sp, #8]
  402672:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Set default value */
    if (defaultValue) {
  402674:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402678:	2b00      	cmp	r3, #0
  40267a:	d003      	beq.n	402684 <PIO_SetOutput+0x50>

        pio->PIO_SODR = mask;
  40267c:	9b03      	ldr	r3, [sp, #12]
  40267e:	9a02      	ldr	r2, [sp, #8]
  402680:	631a      	str	r2, [r3, #48]	; 0x30
  402682:	e002      	b.n	40268a <PIO_SetOutput+0x56>
    }
    else {

        pio->PIO_CODR = mask;
  402684:	9b03      	ldr	r3, [sp, #12]
  402686:	9a02      	ldr	r2, [sp, #8]
  402688:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure pin(s) as output(s) */
    pio->PIO_OER = mask;
  40268a:	9b03      	ldr	r3, [sp, #12]
  40268c:	9a02      	ldr	r2, [sp, #8]
  40268e:	611a      	str	r2, [r3, #16]
    pio->PIO_PER = mask;
  402690:	9b03      	ldr	r3, [sp, #12]
  402692:	9a02      	ldr	r2, [sp, #8]
  402694:	601a      	str	r2, [r3, #0]
}
  402696:	b004      	add	sp, #16
  402698:	4770      	bx	lr
  40269a:	bf00      	nop

0040269c <PIO_Configure>:
 * \param size  Size of the Pin list (calculated using PIO_LISTSIZE).
 *
 * \return 1 if the pins have been configured properly; otherwise 0.
 */
uint8_t PIO_Configure( const Pin *list, uint32_t size )
{
  40269c:	b510      	push	{r4, lr}
  40269e:	b084      	sub	sp, #16
  4026a0:	9003      	str	r0, [sp, #12]
  4026a2:	9102      	str	r1, [sp, #8]
    /* Configure pins */
    while ( size > 0 )
  4026a4:	e09d      	b.n	4027e2 <PIO_Configure+0x146>
    {
        switch ( list->type )
  4026a6:	9b03      	ldr	r3, [sp, #12]
  4026a8:	7a5b      	ldrb	r3, [r3, #9]
  4026aa:	2b06      	cmp	r3, #6
  4026ac:	f200 8091 	bhi.w	4027d2 <PIO_Configure+0x136>
  4026b0:	a201      	add	r2, pc, #4	; (adr r2, 4026b8 <PIO_Configure+0x1c>)
  4026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4026b6:	bf00      	nop
  4026b8:	004026d5 	.word	0x004026d5
  4026bc:	004026fb 	.word	0x004026fb
  4026c0:	00402721 	.word	0x00402721
  4026c4:	00402747 	.word	0x00402747
  4026c8:	0040276d 	.word	0x0040276d
  4026cc:	0040278f 	.word	0x0040278f
  4026d0:	0040278f 	.word	0x0040278f
        {

            case PIO_PERIPH_A:
                PIO_SetPeripheralA(list->pio,
  4026d4:	9b03      	ldr	r3, [sp, #12]
  4026d6:	6859      	ldr	r1, [r3, #4]
                                   list->mask,
  4026d8:	9b03      	ldr	r3, [sp, #12]
  4026da:	681a      	ldr	r2, [r3, #0]
                                   (list->attribute & PIO_PULLUP) ? 1 : 0);
  4026dc:	9b03      	ldr	r3, [sp, #12]
  4026de:	7a9b      	ldrb	r3, [r3, #10]
  4026e0:	f003 0301 	and.w	r3, r3, #1
    {
        switch ( list->type )
        {

            case PIO_PERIPH_A:
                PIO_SetPeripheralA(list->pio,
  4026e4:	2b00      	cmp	r3, #0
  4026e6:	bf0c      	ite	eq
  4026e8:	2300      	moveq	r3, #0
  4026ea:	2301      	movne	r3, #1
  4026ec:	b2db      	uxtb	r3, r3
  4026ee:	4608      	mov	r0, r1
  4026f0:	4611      	mov	r1, r2
  4026f2:	461a      	mov	r2, r3
  4026f4:	f7ff fea6 	bl	402444 <PIO_SetPeripheralA>
                                   list->mask,
                                   (list->attribute & PIO_PULLUP) ? 1 : 0);
            break;
  4026f8:	e06d      	b.n	4027d6 <PIO_Configure+0x13a>

            case PIO_PERIPH_B:
                PIO_SetPeripheralB(list->pio,
  4026fa:	9b03      	ldr	r3, [sp, #12]
  4026fc:	6859      	ldr	r1, [r3, #4]
                                   list->mask,
  4026fe:	9b03      	ldr	r3, [sp, #12]
  402700:	681a      	ldr	r2, [r3, #0]
                                   (list->attribute & PIO_PULLUP) ? 1 : 0);
  402702:	9b03      	ldr	r3, [sp, #12]
  402704:	7a9b      	ldrb	r3, [r3, #10]
  402706:	f003 0301 	and.w	r3, r3, #1
                                   list->mask,
                                   (list->attribute & PIO_PULLUP) ? 1 : 0);
            break;

            case PIO_PERIPH_B:
                PIO_SetPeripheralB(list->pio,
  40270a:	2b00      	cmp	r3, #0
  40270c:	bf0c      	ite	eq
  40270e:	2300      	moveq	r3, #0
  402710:	2301      	movne	r3, #1
  402712:	b2db      	uxtb	r3, r3
  402714:	4608      	mov	r0, r1
  402716:	4611      	mov	r1, r2
  402718:	461a      	mov	r2, r3
  40271a:	f7ff fec5 	bl	4024a8 <PIO_SetPeripheralB>
                                   list->mask,
                                   (list->attribute & PIO_PULLUP) ? 1 : 0);
            break;
  40271e:	e05a      	b.n	4027d6 <PIO_Configure+0x13a>

            case PIO_PERIPH_C:
                PIO_SetPeripheralC(list->pio,
  402720:	9b03      	ldr	r3, [sp, #12]
  402722:	6859      	ldr	r1, [r3, #4]
                                   list->mask,
  402724:	9b03      	ldr	r3, [sp, #12]
  402726:	681a      	ldr	r2, [r3, #0]
                                   (list->attribute & PIO_PULLUP) ? 1 : 0);
  402728:	9b03      	ldr	r3, [sp, #12]
  40272a:	7a9b      	ldrb	r3, [r3, #10]
  40272c:	f003 0301 	and.w	r3, r3, #1
                                   list->mask,
                                   (list->attribute & PIO_PULLUP) ? 1 : 0);
            break;

            case PIO_PERIPH_C:
                PIO_SetPeripheralC(list->pio,
  402730:	2b00      	cmp	r3, #0
  402732:	bf0c      	ite	eq
  402734:	2300      	moveq	r3, #0
  402736:	2301      	movne	r3, #1
  402738:	b2db      	uxtb	r3, r3
  40273a:	4608      	mov	r0, r1
  40273c:	4611      	mov	r1, r2
  40273e:	461a      	mov	r2, r3
  402740:	f7ff fee0 	bl	402504 <PIO_SetPeripheralC>
                                   list->mask,
                                   (list->attribute & PIO_PULLUP) ? 1 : 0);
            break;
  402744:	e047      	b.n	4027d6 <PIO_Configure+0x13a>

            case PIO_PERIPH_D:
                PIO_SetPeripheralD(list->pio,
  402746:	9b03      	ldr	r3, [sp, #12]
  402748:	6859      	ldr	r1, [r3, #4]
                                   list->mask,
  40274a:	9b03      	ldr	r3, [sp, #12]
  40274c:	681a      	ldr	r2, [r3, #0]
                                   (list->attribute & PIO_PULLUP) ? 1 : 0);
  40274e:	9b03      	ldr	r3, [sp, #12]
  402750:	7a9b      	ldrb	r3, [r3, #10]
  402752:	f003 0301 	and.w	r3, r3, #1
                                   list->mask,
                                   (list->attribute & PIO_PULLUP) ? 1 : 0);
            break;

            case PIO_PERIPH_D:
                PIO_SetPeripheralD(list->pio,
  402756:	2b00      	cmp	r3, #0
  402758:	bf0c      	ite	eq
  40275a:	2300      	moveq	r3, #0
  40275c:	2301      	movne	r3, #1
  40275e:	b2db      	uxtb	r3, r3
  402760:	4608      	mov	r0, r1
  402762:	4611      	mov	r1, r2
  402764:	461a      	mov	r2, r3
  402766:	f7ff fefb 	bl	402560 <PIO_SetPeripheralD>
                                   list->mask,
                                   (list->attribute & PIO_PULLUP) ? 1 : 0);
            break;
  40276a:	e034      	b.n	4027d6 <PIO_Configure+0x13a>
            case PIO_INPUT:
                PMC_EnablePeripheral(list->id);
  40276c:	9b03      	ldr	r3, [sp, #12]
  40276e:	7a1b      	ldrb	r3, [r3, #8]
  402770:	4618      	mov	r0, r3
  402772:	f000 fa93 	bl	402c9c <PMC_EnablePeripheral>
                PIO_SetInput(list->pio,
  402776:	9b03      	ldr	r3, [sp, #12]
  402778:	6859      	ldr	r1, [r3, #4]
                             list->mask,
  40277a:	9b03      	ldr	r3, [sp, #12]
  40277c:	681a      	ldr	r2, [r3, #0]
                                   list->mask,
                                   (list->attribute & PIO_PULLUP) ? 1 : 0);
            break;
            case PIO_INPUT:
                PMC_EnablePeripheral(list->id);
                PIO_SetInput(list->pio,
  40277e:	9b03      	ldr	r3, [sp, #12]
  402780:	7a9b      	ldrb	r3, [r3, #10]
  402782:	4608      	mov	r0, r1
  402784:	4611      	mov	r1, r2
  402786:	461a      	mov	r2, r3
  402788:	f7ff ff14 	bl	4025b4 <PIO_SetInput>
                             list->mask,
                             list->attribute);
                break;
  40278c:	e023      	b.n	4027d6 <PIO_Configure+0x13a>

            case PIO_OUTPUT_0:
            case PIO_OUTPUT_1:
                PIO_SetOutput(list->pio,
  40278e:	9b03      	ldr	r3, [sp, #12]
  402790:	6858      	ldr	r0, [r3, #4]
                              list->mask,
  402792:	9b03      	ldr	r3, [sp, #12]
  402794:	6819      	ldr	r1, [r3, #0]
                              (list->type == PIO_OUTPUT_1),
  402796:	9b03      	ldr	r3, [sp, #12]
  402798:	7a5b      	ldrb	r3, [r3, #9]
                             list->attribute);
                break;

            case PIO_OUTPUT_0:
            case PIO_OUTPUT_1:
                PIO_SetOutput(list->pio,
  40279a:	2b06      	cmp	r3, #6
  40279c:	bf14      	ite	ne
  40279e:	2300      	movne	r3, #0
  4027a0:	2301      	moveq	r3, #1
  4027a2:	b2db      	uxtb	r3, r3
  4027a4:	461a      	mov	r2, r3
                              list->mask,
                              (list->type == PIO_OUTPUT_1),
                              (list->attribute & PIO_OPENDRAIN) ? 1 : 0,
  4027a6:	9b03      	ldr	r3, [sp, #12]
  4027a8:	7a9b      	ldrb	r3, [r3, #10]
  4027aa:	f003 0304 	and.w	r3, r3, #4
                             list->attribute);
                break;

            case PIO_OUTPUT_0:
            case PIO_OUTPUT_1:
                PIO_SetOutput(list->pio,
  4027ae:	2b00      	cmp	r3, #0
  4027b0:	bf0c      	ite	eq
  4027b2:	2300      	moveq	r3, #0
  4027b4:	2301      	movne	r3, #1
  4027b6:	b2db      	uxtb	r3, r3
                              list->mask,
                              (list->type == PIO_OUTPUT_1),
                              (list->attribute & PIO_OPENDRAIN) ? 1 : 0,
                              (list->attribute & PIO_PULLUP) ? 1 : 0);
  4027b8:	9c03      	ldr	r4, [sp, #12]
  4027ba:	7aa4      	ldrb	r4, [r4, #10]
  4027bc:	f004 0401 	and.w	r4, r4, #1
                             list->attribute);
                break;

            case PIO_OUTPUT_0:
            case PIO_OUTPUT_1:
                PIO_SetOutput(list->pio,
  4027c0:	2c00      	cmp	r4, #0
  4027c2:	bf0c      	ite	eq
  4027c4:	2400      	moveq	r4, #0
  4027c6:	2401      	movne	r4, #1
  4027c8:	b2e4      	uxtb	r4, r4
  4027ca:	9400      	str	r4, [sp, #0]
  4027cc:	f7ff ff32 	bl	402634 <PIO_SetOutput>
                              list->mask,
                              (list->type == PIO_OUTPUT_1),
                              (list->attribute & PIO_OPENDRAIN) ? 1 : 0,
                              (list->attribute & PIO_PULLUP) ? 1 : 0);
                break;
  4027d0:	e001      	b.n	4027d6 <PIO_Configure+0x13a>

            default: return 0;
  4027d2:	2300      	movs	r3, #0
  4027d4:	e00a      	b.n	4027ec <PIO_Configure+0x150>
        }

        list++;
  4027d6:	9b03      	ldr	r3, [sp, #12]
  4027d8:	330c      	adds	r3, #12
  4027da:	9303      	str	r3, [sp, #12]
        size--;
  4027dc:	9b02      	ldr	r3, [sp, #8]
  4027de:	3b01      	subs	r3, #1
  4027e0:	9302      	str	r3, [sp, #8]
 * \return 1 if the pins have been configured properly; otherwise 0.
 */
uint8_t PIO_Configure( const Pin *list, uint32_t size )
{
    /* Configure pins */
    while ( size > 0 )
  4027e2:	9b02      	ldr	r3, [sp, #8]
  4027e4:	2b00      	cmp	r3, #0
  4027e6:	f47f af5e 	bne.w	4026a6 <PIO_Configure+0xa>

        list++;
        size--;
    }

    return 1;
  4027ea:	2301      	movs	r3, #1
}
  4027ec:	4618      	mov	r0, r3
  4027ee:	b004      	add	sp, #16
  4027f0:	bd10      	pop	{r4, pc}
  4027f2:	bf00      	nop

004027f4 <PIO_Set>:
 * controller will memorize the value they are changed to outputs.
 *
 * \param pin  Pointer to a Pin instance describing one or more pins.
 */
void PIO_Set(const Pin *pin)
{
  4027f4:	b082      	sub	sp, #8
  4027f6:	9001      	str	r0, [sp, #4]
    pin->pio->PIO_SODR = pin->mask;
  4027f8:	9b01      	ldr	r3, [sp, #4]
  4027fa:	685b      	ldr	r3, [r3, #4]
  4027fc:	9a01      	ldr	r2, [sp, #4]
  4027fe:	6812      	ldr	r2, [r2, #0]
  402800:	631a      	str	r2, [r3, #48]	; 0x30
}
  402802:	b002      	add	sp, #8
  402804:	4770      	bx	lr
  402806:	bf00      	nop

00402808 <PIO_Clear>:
 * controller will memorize the value they are changed to outputs.
 *
 * \param pin  Pointer to a Pin instance describing one or more pins.
 */
void PIO_Clear(const Pin *pin)
{
  402808:	b082      	sub	sp, #8
  40280a:	9001      	str	r0, [sp, #4]
    pin->pio->PIO_CODR = pin->mask;
  40280c:	9b01      	ldr	r3, [sp, #4]
  40280e:	685b      	ldr	r3, [r3, #4]
  402810:	9a01      	ldr	r2, [sp, #4]
  402812:	6812      	ldr	r2, [r2, #0]
  402814:	635a      	str	r2, [r3, #52]	; 0x34
}
  402816:	b002      	add	sp, #8
  402818:	4770      	bx	lr
  40281a:	bf00      	nop

0040281c <PIO_Get>:
 *
 * \return 1 if the Pin instance contains at least one PIO that currently has
 * a high level; otherwise 0.
 */
unsigned char PIO_Get( const Pin *pin )
{
  40281c:	b084      	sub	sp, #16
  40281e:	9001      	str	r0, [sp, #4]
    unsigned int reg ;

    if ( (pin->type == PIO_OUTPUT_0) || (pin->type == PIO_OUTPUT_1) )
  402820:	9b01      	ldr	r3, [sp, #4]
  402822:	7a5b      	ldrb	r3, [r3, #9]
  402824:	2b05      	cmp	r3, #5
  402826:	d003      	beq.n	402830 <PIO_Get+0x14>
  402828:	9b01      	ldr	r3, [sp, #4]
  40282a:	7a5b      	ldrb	r3, [r3, #9]
  40282c:	2b06      	cmp	r3, #6
  40282e:	d104      	bne.n	40283a <PIO_Get+0x1e>
    {
        reg = pin->pio->PIO_ODSR ;
  402830:	9b01      	ldr	r3, [sp, #4]
  402832:	685b      	ldr	r3, [r3, #4]
  402834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  402836:	9303      	str	r3, [sp, #12]
  402838:	e003      	b.n	402842 <PIO_Get+0x26>
    }
    else
    {
        reg = pin->pio->PIO_PDSR ;
  40283a:	9b01      	ldr	r3, [sp, #4]
  40283c:	685b      	ldr	r3, [r3, #4]
  40283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  402840:	9303      	str	r3, [sp, #12]
    }

    if ( (reg & pin->mask) == 0 )
  402842:	9b01      	ldr	r3, [sp, #4]
  402844:	681a      	ldr	r2, [r3, #0]
  402846:	9b03      	ldr	r3, [sp, #12]
  402848:	4013      	ands	r3, r2
  40284a:	2b00      	cmp	r3, #0
  40284c:	d101      	bne.n	402852 <PIO_Get+0x36>
    {
        return 0 ;
  40284e:	2300      	movs	r3, #0
  402850:	e000      	b.n	402854 <PIO_Get+0x38>
    }
    else
    {
        return 1 ;
  402852:	2301      	movs	r3, #1
    }
}
  402854:	4618      	mov	r0, r3
  402856:	b004      	add	sp, #16
  402858:	4770      	bx	lr
  40285a:	bf00      	nop

0040285c <PIO_GetOutputDataStatus>:
 *
 * \return 1 if the Pin instance contains at least one PIO that is configured
 * to output a high level; otherwise 0.
 */
unsigned char PIO_GetOutputDataStatus(const Pin *pin)
{
  40285c:	b082      	sub	sp, #8
  40285e:	9001      	str	r0, [sp, #4]
    if ((pin->pio->PIO_ODSR & pin->mask) == 0) {
  402860:	9b01      	ldr	r3, [sp, #4]
  402862:	685b      	ldr	r3, [r3, #4]
  402864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402866:	9b01      	ldr	r3, [sp, #4]
  402868:	681b      	ldr	r3, [r3, #0]
  40286a:	4013      	ands	r3, r2
  40286c:	2b00      	cmp	r3, #0
  40286e:	d101      	bne.n	402874 <PIO_GetOutputDataStatus+0x18>

        return 0;
  402870:	2300      	movs	r3, #0
  402872:	e000      	b.n	402876 <PIO_GetOutputDataStatus+0x1a>
    }
    else {

        return 1;
  402874:	2301      	movs	r3, #1
    }
}
  402876:	4618      	mov	r0, r3
  402878:	b002      	add	sp, #8
  40287a:	4770      	bx	lr

0040287c <PIO_SetDebounceFilter>:
 *
 * \param pin  Pointer to a Pin instance describing one or more pins.
 * \param cuttoff  Cutt off frequency for debounce filter.
 */
void PIO_SetDebounceFilter( const Pin *pin, uint32_t cuttoff )
{
  40287c:	b084      	sub	sp, #16
  40287e:	9001      	str	r0, [sp, #4]
  402880:	9100      	str	r1, [sp, #0]
    Pio *pio = pin->pio;
  402882:	9b01      	ldr	r3, [sp, #4]
  402884:	685b      	ldr	r3, [r3, #4]
  402886:	9303      	str	r3, [sp, #12]

    pio->PIO_IFSCER = pin->mask; /* set Debouncing, 0 bit field no effect */
  402888:	9b01      	ldr	r3, [sp, #4]
  40288a:	681a      	ldr	r2, [r3, #0]
  40288c:	9b03      	ldr	r3, [sp, #12]
  40288e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    pio->PIO_SCDR = ((32678/(2*(cuttoff))) - 1) & 0x3FFF; /* the lowest 14 bits work */
  402892:	9b00      	ldr	r3, [sp, #0]
  402894:	005b      	lsls	r3, r3, #1
  402896:	f647 72a6 	movw	r2, #32678	; 0x7fa6
  40289a:	fbb2 f3f3 	udiv	r3, r2, r3
  40289e:	3b01      	subs	r3, #1
  4028a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
  4028a4:	9b03      	ldr	r3, [sp, #12]
  4028a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
  4028aa:	b004      	add	sp, #16
  4028ac:	4770      	bx	lr
  4028ae:	bf00      	nop

004028b0 <PIO_EnableWriteProtect>:
 * \brief Enable write protect.
 *
 * \param pin  Pointer to a Pin instance describing one or more pins.
 */
void PIO_EnableWriteProtect( const Pin *pin )
{
  4028b0:	b084      	sub	sp, #16
  4028b2:	9001      	str	r0, [sp, #4]
   Pio *pio = pin->pio;
  4028b4:	9b01      	ldr	r3, [sp, #4]
  4028b6:	685b      	ldr	r3, [r3, #4]
  4028b8:	9303      	str	r3, [sp, #12]

   pio->PIO_WPMR = ( PIO_WPMR_WPKEY_VALID | PIO_WPMR_WPEN_EN );
  4028ba:	9b03      	ldr	r3, [sp, #12]
  4028bc:	4a02      	ldr	r2, [pc, #8]	; (4028c8 <PIO_EnableWriteProtect+0x18>)
  4028be:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4028c2:	b004      	add	sp, #16
  4028c4:	4770      	bx	lr
  4028c6:	bf00      	nop
  4028c8:	50494f01 	.word	0x50494f01

004028cc <PIO_DisableWriteProtect>:
 *
 * \param pin  Pointer to a Pin instance describing one or more pins.
 */

void PIO_DisableWriteProtect( const Pin *pin )
{
  4028cc:	b084      	sub	sp, #16
  4028ce:	9001      	str	r0, [sp, #4]
   Pio *pio = pin->pio;
  4028d0:	9b01      	ldr	r3, [sp, #4]
  4028d2:	685b      	ldr	r3, [r3, #4]
  4028d4:	9303      	str	r3, [sp, #12]

   pio->PIO_WPMR = ( PIO_WPMR_WPKEY_VALID | PIO_WPMR_WPEN_DIS );
  4028d6:	9b03      	ldr	r3, [sp, #12]
  4028d8:	4a02      	ldr	r2, [pc, #8]	; (4028e4 <PIO_DisableWriteProtect+0x18>)
  4028da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4028de:	b004      	add	sp, #16
  4028e0:	4770      	bx	lr
  4028e2:	bf00      	nop
  4028e4:	50494f00 	.word	0x50494f00

004028e8 <PIO_GetWriteProtectViolationInfo>:
 *
 * \param pin  Pointer to a Pin instance describing one or more pins.
 */

uint32_t PIO_GetWriteProtectViolationInfo( const Pin * pin )
{
  4028e8:	b084      	sub	sp, #16
  4028ea:	9001      	str	r0, [sp, #4]
    Pio *pio = pin->pio;
  4028ec:	9b01      	ldr	r3, [sp, #4]
  4028ee:	685b      	ldr	r3, [r3, #4]
  4028f0:	9303      	str	r3, [sp, #12]
    return (pio->PIO_WPSR);
  4028f2:	9b03      	ldr	r3, [sp, #12]
  4028f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
}
  4028f8:	4618      	mov	r0, r3
  4028fa:	b004      	add	sp, #16
  4028fc:	4770      	bx	lr
  4028fe:	bf00      	nop

00402900 <PIO_SetPinType>:
 * \param pin      Pointer to a Pin instance describing one or more pins.
 * \param pinType  PIO_PERIPH_A, PIO_PERIPH_B, ...
 */

void PIO_SetPinType( Pin * pin, uint8_t pinType)
{
  402900:	b082      	sub	sp, #8
  402902:	9001      	str	r0, [sp, #4]
  402904:	460b      	mov	r3, r1
  402906:	f88d 3003 	strb.w	r3, [sp, #3]
    pin->type = pinType;
  40290a:	9b01      	ldr	r3, [sp, #4]
  40290c:	f89d 2003 	ldrb.w	r2, [sp, #3]
  402910:	725a      	strb	r2, [r3, #9]
}
  402912:	b002      	add	sp, #8
  402914:	4770      	bx	lr
  402916:	bf00      	nop

00402918 <TC_Configure>:
 * \param pTc  Pointer to a Tc instance.
 * \param channel Channel number.
 * \param mode  Operating mode (TC_CMR value).
 */
extern void TC_Configure( Tc *pTc, uint32_t dwChannel, uint32_t dwMode )
{
  402918:	b500      	push	{lr}
  40291a:	b087      	sub	sp, #28
  40291c:	9003      	str	r0, [sp, #12]
  40291e:	9102      	str	r1, [sp, #8]
  402920:	9201      	str	r2, [sp, #4]
    TcChannel* pTcCh ;

    assert( dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] )) ) ;
  402922:	9b02      	ldr	r3, [sp, #8]
  402924:	2b02      	cmp	r3, #2
  402926:	d905      	bls.n	402934 <TC_Configure+0x1c>
  402928:	480c      	ldr	r0, [pc, #48]	; (40295c <TC_Configure+0x44>)
  40292a:	2140      	movs	r1, #64	; 0x40
  40292c:	4a0c      	ldr	r2, [pc, #48]	; (402960 <TC_Configure+0x48>)
  40292e:	4b0d      	ldr	r3, [pc, #52]	; (402964 <TC_Configure+0x4c>)
  402930:	f000 fe0e 	bl	403550 <__assert_func>
    pTcCh = pTc->TC_CHANNEL+dwChannel ;
  402934:	9b02      	ldr	r3, [sp, #8]
  402936:	019b      	lsls	r3, r3, #6
  402938:	9a03      	ldr	r2, [sp, #12]
  40293a:	4413      	add	r3, r2
  40293c:	9305      	str	r3, [sp, #20]

    /*  Disable TC clock */
    pTcCh->TC_CCR = TC_CCR_CLKDIS ;
  40293e:	9b05      	ldr	r3, [sp, #20]
  402940:	2202      	movs	r2, #2
  402942:	601a      	str	r2, [r3, #0]

    /*  Disable interrupts */
    pTcCh->TC_IDR = 0xFFFFFFFF ;
  402944:	9b05      	ldr	r3, [sp, #20]
  402946:	f04f 32ff 	mov.w	r2, #4294967295
  40294a:	629a      	str	r2, [r3, #40]	; 0x28

    /*  Clear status register */
    pTcCh->TC_SR ;
  40294c:	9b05      	ldr	r3, [sp, #20]
  40294e:	6a1b      	ldr	r3, [r3, #32]

    /*  Set mode */
    pTcCh->TC_CMR = dwMode ;
  402950:	9b05      	ldr	r3, [sp, #20]
  402952:	9a01      	ldr	r2, [sp, #4]
  402954:	605a      	str	r2, [r3, #4]
}
  402956:	b007      	add	sp, #28
  402958:	f85d fb04 	ldr.w	pc, [sp], #4
  40295c:	00406d98 	.word	0x00406d98
  402960:	00406e58 	.word	0x00406e58
  402964:	00406dc8 	.word	0x00406dc8

00402968 <TC_SetBlockMode>:
 * \param p_tc Pointer to a TC instance.
 * \param ul_blockmode Block mode register value to set.
 *
 */
void TC_SetBlockMode( Tc *p_tc, uint32_t ul_blockmode )
{
  402968:	b082      	sub	sp, #8
  40296a:	9001      	str	r0, [sp, #4]
  40296c:	9100      	str	r1, [sp, #0]
	
	
	p_tc->TC_BMR = ul_blockmode;
  40296e:	9b01      	ldr	r3, [sp, #4]
  402970:	9a00      	ldr	r2, [sp, #0]
  402972:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  402976:	b002      	add	sp, #8
  402978:	4770      	bx	lr
  40297a:	bf00      	nop

0040297c <TC_WriteRa>:
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void TC_WriteRa( Tc *p_tc, uint32_t ul_channel, uint32_t ul_value )
{
  40297c:	b500      	push	{lr}
  40297e:	b085      	sub	sp, #20
  402980:	9003      	str	r0, [sp, #12]
  402982:	9102      	str	r1, [sp, #8]
  402984:	9201      	str	r2, [sp, #4]
	assert(ul_channel <
  402986:	9b02      	ldr	r3, [sp, #8]
  402988:	2b02      	cmp	r3, #2
  40298a:	d905      	bls.n	402998 <TC_WriteRa+0x1c>
  40298c:	4807      	ldr	r0, [pc, #28]	; (4029ac <TC_WriteRa+0x30>)
  40298e:	216b      	movs	r1, #107	; 0x6b
  402990:	4a07      	ldr	r2, [pc, #28]	; (4029b0 <TC_WriteRa+0x34>)
  402992:	4b08      	ldr	r3, [pc, #32]	; (4029b4 <TC_WriteRa+0x38>)
  402994:	f000 fddc 	bl	403550 <__assert_func>
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  402998:	9a03      	ldr	r2, [sp, #12]
  40299a:	9b02      	ldr	r3, [sp, #8]
  40299c:	019b      	lsls	r3, r3, #6
  40299e:	4413      	add	r3, r2
  4029a0:	3310      	adds	r3, #16
  4029a2:	9a01      	ldr	r2, [sp, #4]
  4029a4:	605a      	str	r2, [r3, #4]
}
  4029a6:	b005      	add	sp, #20
  4029a8:	f85d fb04 	ldr.w	pc, [sp], #4
  4029ac:	00406d98 	.word	0x00406d98
  4029b0:	00406e68 	.word	0x00406e68
  4029b4:	00406e10 	.word	0x00406e10

004029b8 <TC_WriteRb>:
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void TC_WriteRb( Tc *p_tc, uint32_t ul_channel, uint32_t ul_value )
{
  4029b8:	b500      	push	{lr}
  4029ba:	b085      	sub	sp, #20
  4029bc:	9003      	str	r0, [sp, #12]
  4029be:	9102      	str	r1, [sp, #8]
  4029c0:	9201      	str	r2, [sp, #4]
	assert(ul_channel <
  4029c2:	9b02      	ldr	r3, [sp, #8]
  4029c4:	2b02      	cmp	r3, #2
  4029c6:	d905      	bls.n	4029d4 <TC_WriteRb+0x1c>
  4029c8:	4807      	ldr	r0, [pc, #28]	; (4029e8 <TC_WriteRb+0x30>)
  4029ca:	217b      	movs	r1, #123	; 0x7b
  4029cc:	4a07      	ldr	r2, [pc, #28]	; (4029ec <TC_WriteRb+0x34>)
  4029ce:	4b08      	ldr	r3, [pc, #32]	; (4029f0 <TC_WriteRb+0x38>)
  4029d0:	f000 fdbe 	bl	403550 <__assert_func>
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RB = ul_value;
  4029d4:	9a03      	ldr	r2, [sp, #12]
  4029d6:	9b02      	ldr	r3, [sp, #8]
  4029d8:	019b      	lsls	r3, r3, #6
  4029da:	4413      	add	r3, r2
  4029dc:	3318      	adds	r3, #24
  4029de:	9a01      	ldr	r2, [sp, #4]
  4029e0:	601a      	str	r2, [r3, #0]
}
  4029e2:	b005      	add	sp, #20
  4029e4:	f85d fb04 	ldr.w	pc, [sp], #4
  4029e8:	00406d98 	.word	0x00406d98
  4029ec:	00406e74 	.word	0x00406e74
  4029f0:	00406e10 	.word	0x00406e10

004029f4 <TC_WriteRc>:
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void TC_WriteRc( Tc *p_tc, uint32_t ul_channel, uint32_t ul_value )
{
  4029f4:	b500      	push	{lr}
  4029f6:	b085      	sub	sp, #20
  4029f8:	9003      	str	r0, [sp, #12]
  4029fa:	9102      	str	r1, [sp, #8]
  4029fc:	9201      	str	r2, [sp, #4]
	assert(ul_channel <
  4029fe:	9b02      	ldr	r3, [sp, #8]
  402a00:	2b02      	cmp	r3, #2
  402a02:	d905      	bls.n	402a10 <TC_WriteRc+0x1c>
  402a04:	4807      	ldr	r0, [pc, #28]	; (402a24 <TC_WriteRc+0x30>)
  402a06:	218b      	movs	r1, #139	; 0x8b
  402a08:	4a07      	ldr	r2, [pc, #28]	; (402a28 <TC_WriteRc+0x34>)
  402a0a:	4b08      	ldr	r3, [pc, #32]	; (402a2c <TC_WriteRc+0x38>)
  402a0c:	f000 fda0 	bl	403550 <__assert_func>
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  402a10:	9a03      	ldr	r2, [sp, #12]
  402a12:	9b02      	ldr	r3, [sp, #8]
  402a14:	019b      	lsls	r3, r3, #6
  402a16:	4413      	add	r3, r2
  402a18:	3318      	adds	r3, #24
  402a1a:	9a01      	ldr	r2, [sp, #4]
  402a1c:	605a      	str	r2, [r3, #4]
}
  402a1e:	b005      	add	sp, #20
  402a20:	f85d fb04 	ldr.w	pc, [sp], #4
  402a24:	00406d98 	.word	0x00406d98
  402a28:	00406e80 	.word	0x00406e80
  402a2c:	00406e10 	.word	0x00406e10

00402a30 <TC_EnableInterrupt>:
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void TC_EnableInterrupt(Tc *p_tc, uint32_t ul_channel, uint32_t ul_sources)
{
  402a30:	b500      	push	{lr}
  402a32:	b087      	sub	sp, #28
  402a34:	9003      	str	r0, [sp, #12]
  402a36:	9102      	str	r1, [sp, #8]
  402a38:	9201      	str	r2, [sp, #4]
TcChannel *tc_channel;

	assert(ul_channel <
  402a3a:	9b02      	ldr	r3, [sp, #8]
  402a3c:	2b02      	cmp	r3, #2
  402a3e:	d905      	bls.n	402a4c <TC_EnableInterrupt+0x1c>
  402a40:	4808      	ldr	r0, [pc, #32]	; (402a64 <TC_EnableInterrupt+0x34>)
  402a42:	219d      	movs	r1, #157	; 0x9d
  402a44:	4a08      	ldr	r2, [pc, #32]	; (402a68 <TC_EnableInterrupt+0x38>)
  402a46:	4b09      	ldr	r3, [pc, #36]	; (402a6c <TC_EnableInterrupt+0x3c>)
  402a48:	f000 fd82 	bl	403550 <__assert_func>
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  402a4c:	9b02      	ldr	r3, [sp, #8]
  402a4e:	019b      	lsls	r3, r3, #6
  402a50:	9a03      	ldr	r2, [sp, #12]
  402a52:	4413      	add	r3, r2
  402a54:	9305      	str	r3, [sp, #20]
	tc_channel->TC_IER = ul_sources;
  402a56:	9b05      	ldr	r3, [sp, #20]
  402a58:	9a01      	ldr	r2, [sp, #4]
  402a5a:	625a      	str	r2, [r3, #36]	; 0x24
}
  402a5c:	b007      	add	sp, #28
  402a5e:	f85d fb04 	ldr.w	pc, [sp], #4
  402a62:	bf00      	nop
  402a64:	00406d98 	.word	0x00406d98
  402a68:	00406e8c 	.word	0x00406e8c
  402a6c:	00406e10 	.word	0x00406e10

00402a70 <TC_DisableInterrupt>:
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void TC_DisableInterrupt( Tc *p_tc, uint32_t ul_channel, uint32_t ul_sources )
{
  402a70:	b500      	push	{lr}
  402a72:	b087      	sub	sp, #28
  402a74:	9003      	str	r0, [sp, #12]
  402a76:	9102      	str	r1, [sp, #8]
  402a78:	9201      	str	r2, [sp, #4]
TcChannel *tc_channel;

	assert(ul_channel <
  402a7a:	9b02      	ldr	r3, [sp, #8]
  402a7c:	2b02      	cmp	r3, #2
  402a7e:	d905      	bls.n	402a8c <TC_DisableInterrupt+0x1c>
  402a80:	4808      	ldr	r0, [pc, #32]	; (402aa4 <TC_DisableInterrupt+0x34>)
  402a82:	21b0      	movs	r1, #176	; 0xb0
  402a84:	4a08      	ldr	r2, [pc, #32]	; (402aa8 <TC_DisableInterrupt+0x38>)
  402a86:	4b09      	ldr	r3, [pc, #36]	; (402aac <TC_DisableInterrupt+0x3c>)
  402a88:	f000 fd62 	bl	403550 <__assert_func>
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  402a8c:	9b02      	ldr	r3, [sp, #8]
  402a8e:	019b      	lsls	r3, r3, #6
  402a90:	9a03      	ldr	r2, [sp, #12]
  402a92:	4413      	add	r3, r2
  402a94:	9305      	str	r3, [sp, #20]
	tc_channel->TC_IDR = ul_sources;
  402a96:	9b05      	ldr	r3, [sp, #20]
  402a98:	9a01      	ldr	r2, [sp, #4]
  402a9a:	629a      	str	r2, [r3, #40]	; 0x28
}
  402a9c:	b007      	add	sp, #28
  402a9e:	f85d fb04 	ldr.w	pc, [sp], #4
  402aa2:	bf00      	nop
  402aa4:	00406d98 	.word	0x00406d98
  402aa8:	00406ea0 	.word	0x00406ea0
  402aac:	00406e10 	.word	0x00406e10

00402ab0 <TC_GetInterruptMask>:
 * \param ul_channel Channel to configure.
 *
 * \return The interrupt mask value.
 */
uint32_t TC_GetInterruptMask( Tc *p_tc, uint32_t ul_channel )
{
  402ab0:	b500      	push	{lr}
  402ab2:	b085      	sub	sp, #20
  402ab4:	9001      	str	r0, [sp, #4]
  402ab6:	9100      	str	r1, [sp, #0]
TcChannel *tc_channel;

	assert(ul_channel <
  402ab8:	9b00      	ldr	r3, [sp, #0]
  402aba:	2b02      	cmp	r3, #2
  402abc:	d905      	bls.n	402aca <TC_GetInterruptMask+0x1a>
  402abe:	4808      	ldr	r0, [pc, #32]	; (402ae0 <TC_GetInterruptMask+0x30>)
  402ac0:	21c3      	movs	r1, #195	; 0xc3
  402ac2:	4a08      	ldr	r2, [pc, #32]	; (402ae4 <TC_GetInterruptMask+0x34>)
  402ac4:	4b08      	ldr	r3, [pc, #32]	; (402ae8 <TC_GetInterruptMask+0x38>)
  402ac6:	f000 fd43 	bl	403550 <__assert_func>
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  402aca:	9b00      	ldr	r3, [sp, #0]
  402acc:	019b      	lsls	r3, r3, #6
  402ace:	9a01      	ldr	r2, [sp, #4]
  402ad0:	4413      	add	r3, r2
  402ad2:	9303      	str	r3, [sp, #12]
	return tc_channel->TC_IMR;
  402ad4:	9b03      	ldr	r3, [sp, #12]
  402ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  402ad8:	4618      	mov	r0, r3
  402ada:	b005      	add	sp, #20
  402adc:	f85d fb04 	ldr.w	pc, [sp], #4
  402ae0:	00406d98 	.word	0x00406d98
  402ae4:	00406eb4 	.word	0x00406eb4
  402ae8:	00406e10 	.word	0x00406e10

00402aec <TC_GetStatus>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t TC_GetStatus( Tc *p_tc, uint32_t ul_channel )
{
  402aec:	b500      	push	{lr}
  402aee:	b085      	sub	sp, #20
  402af0:	9001      	str	r0, [sp, #4]
  402af2:	9100      	str	r1, [sp, #0]
TcChannel *tc_channel;

	assert(ul_channel <
  402af4:	9b00      	ldr	r3, [sp, #0]
  402af6:	2b02      	cmp	r3, #2
  402af8:	d905      	bls.n	402b06 <TC_GetStatus+0x1a>
  402afa:	4808      	ldr	r0, [pc, #32]	; (402b1c <TC_GetStatus+0x30>)
  402afc:	21d6      	movs	r1, #214	; 0xd6
  402afe:	4a08      	ldr	r2, [pc, #32]	; (402b20 <TC_GetStatus+0x34>)
  402b00:	4b08      	ldr	r3, [pc, #32]	; (402b24 <TC_GetStatus+0x38>)
  402b02:	f000 fd25 	bl	403550 <__assert_func>
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  402b06:	9b00      	ldr	r3, [sp, #0]
  402b08:	019b      	lsls	r3, r3, #6
  402b0a:	9a01      	ldr	r2, [sp, #4]
  402b0c:	4413      	add	r3, r2
  402b0e:	9303      	str	r3, [sp, #12]
	return tc_channel->TC_SR;
  402b10:	9b03      	ldr	r3, [sp, #12]
  402b12:	6a1b      	ldr	r3, [r3, #32]
}
  402b14:	4618      	mov	r0, r3
  402b16:	b005      	add	sp, #20
  402b18:	f85d fb04 	ldr.w	pc, [sp], #4
  402b1c:	00406d98 	.word	0x00406d98
  402b20:	00406ec8 	.word	0x00406ec8
  402b24:	00406e10 	.word	0x00406e10

00402b28 <TC_Start>:
 *
 * \param pTc  Pointer to a Tc instance.
 * \param dwChannel Channel number.
 */
extern void TC_Start( Tc *pTc, uint32_t dwChannel )
{
  402b28:	b500      	push	{lr}
  402b2a:	b085      	sub	sp, #20
  402b2c:	9001      	str	r0, [sp, #4]
  402b2e:	9100      	str	r1, [sp, #0]
    TcChannel* pTcCh ;

    assert( dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] )) ) ;
  402b30:	9b00      	ldr	r3, [sp, #0]
  402b32:	2b02      	cmp	r3, #2
  402b34:	d905      	bls.n	402b42 <TC_Start+0x1a>
  402b36:	4808      	ldr	r0, [pc, #32]	; (402b58 <TC_Start+0x30>)
  402b38:	21e9      	movs	r1, #233	; 0xe9
  402b3a:	4a08      	ldr	r2, [pc, #32]	; (402b5c <TC_Start+0x34>)
  402b3c:	4b08      	ldr	r3, [pc, #32]	; (402b60 <TC_Start+0x38>)
  402b3e:	f000 fd07 	bl	403550 <__assert_func>

    pTcCh = pTc->TC_CHANNEL+dwChannel ;
  402b42:	9b00      	ldr	r3, [sp, #0]
  402b44:	019b      	lsls	r3, r3, #6
  402b46:	9a01      	ldr	r2, [sp, #4]
  402b48:	4413      	add	r3, r2
  402b4a:	9303      	str	r3, [sp, #12]
    pTcCh->TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG ;
  402b4c:	9b03      	ldr	r3, [sp, #12]
  402b4e:	2205      	movs	r2, #5
  402b50:	601a      	str	r2, [r3, #0]
}
  402b52:	b005      	add	sp, #20
  402b54:	f85d fb04 	ldr.w	pc, [sp], #4
  402b58:	00406d98 	.word	0x00406d98
  402b5c:	00406ed8 	.word	0x00406ed8
  402b60:	00406dc8 	.word	0x00406dc8

00402b64 <TC_Stop>:
 *
 * \param pTc     Pointer to a Tc instance.
 * \param dwChannel Channel number.
 */
extern void TC_Stop(Tc *pTc, uint32_t dwChannel )
{
  402b64:	b500      	push	{lr}
  402b66:	b085      	sub	sp, #20
  402b68:	9001      	str	r0, [sp, #4]
  402b6a:	9100      	str	r1, [sp, #0]
    TcChannel* pTcCh ;

    assert( dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] )) ) ;
  402b6c:	9b00      	ldr	r3, [sp, #0]
  402b6e:	2b02      	cmp	r3, #2
  402b70:	d905      	bls.n	402b7e <TC_Stop+0x1a>
  402b72:	4808      	ldr	r0, [pc, #32]	; (402b94 <TC_Stop+0x30>)
  402b74:	21fb      	movs	r1, #251	; 0xfb
  402b76:	4a08      	ldr	r2, [pc, #32]	; (402b98 <TC_Stop+0x34>)
  402b78:	4b08      	ldr	r3, [pc, #32]	; (402b9c <TC_Stop+0x38>)
  402b7a:	f000 fce9 	bl	403550 <__assert_func>

    pTcCh = pTc->TC_CHANNEL+dwChannel ;
  402b7e:	9b00      	ldr	r3, [sp, #0]
  402b80:	019b      	lsls	r3, r3, #6
  402b82:	9a01      	ldr	r2, [sp, #4]
  402b84:	4413      	add	r3, r2
  402b86:	9303      	str	r3, [sp, #12]
    pTcCh->TC_CCR = TC_CCR_CLKDIS ;
  402b88:	9b03      	ldr	r3, [sp, #12]
  402b8a:	2202      	movs	r2, #2
  402b8c:	601a      	str	r2, [r3, #0]
}
  402b8e:	b005      	add	sp, #20
  402b90:	f85d fb04 	ldr.w	pc, [sp], #4
  402b94:	00406d98 	.word	0x00406d98
  402b98:	00406ee4 	.word	0x00406ee4
  402b9c:	00406dc8 	.word	0x00406dc8

00402ba0 <TC_FindMckDivisor>:
 * \param dwBoardMCK  Board clock frequency.
 *
 * \return 1 if a proper divisor has been found, otherwise 0.
 */
extern uint32_t TC_FindMckDivisor( uint32_t dwFreq, uint32_t dwMCk, uint32_t *dwDiv, uint32_t *dwTcClks, uint32_t dwBoardMCK )
{
  402ba0:	b08a      	sub	sp, #40	; 0x28
  402ba2:	9003      	str	r0, [sp, #12]
  402ba4:	9102      	str	r1, [sp, #8]
  402ba6:	9201      	str	r2, [sp, #4]
  402ba8:	9300      	str	r3, [sp, #0]
//    uint32_t adwDivisors[5] = { 2, 8, 32, 128, dwBoardMCK / 32768 } ;
		uint32_t adwDivisors[5];
    uint32_t dwIndex = 0 ;
  402baa:	2300      	movs	r3, #0
  402bac:	9309      	str	r3, [sp, #36]	; 0x24


		adwDivisors[0] = 2;
  402bae:	2302      	movs	r3, #2
  402bb0:	9304      	str	r3, [sp, #16]
		adwDivisors[1] = 8;
  402bb2:	2308      	movs	r3, #8
  402bb4:	9305      	str	r3, [sp, #20]
		adwDivisors[2] = 32;
  402bb6:	2320      	movs	r3, #32
  402bb8:	9306      	str	r3, [sp, #24]
		adwDivisors[3] = 128;
  402bba:	2380      	movs	r3, #128	; 0x80
  402bbc:	9307      	str	r3, [sp, #28]
		adwDivisors[4] = dwBoardMCK / 32768;
  402bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402bc0:	0bdb      	lsrs	r3, r3, #15
  402bc2:	9308      	str	r3, [sp, #32]
		
    /*  Satisfy lower bound */
    while ( dwFreq < ((dwMCk / adwDivisors[dwIndex]) / 65536) )
  402bc4:	e007      	b.n	402bd6 <TC_FindMckDivisor+0x36>
    {
        dwIndex++ ;
  402bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402bc8:	3301      	adds	r3, #1
  402bca:	9309      	str	r3, [sp, #36]	; 0x24

        /*  If no divisor can be found, return 0 */
        if ( dwIndex == (sizeof( adwDivisors )/sizeof( adwDivisors[0] ))  )
  402bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402bce:	2b05      	cmp	r3, #5
  402bd0:	d101      	bne.n	402bd6 <TC_FindMckDivisor+0x36>
        {
            return 0 ;
  402bd2:	2300      	movs	r3, #0
  402bd4:	e033      	b.n	402c3e <TC_FindMckDivisor+0x9e>
		adwDivisors[2] = 32;
		adwDivisors[3] = 128;
		adwDivisors[4] = dwBoardMCK / 32768;
		
    /*  Satisfy lower bound */
    while ( dwFreq < ((dwMCk / adwDivisors[dwIndex]) / 65536) )
  402bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402bd8:	009b      	lsls	r3, r3, #2
  402bda:	aa0a      	add	r2, sp, #40	; 0x28
  402bdc:	4413      	add	r3, r2
  402bde:	f853 3c18 	ldr.w	r3, [r3, #-24]
  402be2:	9a02      	ldr	r2, [sp, #8]
  402be4:	fbb2 f3f3 	udiv	r3, r2, r3
  402be8:	0c1a      	lsrs	r2, r3, #16
  402bea:	9b03      	ldr	r3, [sp, #12]
  402bec:	429a      	cmp	r2, r3
  402bee:	d8ea      	bhi.n	402bc6 <TC_FindMckDivisor+0x26>
            return 0 ;
        }
    }

    /*  Try to maximize DIV while satisfying upper bound */
    while ( dwIndex < 4 )
  402bf0:	e010      	b.n	402c14 <TC_FindMckDivisor+0x74>
    {

        if ( dwFreq > (dwMCk / adwDivisors[dwIndex + 1]) )
  402bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402bf4:	3301      	adds	r3, #1
  402bf6:	009b      	lsls	r3, r3, #2
  402bf8:	aa0a      	add	r2, sp, #40	; 0x28
  402bfa:	4413      	add	r3, r2
  402bfc:	f853 3c18 	ldr.w	r3, [r3, #-24]
  402c00:	9a02      	ldr	r2, [sp, #8]
  402c02:	fbb2 f2f3 	udiv	r2, r2, r3
  402c06:	9b03      	ldr	r3, [sp, #12]
  402c08:	429a      	cmp	r2, r3
  402c0a:	d200      	bcs.n	402c0e <TC_FindMckDivisor+0x6e>
        {
            break ;
  402c0c:	e005      	b.n	402c1a <TC_FindMckDivisor+0x7a>
        }
        dwIndex++ ;
  402c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402c10:	3301      	adds	r3, #1
  402c12:	9309      	str	r3, [sp, #36]	; 0x24
            return 0 ;
        }
    }

    /*  Try to maximize DIV while satisfying upper bound */
    while ( dwIndex < 4 )
  402c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402c16:	2b03      	cmp	r3, #3
  402c18:	d9eb      	bls.n	402bf2 <TC_FindMckDivisor+0x52>
        }
        dwIndex++ ;
    }

    /*  Store results */
    if ( dwDiv )
  402c1a:	9b01      	ldr	r3, [sp, #4]
  402c1c:	2b00      	cmp	r3, #0
  402c1e:	d007      	beq.n	402c30 <TC_FindMckDivisor+0x90>
    {
        *dwDiv = adwDivisors[dwIndex] ;
  402c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402c22:	009b      	lsls	r3, r3, #2
  402c24:	aa0a      	add	r2, sp, #40	; 0x28
  402c26:	4413      	add	r3, r2
  402c28:	f853 2c18 	ldr.w	r2, [r3, #-24]
  402c2c:	9b01      	ldr	r3, [sp, #4]
  402c2e:	601a      	str	r2, [r3, #0]
    }
    if ( dwTcClks )
  402c30:	9b00      	ldr	r3, [sp, #0]
  402c32:	2b00      	cmp	r3, #0
  402c34:	d002      	beq.n	402c3c <TC_FindMckDivisor+0x9c>
    {
        *dwTcClks = dwIndex ;
  402c36:	9b00      	ldr	r3, [sp, #0]
  402c38:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402c3a:	601a      	str	r2, [r3, #0]
    }

    return 1 ;
  402c3c:	2301      	movs	r3, #1
}
  402c3e:	4618      	mov	r0, r3
  402c40:	b00a      	add	sp, #40	; 0x28
  402c42:	4770      	bx	lr

00402c44 <TC_SetWriteprotect>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_enable 1 to enable, 0 to disable.
 */
void TC_SetWriteprotect( Tc *p_tc, uint32_t ul_enable )
{
  402c44:	b082      	sub	sp, #8
  402c46:	9001      	str	r0, [sp, #4]
  402c48:	9100      	str	r1, [sp, #0]
	
	
	if( ul_enable ) 
  402c4a:	9b00      	ldr	r3, [sp, #0]
  402c4c:	2b00      	cmp	r3, #0
  402c4e:	d004      	beq.n	402c5a <TC_SetWriteprotect+0x16>
	{
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD | TC_WPMR_WPEN;
  402c50:	9b01      	ldr	r3, [sp, #4]
  402c52:	4a05      	ldr	r2, [pc, #20]	; (402c68 <TC_SetWriteprotect+0x24>)
  402c54:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  402c58:	e003      	b.n	402c62 <TC_SetWriteprotect+0x1e>
	} 
	else 
	{
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD;
  402c5a:	9b01      	ldr	r3, [sp, #4]
  402c5c:	4a03      	ldr	r2, [pc, #12]	; (402c6c <TC_SetWriteprotect+0x28>)
  402c5e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
  402c62:	b002      	add	sp, #8
  402c64:	4770      	bx	lr
  402c66:	bf00      	nop
  402c68:	54494d01 	.word	0x54494d01
  402c6c:	54494d00 	.word	0x54494d00

00402c70 <PMC_SetWriteprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void PMC_SetWriteprotect( uint32_t ul_enable )
{
  402c70:	b082      	sub	sp, #8
  402c72:	9001      	str	r0, [sp, #4]
	
	
	if( ul_enable ) 
  402c74:	9b01      	ldr	r3, [sp, #4]
  402c76:	2b00      	cmp	r3, #0
  402c78:	d004      	beq.n	402c84 <PMC_SetWriteprotect+0x14>
	{
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
  402c7a:	4b05      	ldr	r3, [pc, #20]	; (402c90 <PMC_SetWriteprotect+0x20>)
  402c7c:	4a05      	ldr	r2, [pc, #20]	; (402c94 <PMC_SetWriteprotect+0x24>)
  402c7e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  402c82:	e003      	b.n	402c8c <PMC_SetWriteprotect+0x1c>
	} 
	else 
	{
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
  402c84:	4b02      	ldr	r3, [pc, #8]	; (402c90 <PMC_SetWriteprotect+0x20>)
  402c86:	4a04      	ldr	r2, [pc, #16]	; (402c98 <PMC_SetWriteprotect+0x28>)
  402c88:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
  402c8c:	b002      	add	sp, #8
  402c8e:	4770      	bx	lr
  402c90:	400e0400 	.word	0x400e0400
  402c94:	504d4301 	.word	0x504d4301
  402c98:	504d4300 	.word	0x504d4300

00402c9c <PMC_EnablePeripheral>:
 * \note The ID must NOT be shifted (i.e. 1 << ID_xxx).
 *
 * \param id  Peripheral ID (ID_xxx).
 */
extern void PMC_EnablePeripheral( uint32_t dwId )
{
  402c9c:	b500      	push	{lr}
  402c9e:	b083      	sub	sp, #12
  402ca0:	9001      	str	r0, [sp, #4]
    assert( dwId < 35 ) ;
  402ca2:	9b01      	ldr	r3, [sp, #4]
  402ca4:	2b22      	cmp	r3, #34	; 0x22
  402ca6:	d905      	bls.n	402cb4 <PMC_EnablePeripheral+0x18>
  402ca8:	481f      	ldr	r0, [pc, #124]	; (402d28 <PMC_EnablePeripheral+0x8c>)
  402caa:	2151      	movs	r1, #81	; 0x51
  402cac:	4a1f      	ldr	r2, [pc, #124]	; (402d2c <PMC_EnablePeripheral+0x90>)
  402cae:	4b20      	ldr	r3, [pc, #128]	; (402d30 <PMC_EnablePeripheral+0x94>)
  402cb0:	f000 fc4e 	bl	403550 <__assert_func>

		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
  402cb4:	4b1f      	ldr	r3, [pc, #124]	; (402d34 <PMC_EnablePeripheral+0x98>)
  402cb6:	4a20      	ldr	r2, [pc, #128]	; (402d38 <PMC_EnablePeripheral+0x9c>)
  402cb8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    if ( dwId < 32 )
  402cbc:	9b01      	ldr	r3, [sp, #4]
  402cbe:	2b1f      	cmp	r3, #31
  402cc0:	d813      	bhi.n	402cea <PMC_EnablePeripheral+0x4e>
    {
        if ( (PMC->PMC_PCSR0 & ((uint32_t)1 << dwId)) == ((uint32_t)1 << dwId) )
  402cc2:	4b1c      	ldr	r3, [pc, #112]	; (402d34 <PMC_EnablePeripheral+0x98>)
  402cc4:	699a      	ldr	r2, [r3, #24]
  402cc6:	9b01      	ldr	r3, [sp, #4]
  402cc8:	2101      	movs	r1, #1
  402cca:	fa01 f303 	lsl.w	r3, r1, r3
  402cce:	401a      	ands	r2, r3
  402cd0:	9b01      	ldr	r3, [sp, #4]
  402cd2:	2101      	movs	r1, #1
  402cd4:	fa01 f303 	lsl.w	r3, r1, r3
  402cd8:	429a      	cmp	r2, r3
  402cda:	d01e      	beq.n	402d1a <PMC_EnablePeripheral+0x7e>
        {
            TRACE_DEBUG( "PMC_EnablePeripheral: clock of peripheral"  " %u is already enabled\n\r", (unsigned int)dwId ) ;
        }
        else
        {
            PMC->PMC_PCER0 = 1 << dwId ;
  402cdc:	4b15      	ldr	r3, [pc, #84]	; (402d34 <PMC_EnablePeripheral+0x98>)
  402cde:	9a01      	ldr	r2, [sp, #4]
  402ce0:	2101      	movs	r1, #1
  402ce2:	fa01 f202 	lsl.w	r2, r1, r2
  402ce6:	611a      	str	r2, [r3, #16]
  402ce8:	e017      	b.n	402d1a <PMC_EnablePeripheral+0x7e>
        }
    }
    else
    {
        dwId -= 32;
  402cea:	9b01      	ldr	r3, [sp, #4]
  402cec:	3b20      	subs	r3, #32
  402cee:	9301      	str	r3, [sp, #4]
        if ((PMC->PMC_PCSR1 & ((uint32_t)1 << dwId)) == ((uint32_t)1 << dwId))
  402cf0:	4b10      	ldr	r3, [pc, #64]	; (402d34 <PMC_EnablePeripheral+0x98>)
  402cf2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402cf6:	9b01      	ldr	r3, [sp, #4]
  402cf8:	2101      	movs	r1, #1
  402cfa:	fa01 f303 	lsl.w	r3, r1, r3
  402cfe:	401a      	ands	r2, r3
  402d00:	9b01      	ldr	r3, [sp, #4]
  402d02:	2101      	movs	r1, #1
  402d04:	fa01 f303 	lsl.w	r3, r1, r3
  402d08:	429a      	cmp	r2, r3
  402d0a:	d006      	beq.n	402d1a <PMC_EnablePeripheral+0x7e>
        {
            TRACE_DEBUG( "PMC_EnablePeripheral: clock of peripheral"  " %u is already enabled\n\r", (unsigned int)(dwId + 32) ) ;
        }
        else
        {
            PMC->PMC_PCER1 = 1 << dwId ;
  402d0c:	4b09      	ldr	r3, [pc, #36]	; (402d34 <PMC_EnablePeripheral+0x98>)
  402d0e:	9a01      	ldr	r2, [sp, #4]
  402d10:	2101      	movs	r1, #1
  402d12:	fa01 f202 	lsl.w	r2, r1, r2
  402d16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        }
    }
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
  402d1a:	4b06      	ldr	r3, [pc, #24]	; (402d34 <PMC_EnablePeripheral+0x98>)
  402d1c:	4a07      	ldr	r2, [pc, #28]	; (402d3c <PMC_EnablePeripheral+0xa0>)
  402d1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  402d22:	b003      	add	sp, #12
  402d24:	f85d fb04 	ldr.w	pc, [sp], #4
  402d28:	00406eec 	.word	0x00406eec
  402d2c:	00406f2c 	.word	0x00406f2c
  402d30:	00406f20 	.word	0x00406f20
  402d34:	400e0400 	.word	0x400e0400
  402d38:	504d4300 	.word	0x504d4300
  402d3c:	504d4301 	.word	0x504d4301

00402d40 <PMC_DisablePeripheral>:
 * \note The ID must NOT be shifted (i.e. 1 << ID_xxx).
 *
 * \param id  Peripheral ID (ID_xxx).
 */
extern void PMC_DisablePeripheral( uint32_t dwId )
{
  402d40:	b500      	push	{lr}
  402d42:	b083      	sub	sp, #12
  402d44:	9001      	str	r0, [sp, #4]
    assert( dwId < 35 ) ;
  402d46:	9b01      	ldr	r3, [sp, #4]
  402d48:	2b22      	cmp	r3, #34	; 0x22
  402d4a:	d905      	bls.n	402d58 <PMC_DisablePeripheral+0x18>
  402d4c:	481f      	ldr	r0, [pc, #124]	; (402dcc <PMC_DisablePeripheral+0x8c>)
  402d4e:	2178      	movs	r1, #120	; 0x78
  402d50:	4a1f      	ldr	r2, [pc, #124]	; (402dd0 <PMC_DisablePeripheral+0x90>)
  402d52:	4b20      	ldr	r3, [pc, #128]	; (402dd4 <PMC_DisablePeripheral+0x94>)
  402d54:	f000 fbfc 	bl	403550 <__assert_func>

		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
  402d58:	4b1f      	ldr	r3, [pc, #124]	; (402dd8 <PMC_DisablePeripheral+0x98>)
  402d5a:	4a20      	ldr	r2, [pc, #128]	; (402ddc <PMC_DisablePeripheral+0x9c>)
  402d5c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    if ( dwId < 32 )
  402d60:	9b01      	ldr	r3, [sp, #4]
  402d62:	2b1f      	cmp	r3, #31
  402d64:	d813      	bhi.n	402d8e <PMC_DisablePeripheral+0x4e>
    {
        if ( (PMC->PMC_PCSR0 & ((uint32_t)1 << dwId)) != ((uint32_t)1 << dwId) )
  402d66:	4b1c      	ldr	r3, [pc, #112]	; (402dd8 <PMC_DisablePeripheral+0x98>)
  402d68:	699a      	ldr	r2, [r3, #24]
  402d6a:	9b01      	ldr	r3, [sp, #4]
  402d6c:	2101      	movs	r1, #1
  402d6e:	fa01 f303 	lsl.w	r3, r1, r3
  402d72:	401a      	ands	r2, r3
  402d74:	9b01      	ldr	r3, [sp, #4]
  402d76:	2101      	movs	r1, #1
  402d78:	fa01 f303 	lsl.w	r3, r1, r3
  402d7c:	429a      	cmp	r2, r3
  402d7e:	d11e      	bne.n	402dbe <PMC_DisablePeripheral+0x7e>
        {
            TRACE_DEBUG("PMC_DisablePeripheral: clock of peripheral" " %u is not enabled\n\r", (unsigned int)dwId ) ;
        }
        else
        {
            PMC->PMC_PCDR0 = 1 << dwId ;
  402d80:	4b15      	ldr	r3, [pc, #84]	; (402dd8 <PMC_DisablePeripheral+0x98>)
  402d82:	9a01      	ldr	r2, [sp, #4]
  402d84:	2101      	movs	r1, #1
  402d86:	fa01 f202 	lsl.w	r2, r1, r2
  402d8a:	615a      	str	r2, [r3, #20]
  402d8c:	e017      	b.n	402dbe <PMC_DisablePeripheral+0x7e>
        }
    }
    else
    {
        dwId -= 32 ;
  402d8e:	9b01      	ldr	r3, [sp, #4]
  402d90:	3b20      	subs	r3, #32
  402d92:	9301      	str	r3, [sp, #4]
        if ( (PMC->PMC_PCSR1 & ((uint32_t)1 << dwId)) != ((uint32_t)1 << dwId) )
  402d94:	4b10      	ldr	r3, [pc, #64]	; (402dd8 <PMC_DisablePeripheral+0x98>)
  402d96:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402d9a:	9b01      	ldr	r3, [sp, #4]
  402d9c:	2101      	movs	r1, #1
  402d9e:	fa01 f303 	lsl.w	r3, r1, r3
  402da2:	401a      	ands	r2, r3
  402da4:	9b01      	ldr	r3, [sp, #4]
  402da6:	2101      	movs	r1, #1
  402da8:	fa01 f303 	lsl.w	r3, r1, r3
  402dac:	429a      	cmp	r2, r3
  402dae:	d106      	bne.n	402dbe <PMC_DisablePeripheral+0x7e>
        {
            TRACE_DEBUG( "PMC_DisablePeripheral: clock of peripheral" " %u is not enabled\n\r", (unsigned int)(dwId + 32) ) ;
        }
        else
        {
            PMC->PMC_PCDR1 = 1 << dwId ;
  402db0:	4b09      	ldr	r3, [pc, #36]	; (402dd8 <PMC_DisablePeripheral+0x98>)
  402db2:	9a01      	ldr	r2, [sp, #4]
  402db4:	2101      	movs	r1, #1
  402db6:	fa01 f202 	lsl.w	r2, r1, r2
  402dba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        }
    }
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
  402dbe:	4b06      	ldr	r3, [pc, #24]	; (402dd8 <PMC_DisablePeripheral+0x98>)
  402dc0:	4a07      	ldr	r2, [pc, #28]	; (402de0 <PMC_DisablePeripheral+0xa0>)
  402dc2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  402dc6:	b003      	add	sp, #12
  402dc8:	f85d fb04 	ldr.w	pc, [sp], #4
  402dcc:	00406eec 	.word	0x00406eec
  402dd0:	00406f44 	.word	0x00406f44
  402dd4:	00406f20 	.word	0x00406f20
  402dd8:	400e0400 	.word	0x400e0400
  402ddc:	504d4300 	.word	0x504d4300
  402de0:	504d4301 	.word	0x504d4301

00402de4 <PMC_EnableAllPeripherals>:
 * \brief Enable all the periph clock via PMC.
 */
extern void PMC_EnableAllPeripherals( void )
{
	
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
  402de4:	4b10      	ldr	r3, [pc, #64]	; (402e28 <PMC_EnableAllPeripherals+0x44>)
  402de6:	4a11      	ldr	r2, [pc, #68]	; (402e2c <PMC_EnableAllPeripherals+0x48>)
  402de8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    PMC->PMC_PCER0 = MASK_STATUS0 ;
  402dec:	4b0e      	ldr	r3, [pc, #56]	; (402e28 <PMC_EnableAllPeripherals+0x44>)
  402dee:	f06f 0203 	mvn.w	r2, #3
  402df2:	611a      	str	r2, [r3, #16]
    while ( (PMC->PMC_PCSR0 & MASK_STATUS0) != MASK_STATUS0 ) ;
  402df4:	bf00      	nop
  402df6:	4b0c      	ldr	r3, [pc, #48]	; (402e28 <PMC_EnableAllPeripherals+0x44>)
  402df8:	699b      	ldr	r3, [r3, #24]
  402dfa:	f023 0303 	bic.w	r3, r3, #3
  402dfe:	f113 0f04 	cmn.w	r3, #4
  402e02:	d1f8      	bne.n	402df6 <PMC_EnableAllPeripherals+0x12>

    PMC->PMC_PCER1 = MASK_STATUS1 ;
  402e04:	4b08      	ldr	r3, [pc, #32]	; (402e28 <PMC_EnableAllPeripherals+0x44>)
  402e06:	f04f 32ff 	mov.w	r2, #4294967295
  402e0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    while ( (PMC->PMC_PCSR1 & MASK_STATUS1) != MASK_STATUS1 ) ;
  402e0e:	bf00      	nop
  402e10:	4b05      	ldr	r3, [pc, #20]	; (402e28 <PMC_EnableAllPeripherals+0x44>)
  402e12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  402e16:	f1b3 3fff 	cmp.w	r3, #4294967295
  402e1a:	d1f9      	bne.n	402e10 <PMC_EnableAllPeripherals+0x2c>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
  402e1c:	4b02      	ldr	r3, [pc, #8]	; (402e28 <PMC_EnableAllPeripherals+0x44>)
  402e1e:	4a04      	ldr	r2, [pc, #16]	; (402e30 <PMC_EnableAllPeripherals+0x4c>)
  402e20:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		
    TRACE_DEBUG( "Enable all periph clocks\n\r" ) ;
}
  402e24:	4770      	bx	lr
  402e26:	bf00      	nop
  402e28:	400e0400 	.word	0x400e0400
  402e2c:	504d4300 	.word	0x504d4300
  402e30:	504d4301 	.word	0x504d4301

00402e34 <PMC_DisableAllPeripherals>:
 * \brief Disable all the periph clock via PMC.
 */
extern void PMC_DisableAllPeripherals( void )
{
	
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
  402e34:	4b0f      	ldr	r3, [pc, #60]	; (402e74 <PMC_DisableAllPeripherals+0x40>)
  402e36:	4a10      	ldr	r2, [pc, #64]	; (402e78 <PMC_DisableAllPeripherals+0x44>)
  402e38:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    PMC->PMC_PCDR0 = MASK_STATUS0 ;
  402e3c:	4b0d      	ldr	r3, [pc, #52]	; (402e74 <PMC_DisableAllPeripherals+0x40>)
  402e3e:	f06f 0203 	mvn.w	r2, #3
  402e42:	615a      	str	r2, [r3, #20]
    while ( (PMC->PMC_PCSR0 & MASK_STATUS0) != 0 ) ;
  402e44:	bf00      	nop
  402e46:	4b0b      	ldr	r3, [pc, #44]	; (402e74 <PMC_DisableAllPeripherals+0x40>)
  402e48:	699b      	ldr	r3, [r3, #24]
  402e4a:	f023 0303 	bic.w	r3, r3, #3
  402e4e:	2b00      	cmp	r3, #0
  402e50:	d1f9      	bne.n	402e46 <PMC_DisableAllPeripherals+0x12>

    PMC->PMC_PCDR1 = MASK_STATUS1 ;
  402e52:	4b08      	ldr	r3, [pc, #32]	; (402e74 <PMC_DisableAllPeripherals+0x40>)
  402e54:	f04f 32ff 	mov.w	r2, #4294967295
  402e58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    while ( (PMC->PMC_PCSR1 & MASK_STATUS1) != 0 ) ;
  402e5c:	bf00      	nop
  402e5e:	4b05      	ldr	r3, [pc, #20]	; (402e74 <PMC_DisableAllPeripherals+0x40>)
  402e60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  402e64:	2b00      	cmp	r3, #0
  402e66:	d1fa      	bne.n	402e5e <PMC_DisableAllPeripherals+0x2a>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
  402e68:	4b02      	ldr	r3, [pc, #8]	; (402e74 <PMC_DisableAllPeripherals+0x40>)
  402e6a:	4a04      	ldr	r2, [pc, #16]	; (402e7c <PMC_DisableAllPeripherals+0x48>)
  402e6c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		
    TRACE_DEBUG( "Disable all periph clocks\n\r" ) ;
}
  402e70:	4770      	bx	lr
  402e72:	bf00      	nop
  402e74:	400e0400 	.word	0x400e0400
  402e78:	504d4300 	.word	0x504d4300
  402e7c:	504d4301 	.word	0x504d4301

00402e80 <PMC_IsPeriphEnabled>:
 * \brief Get Periph Status for the given peripheral ID.
 *
 * \param id  Peripheral ID (ID_xxx).
 */
extern uint32_t PMC_IsPeriphEnabled( uint32_t dwId )
{
  402e80:	b500      	push	{lr}
  402e82:	b083      	sub	sp, #12
  402e84:	9001      	str	r0, [sp, #4]
    assert( dwId < 35 ) ;
  402e86:	9b01      	ldr	r3, [sp, #4]
  402e88:	2b22      	cmp	r3, #34	; 0x22
  402e8a:	d905      	bls.n	402e98 <PMC_IsPeriphEnabled+0x18>
  402e8c:	480e      	ldr	r0, [pc, #56]	; (402ec8 <PMC_IsPeriphEnabled+0x48>)
  402e8e:	21be      	movs	r1, #190	; 0xbe
  402e90:	4a0e      	ldr	r2, [pc, #56]	; (402ecc <PMC_IsPeriphEnabled+0x4c>)
  402e92:	4b0f      	ldr	r3, [pc, #60]	; (402ed0 <PMC_IsPeriphEnabled+0x50>)
  402e94:	f000 fb5c 	bl	403550 <__assert_func>

    if ( dwId < 32 )
  402e98:	9b01      	ldr	r3, [sp, #4]
  402e9a:	2b1f      	cmp	r3, #31
  402e9c:	d807      	bhi.n	402eae <PMC_IsPeriphEnabled+0x2e>
    {
        return ( PMC->PMC_PCSR0 & (1 << dwId) ) ;
  402e9e:	4b0d      	ldr	r3, [pc, #52]	; (402ed4 <PMC_IsPeriphEnabled+0x54>)
  402ea0:	699a      	ldr	r2, [r3, #24]
  402ea2:	9b01      	ldr	r3, [sp, #4]
  402ea4:	2101      	movs	r1, #1
  402ea6:	fa01 f303 	lsl.w	r3, r1, r3
  402eaa:	4013      	ands	r3, r2
  402eac:	e008      	b.n	402ec0 <PMC_IsPeriphEnabled+0x40>
    }
    else {
        return ( PMC->PMC_PCSR1 & (1 << (dwId - 32)) ) ;
  402eae:	4b09      	ldr	r3, [pc, #36]	; (402ed4 <PMC_IsPeriphEnabled+0x54>)
  402eb0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402eb4:	9b01      	ldr	r3, [sp, #4]
  402eb6:	3b20      	subs	r3, #32
  402eb8:	2101      	movs	r1, #1
  402eba:	fa01 f303 	lsl.w	r3, r1, r3
  402ebe:	4013      	ands	r3, r2
    }
}
  402ec0:	4618      	mov	r0, r3
  402ec2:	b003      	add	sp, #12
  402ec4:	f85d fb04 	ldr.w	pc, [sp], #4
  402ec8:	00406eec 	.word	0x00406eec
  402ecc:	00406f5c 	.word	0x00406f5c
  402ed0:	00406f20 	.word	0x00406f20
  402ed4:	400e0400 	.word	0x400e0400

00402ed8 <MCI_Enable>:
/**
 * Enable MCI
 * \param pMciHw  Pointer to a MCI peripheral.
 */
void  MCI_Enable(Hsmci *pMciHw)
{
  402ed8:	b082      	sub	sp, #8
  402eda:	9001      	str	r0, [sp, #4]
    pMciHw->HSMCI_CR = HSMCI_CR_MCIEN;
  402edc:	9b01      	ldr	r3, [sp, #4]
  402ede:	2201      	movs	r2, #1
  402ee0:	601a      	str	r2, [r3, #0]
}
  402ee2:	b002      	add	sp, #8
  402ee4:	4770      	bx	lr
  402ee6:	bf00      	nop

00402ee8 <MCI_Disable>:
/**
 * Disable MCI
 * \param pMciHw  Pointer to a MCI peripheral.
 */
void  MCI_Disable(Hsmci *pMciHw)
{
  402ee8:	b082      	sub	sp, #8
  402eea:	9001      	str	r0, [sp, #4]
    pMciHw->HSMCI_CR = HSMCI_CR_MCIDIS;
  402eec:	9b01      	ldr	r3, [sp, #4]
  402eee:	2202      	movs	r2, #2
  402ef0:	601a      	str	r2, [r3, #0]
}
  402ef2:	b002      	add	sp, #8
  402ef4:	4770      	bx	lr
  402ef6:	bf00      	nop

00402ef8 <MCI_Init>:
 * \param pMci    Pointer to a MCI driver instance.
 * \param pMciHw  Pointer to a MCI peripheral.
 * \param mciId   MCI peripheral identifier.
 */
void MCI_Init( Mcid *pMci, Hsmci *pMciHw, uint8_t mciId, uint32_t dwMCk )
{
  402ef8:	b500      	push	{lr}
  402efa:	b087      	sub	sp, #28
  402efc:	9003      	str	r0, [sp, #12]
  402efe:	9102      	str	r1, [sp, #8]
  402f00:	9300      	str	r3, [sp, #0]
  402f02:	4613      	mov	r3, r2
  402f04:	f88d 3007 	strb.w	r3, [sp, #7]
    unsigned short clkDiv;

    /* Initialize the MCI driver structure */
    pMci->pMciHw    = pMciHw;
  402f08:	9b03      	ldr	r3, [sp, #12]
  402f0a:	9a02      	ldr	r2, [sp, #8]
  402f0c:	601a      	str	r2, [r3, #0]
    pMci->mciId     = mciId;
  402f0e:	9b03      	ldr	r3, [sp, #12]
  402f10:	f89d 2007 	ldrb.w	r2, [sp, #7]
  402f14:	721a      	strb	r2, [r3, #8]
    pMci->semaphore = 1;
  402f16:	9b03      	ldr	r3, [sp, #12]
  402f18:	2201      	movs	r2, #1
  402f1a:	725a      	strb	r2, [r3, #9]
    pMci->pCommand  = NULL;
  402f1c:	9b03      	ldr	r3, [sp, #12]
  402f1e:	2200      	movs	r2, #0
  402f20:	605a      	str	r2, [r3, #4]

    /* Enable the MCI peripheral */
    PMC_EnablePeripheral( mciId ) ;
  402f22:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402f26:	4618      	mov	r0, r3
  402f28:	f7ff feb8 	bl	402c9c <PMC_EnablePeripheral>

    /* Reset the MCI */
    pMciHw->HSMCI_CR = HSMCI_CR_SWRST;
  402f2c:	9b02      	ldr	r3, [sp, #8]
  402f2e:	2280      	movs	r2, #128	; 0x80
  402f30:	601a      	str	r2, [r3, #0]

    /* Disable the MCI */
    pMciHw->HSMCI_CR = HSMCI_CR_MCIDIS | HSMCI_CR_PWSDIS;
  402f32:	9b02      	ldr	r3, [sp, #8]
  402f34:	220a      	movs	r2, #10
  402f36:	601a      	str	r2, [r3, #0]

    /* Disable all the interrupts */
    pMciHw->HSMCI_IDR = 0xFFFFFFFF;
  402f38:	9b02      	ldr	r3, [sp, #8]
  402f3a:	f04f 32ff 	mov.w	r2, #4294967295
  402f3e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Set the Data Timeout Register */
    pMciHw->HSMCI_DTOR = HSMCI_DTOR_DTOCYC_Msk | HSMCI_DTOR_DTOMUL_Msk ;
  402f40:	9b02      	ldr	r3, [sp, #8]
  402f42:	227f      	movs	r2, #127	; 0x7f
  402f44:	609a      	str	r2, [r3, #8]
    /* CSTOR ? */
    pMciHw->HSMCI_CSTOR = HSMCI_CSTOR_CSTOCYC_Msk | HSMCI_CSTOR_CSTOMUL_Msk ;
  402f46:	9b02      	ldr	r3, [sp, #8]
  402f48:	227f      	movs	r2, #127	; 0x7f
  402f4a:	61da      	str	r2, [r3, #28]

    /* Set the Mode Register: 400KHz for MCK = 48MHz (CLKDIV = 58) */
    clkDiv = (dwMCk / (MCI_INITIAL_SPEED * 2)) - 1;
  402f4c:	9b00      	ldr	r3, [sp, #0]
  402f4e:	0a1a      	lsrs	r2, r3, #8
  402f50:	4b10      	ldr	r3, [pc, #64]	; (402f94 <MCI_Init+0x9c>)
  402f52:	fba3 1302 	umull	r1, r3, r3, r2
  402f56:	091b      	lsrs	r3, r3, #4
  402f58:	b29b      	uxth	r3, r3
  402f5a:	3b01      	subs	r3, #1
  402f5c:	f8ad 3016 	strh.w	r3, [sp, #22]
    pMciHw->HSMCI_MR = (clkDiv | (HSMCI_MR_PWSDIV( 0x07 )) ) ;
  402f60:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402f64:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
  402f68:	b29b      	uxth	r3, r3
  402f6a:	461a      	mov	r2, r3
  402f6c:	9b02      	ldr	r3, [sp, #8]
  402f6e:	605a      	str	r2, [r3, #4]

    /* Set the SDCard Register 1-bit, slot A */
    pMciHw->HSMCI_SDCR = HSMCI_SDCR_SDCSEL_SLOTA | HSMCI_SDCR_SDCBUS_1 ;
  402f70:	9b02      	ldr	r3, [sp, #8]
  402f72:	2200      	movs	r2, #0
  402f74:	60da      	str	r2, [r3, #12]

    /* Enable the MCI and the Power Saving */
    pMciHw->HSMCI_CR = HSMCI_CR_MCIEN;
  402f76:	9b02      	ldr	r3, [sp, #8]
  402f78:	2201      	movs	r2, #1
  402f7a:	601a      	str	r2, [r3, #0]

    /* Configure MCI */
    pMciHw->HSMCI_CFG = HSMCI_CFG_FIFOMODE
  402f7c:	9b02      	ldr	r3, [sp, #8]
  402f7e:	2211      	movs	r2, #17
  402f80:	655a      	str	r2, [r3, #84]	; 0x54
                      | ((1 << 4) & HSMCI_CFG_FERRCTRL);

    /* Disable the MCI peripheral clock. */
    PMC_DisablePeripheral(mciId);
  402f82:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402f86:	4618      	mov	r0, r3
  402f88:	f7ff feda 	bl	402d40 <PMC_DisablePeripheral>
}
  402f8c:	b007      	add	sp, #28
  402f8e:	f85d fb04 	ldr.w	pc, [sp], #4
  402f92:	bf00      	nop
  402f94:	014f8b59 	.word	0x014f8b59

00402f98 <MCI_Reset>:
 * Reset MCI HW interface and disable it.
 * \param keepSettings Keep old register settings, including
 *                     _MR, _SDCR, _DTOR, _CSTOR, _DMA and _CFG.
 */
void MCI_Reset(Mcid *pMci, uint8_t keepSettings)
{
  402f98:	b500      	push	{lr}
  402f9a:	b08b      	sub	sp, #44	; 0x2c
  402f9c:	9001      	str	r0, [sp, #4]
  402f9e:	460b      	mov	r3, r1
  402fa0:	f88d 3003 	strb.w	r3, [sp, #3]
    Hsmci *pMciHw = pMci->pMciHw;
  402fa4:	9b01      	ldr	r3, [sp, #4]
  402fa6:	681b      	ldr	r3, [r3, #0]
  402fa8:	9309      	str	r3, [sp, #36]	; 0x24
    uint8_t mciDis;

    assert(pMci);
  402faa:	9b01      	ldr	r3, [sp, #4]
  402fac:	2b00      	cmp	r3, #0
  402fae:	d105      	bne.n	402fbc <MCI_Reset+0x24>
  402fb0:	482b      	ldr	r0, [pc, #172]	; (403060 <MCI_Reset+0xc8>)
  402fb2:	2188      	movs	r1, #136	; 0x88
  402fb4:	4a2b      	ldr	r2, [pc, #172]	; (403064 <MCI_Reset+0xcc>)
  402fb6:	4b2c      	ldr	r3, [pc, #176]	; (403068 <MCI_Reset+0xd0>)
  402fb8:	f000 faca 	bl	403550 <__assert_func>
    assert(pMci->pMciHw);
  402fbc:	9b01      	ldr	r3, [sp, #4]
  402fbe:	681b      	ldr	r3, [r3, #0]
  402fc0:	2b00      	cmp	r3, #0
  402fc2:	d105      	bne.n	402fd0 <MCI_Reset+0x38>
  402fc4:	4826      	ldr	r0, [pc, #152]	; (403060 <MCI_Reset+0xc8>)
  402fc6:	2189      	movs	r1, #137	; 0x89
  402fc8:	4a26      	ldr	r2, [pc, #152]	; (403064 <MCI_Reset+0xcc>)
  402fca:	4b28      	ldr	r3, [pc, #160]	; (40306c <MCI_Reset+0xd4>)
  402fcc:	f000 fac0 	bl	403550 <__assert_func>

    PMC_EnablePeripheral(pMci->mciId);
  402fd0:	9b01      	ldr	r3, [sp, #4]
  402fd2:	7a1b      	ldrb	r3, [r3, #8]
  402fd4:	4618      	mov	r0, r3
  402fd6:	f7ff fe61 	bl	402c9c <PMC_EnablePeripheral>
    mciDis = PMC_IsPeriphEnabled(pMci->mciId);
  402fda:	9b01      	ldr	r3, [sp, #4]
  402fdc:	7a1b      	ldrb	r3, [r3, #8]
  402fde:	4618      	mov	r0, r3
  402fe0:	f7ff ff4e 	bl	402e80 <PMC_IsPeriphEnabled>
  402fe4:	4603      	mov	r3, r0
  402fe6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    if (keepSettings)
  402fea:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402fee:	2b00      	cmp	r3, #0
  402ff0:	d024      	beq.n	40303c <MCI_Reset+0xa4>
    {
        uint32_t mr, sdcr, dtor, cstor;
        uint32_t cfg;
        mr    = pMciHw->HSMCI_MR;
  402ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402ff4:	685b      	ldr	r3, [r3, #4]
  402ff6:	9307      	str	r3, [sp, #28]
        sdcr  = pMciHw->HSMCI_SDCR;
  402ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402ffa:	68db      	ldr	r3, [r3, #12]
  402ffc:	9306      	str	r3, [sp, #24]
        dtor  = pMciHw->HSMCI_DTOR;
  402ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403000:	689b      	ldr	r3, [r3, #8]
  403002:	9305      	str	r3, [sp, #20]
        cstor = pMciHw->HSMCI_CSTOR;
  403004:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403006:	69db      	ldr	r3, [r3, #28]
  403008:	9304      	str	r3, [sp, #16]
        cfg   = pMciHw->HSMCI_CFG;
  40300a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  40300e:	9303      	str	r3, [sp, #12]
        MCI_RESET(pMciHw);
  403010:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403012:	2280      	movs	r2, #128	; 0x80
  403014:	601a      	str	r2, [r3, #0]
        MCI_Disable(pMciHw);
  403016:	9809      	ldr	r0, [sp, #36]	; 0x24
  403018:	f7ff ff66 	bl	402ee8 <MCI_Disable>
        pMciHw->HSMCI_MR    = mr;
  40301c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40301e:	9a07      	ldr	r2, [sp, #28]
  403020:	605a      	str	r2, [r3, #4]
        pMciHw->HSMCI_SDCR  = sdcr;
  403022:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403024:	9a06      	ldr	r2, [sp, #24]
  403026:	60da      	str	r2, [r3, #12]
        pMciHw->HSMCI_DTOR  = dtor;
  403028:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40302a:	9a05      	ldr	r2, [sp, #20]
  40302c:	609a      	str	r2, [r3, #8]
        pMciHw->HSMCI_CSTOR = cstor;
  40302e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403030:	9a04      	ldr	r2, [sp, #16]
  403032:	61da      	str	r2, [r3, #28]
        pMciHw->HSMCI_CFG   = cfg;
  403034:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403036:	9a03      	ldr	r2, [sp, #12]
  403038:	655a      	str	r2, [r3, #84]	; 0x54
  40303a:	e005      	b.n	403048 <MCI_Reset+0xb0>
    }
    else
    {
        MCI_RESET(pMciHw);
  40303c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40303e:	2280      	movs	r2, #128	; 0x80
  403040:	601a      	str	r2, [r3, #0]
        MCI_Disable(pMciHw);
  403042:	9809      	ldr	r0, [sp, #36]	; 0x24
  403044:	f7ff ff50 	bl	402ee8 <MCI_Disable>
    }
    if ( mciDis )
  403048:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
  40304c:	2b00      	cmp	r3, #0
  40304e:	d004      	beq.n	40305a <MCI_Reset+0xc2>
    {
        PMC_DisablePeripheral( pMci->mciId ) ;
  403050:	9b01      	ldr	r3, [sp, #4]
  403052:	7a1b      	ldrb	r3, [r3, #8]
  403054:	4618      	mov	r0, r3
  403056:	f7ff fe73 	bl	402d40 <PMC_DisablePeripheral>
    }
}
  40305a:	b00b      	add	sp, #44	; 0x2c
  40305c:	f85d fb04 	ldr.w	pc, [sp], #4
  403060:	00406f70 	.word	0x00406f70
  403064:	00406fe4 	.word	0x00406fe4
  403068:	00406fa8 	.word	0x00406fa8
  40306c:	00406fb0 	.word	0x00406fb0

00403070 <MCI_SetSpeed>:
 * \param mciSpeed  MCI clock speed in Hz, 0 will not change current speed.
 * \param mck       MCK to generate MCI Clock, in Hz
 * \return The actual speed used, 0 for fail.
 */
uint32_t MCI_SetSpeed( Mcid* pMci, uint32_t mciSpeed, uint32_t mck )
{
  403070:	b500      	push	{lr}
  403072:	b089      	sub	sp, #36	; 0x24
  403074:	9003      	str	r0, [sp, #12]
  403076:	9102      	str	r1, [sp, #8]
  403078:	9201      	str	r2, [sp, #4]
    Hsmci *pMciHw = pMci->pMciHw;
  40307a:	9b03      	ldr	r3, [sp, #12]
  40307c:	681b      	ldr	r3, [r3, #0]
  40307e:	9306      	str	r3, [sp, #24]
    uint32_t mciMr;
    uint32_t clkdiv;
    uint8_t  mciDis;

    assert(pMci);
  403080:	9b03      	ldr	r3, [sp, #12]
  403082:	2b00      	cmp	r3, #0
  403084:	d105      	bne.n	403092 <MCI_SetSpeed+0x22>
  403086:	4831      	ldr	r0, [pc, #196]	; (40314c <MCI_SetSpeed+0xdc>)
  403088:	21b8      	movs	r1, #184	; 0xb8
  40308a:	4a31      	ldr	r2, [pc, #196]	; (403150 <MCI_SetSpeed+0xe0>)
  40308c:	4b31      	ldr	r3, [pc, #196]	; (403154 <MCI_SetSpeed+0xe4>)
  40308e:	f000 fa5f 	bl	403550 <__assert_func>
    assert(pMciHw);
  403092:	9b06      	ldr	r3, [sp, #24]
  403094:	2b00      	cmp	r3, #0
  403096:	d105      	bne.n	4030a4 <MCI_SetSpeed+0x34>
  403098:	482c      	ldr	r0, [pc, #176]	; (40314c <MCI_SetSpeed+0xdc>)
  40309a:	21b9      	movs	r1, #185	; 0xb9
  40309c:	4a2c      	ldr	r2, [pc, #176]	; (403150 <MCI_SetSpeed+0xe0>)
  40309e:	4b2e      	ldr	r3, [pc, #184]	; (403158 <MCI_SetSpeed+0xe8>)
  4030a0:	f000 fa56 	bl	403550 <__assert_func>

    PMC_EnablePeripheral(pMci->mciId);
  4030a4:	9b03      	ldr	r3, [sp, #12]
  4030a6:	7a1b      	ldrb	r3, [r3, #8]
  4030a8:	4618      	mov	r0, r3
  4030aa:	f7ff fdf7 	bl	402c9c <PMC_EnablePeripheral>
    mciDis = PMC_IsPeriphEnabled(pMci->mciId);
  4030ae:	9b03      	ldr	r3, [sp, #12]
  4030b0:	7a1b      	ldrb	r3, [r3, #8]
  4030b2:	4618      	mov	r0, r3
  4030b4:	f7ff fee4 	bl	402e80 <PMC_IsPeriphEnabled>
  4030b8:	4603      	mov	r3, r0
  4030ba:	f88d 3017 	strb.w	r3, [sp, #23]

    mciMr = pMciHw->HSMCI_MR & (~(uint32_t)HSMCI_MR_CLKDIV_Msk);
  4030be:	9b06      	ldr	r3, [sp, #24]
  4030c0:	685b      	ldr	r3, [r3, #4]
  4030c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  4030c6:	9304      	str	r3, [sp, #16]
    /* Multimedia Card Interface clock (MCCK or MCI_CK) is Master Clock (MCK)
     * divided by (2*(CLKDIV+1))
     * mciSpeed = MCK / (2*(CLKDIV+1)) */
    if (mciSpeed > 0)
  4030c8:	9b02      	ldr	r3, [sp, #8]
  4030ca:	2b00      	cmp	r3, #0
  4030cc:	d021      	beq.n	403112 <MCI_SetSpeed+0xa2>
    {
        clkdiv = (mck / 2 / mciSpeed);
  4030ce:	9b01      	ldr	r3, [sp, #4]
  4030d0:	085a      	lsrs	r2, r3, #1
  4030d2:	9b02      	ldr	r3, [sp, #8]
  4030d4:	fbb2 f3f3 	udiv	r3, r2, r3
  4030d8:	9307      	str	r3, [sp, #28]
        /* Speed should not bigger than expired one */
        if (mciSpeed < mck/2/clkdiv)
  4030da:	9b01      	ldr	r3, [sp, #4]
  4030dc:	085a      	lsrs	r2, r3, #1
  4030de:	9b07      	ldr	r3, [sp, #28]
  4030e0:	fbb2 f2f3 	udiv	r2, r2, r3
  4030e4:	9b02      	ldr	r3, [sp, #8]
  4030e6:	429a      	cmp	r2, r3
  4030e8:	d902      	bls.n	4030f0 <MCI_SetSpeed+0x80>
        {
            clkdiv ++;
  4030ea:	9b07      	ldr	r3, [sp, #28]
  4030ec:	3301      	adds	r3, #1
  4030ee:	9307      	str	r3, [sp, #28]
        }
		
        if ( clkdiv > 0 )
  4030f0:	9b07      	ldr	r3, [sp, #28]
  4030f2:	2b00      	cmp	r3, #0
  4030f4:	d002      	beq.n	4030fc <MCI_SetSpeed+0x8c>
        {
            clkdiv -= 1;
  4030f6:	9b07      	ldr	r3, [sp, #28]
  4030f8:	3b01      	subs	r3, #1
  4030fa:	9307      	str	r3, [sp, #28]
        }
        assert( (clkdiv & 0xFFFFFF00) == 0 ) ; /* "mciSpeed too small" */
  4030fc:	9b07      	ldr	r3, [sp, #28]
  4030fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  403102:	2b00      	cmp	r3, #0
  403104:	d007      	beq.n	403116 <MCI_SetSpeed+0xa6>
  403106:	4811      	ldr	r0, [pc, #68]	; (40314c <MCI_SetSpeed+0xdc>)
  403108:	21cf      	movs	r1, #207	; 0xcf
  40310a:	4a11      	ldr	r2, [pc, #68]	; (403150 <MCI_SetSpeed+0xe0>)
  40310c:	4b13      	ldr	r3, [pc, #76]	; (40315c <MCI_SetSpeed+0xec>)
  40310e:	f000 fa1f 	bl	403550 <__assert_func>
    }
    else
    {
	    clkdiv = 0 ;
  403112:	2300      	movs	r3, #0
  403114:	9307      	str	r3, [sp, #28]
    }

    /* Actual MCI speed */
    mciSpeed = mck / 2 / (clkdiv + 1);
  403116:	9b01      	ldr	r3, [sp, #4]
  403118:	085a      	lsrs	r2, r3, #1
  40311a:	9b07      	ldr	r3, [sp, #28]
  40311c:	3301      	adds	r3, #1
  40311e:	fbb2 f3f3 	udiv	r3, r2, r3
  403122:	9302      	str	r3, [sp, #8]
    /* Modify MR */
    pMciHw->HSMCI_MR = mciMr | clkdiv;
  403124:	9a04      	ldr	r2, [sp, #16]
  403126:	9b07      	ldr	r3, [sp, #28]
  403128:	431a      	orrs	r2, r3
  40312a:	9b06      	ldr	r3, [sp, #24]
  40312c:	605a      	str	r2, [r3, #4]
    if ( mciDis )
  40312e:	f89d 3017 	ldrb.w	r3, [sp, #23]
  403132:	2b00      	cmp	r3, #0
  403134:	d004      	beq.n	403140 <MCI_SetSpeed+0xd0>
    {
        PMC_DisablePeripheral( pMci->mciId ) ;
  403136:	9b03      	ldr	r3, [sp, #12]
  403138:	7a1b      	ldrb	r3, [r3, #8]
  40313a:	4618      	mov	r0, r3
  40313c:	f7ff fe00 	bl	402d40 <PMC_DisablePeripheral>
    }

    return (mciSpeed);
  403140:	9b02      	ldr	r3, [sp, #8]
}
  403142:	4618      	mov	r0, r3
  403144:	b009      	add	sp, #36	; 0x24
  403146:	f85d fb04 	ldr.w	pc, [sp], #4
  40314a:	bf00      	nop
  40314c:	00406f70 	.word	0x00406f70
  403150:	00406ff0 	.word	0x00406ff0
  403154:	00406fa8 	.word	0x00406fa8
  403158:	00406fc0 	.word	0x00406fc0
  40315c:	00406fc8 	.word	0x00406fc8

00403160 <MCI_EnableHsMode>:
 * Configure the MCI_CFG to enable the HS mode
 * \param pMci     Pointer to the low level MCI driver.
 * \param hsEnable 1 to enable, 0 to disable HS mode.
 */
uint8_t MCI_EnableHsMode(Mcid* pMci, uint8_t hsEnable)
{
  403160:	b500      	push	{lr}
  403162:	b087      	sub	sp, #28
  403164:	9001      	str	r0, [sp, #4]
  403166:	460b      	mov	r3, r1
  403168:	f88d 3003 	strb.w	r3, [sp, #3]
    Hsmci *pMciHw = pMci->pMciHw;
  40316c:	9b01      	ldr	r3, [sp, #4]
  40316e:	681b      	ldr	r3, [r3, #0]
  403170:	9303      	str	r3, [sp, #12]
    uint32_t cfgr;
    uint8_t mciDis;
    uint8_t rc = 0;
  403172:	2300      	movs	r3, #0
  403174:	f88d 3013 	strb.w	r3, [sp, #19]

    assert(pMci);
  403178:	9b01      	ldr	r3, [sp, #4]
  40317a:	2b00      	cmp	r3, #0
  40317c:	d105      	bne.n	40318a <MCI_EnableHsMode+0x2a>
  40317e:	4827      	ldr	r0, [pc, #156]	; (40321c <MCI_EnableHsMode+0xbc>)
  403180:	21ee      	movs	r1, #238	; 0xee
  403182:	4a27      	ldr	r2, [pc, #156]	; (403220 <MCI_EnableHsMode+0xc0>)
  403184:	4b27      	ldr	r3, [pc, #156]	; (403224 <MCI_EnableHsMode+0xc4>)
  403186:	f000 f9e3 	bl	403550 <__assert_func>
    assert(pMci->pMciHw);
  40318a:	9b01      	ldr	r3, [sp, #4]
  40318c:	681b      	ldr	r3, [r3, #0]
  40318e:	2b00      	cmp	r3, #0
  403190:	d105      	bne.n	40319e <MCI_EnableHsMode+0x3e>
  403192:	4822      	ldr	r0, [pc, #136]	; (40321c <MCI_EnableHsMode+0xbc>)
  403194:	21ef      	movs	r1, #239	; 0xef
  403196:	4a22      	ldr	r2, [pc, #136]	; (403220 <MCI_EnableHsMode+0xc0>)
  403198:	4b23      	ldr	r3, [pc, #140]	; (403228 <MCI_EnableHsMode+0xc8>)
  40319a:	f000 f9d9 	bl	403550 <__assert_func>

    PMC_EnablePeripheral(pMci->mciId);
  40319e:	9b01      	ldr	r3, [sp, #4]
  4031a0:	7a1b      	ldrb	r3, [r3, #8]
  4031a2:	4618      	mov	r0, r3
  4031a4:	f7ff fd7a 	bl	402c9c <PMC_EnablePeripheral>
    mciDis = PMC_IsPeriphEnabled(pMci->mciId);
  4031a8:	9b01      	ldr	r3, [sp, #4]
  4031aa:	7a1b      	ldrb	r3, [r3, #8]
  4031ac:	4618      	mov	r0, r3
  4031ae:	f7ff fe67 	bl	402e80 <PMC_IsPeriphEnabled>
  4031b2:	4603      	mov	r3, r0
  4031b4:	f88d 300b 	strb.w	r3, [sp, #11]

    cfgr = pMciHw->HSMCI_CFG;
  4031b8:	9b03      	ldr	r3, [sp, #12]
  4031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  4031bc:	9305      	str	r3, [sp, #20]
    if (hsEnable == 1)
  4031be:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4031c2:	2b01      	cmp	r3, #1
  4031c4:	d104      	bne.n	4031d0 <MCI_EnableHsMode+0x70>
    {
        cfgr |=  HSMCI_CFG_HSMODE;
  4031c6:	9b05      	ldr	r3, [sp, #20]
  4031c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4031cc:	9305      	str	r3, [sp, #20]
  4031ce:	e012      	b.n	4031f6 <MCI_EnableHsMode+0x96>
    }
    else
    {
        if (hsEnable == 0)
  4031d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4031d4:	2b00      	cmp	r3, #0
  4031d6:	d104      	bne.n	4031e2 <MCI_EnableHsMode+0x82>
        {
            cfgr &= ~(uint32_t)HSMCI_CFG_HSMODE;
  4031d8:	9b05      	ldr	r3, [sp, #20]
  4031da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4031de:	9305      	str	r3, [sp, #20]
  4031e0:	e009      	b.n	4031f6 <MCI_EnableHsMode+0x96>
        }
        else
        {
            rc = ((cfgr & HSMCI_CFG_HSMODE) != 0);
  4031e2:	9b05      	ldr	r3, [sp, #20]
  4031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4031e8:	2b00      	cmp	r3, #0
  4031ea:	bf0c      	ite	eq
  4031ec:	2300      	moveq	r3, #0
  4031ee:	2301      	movne	r3, #1
  4031f0:	b2db      	uxtb	r3, r3
  4031f2:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }

    pMciHw->HSMCI_CFG = cfgr;
  4031f6:	9b03      	ldr	r3, [sp, #12]
  4031f8:	9a05      	ldr	r2, [sp, #20]
  4031fa:	655a      	str	r2, [r3, #84]	; 0x54
    if (mciDis)
  4031fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
  403200:	2b00      	cmp	r3, #0
  403202:	d004      	beq.n	40320e <MCI_EnableHsMode+0xae>
    {
        PMC_DisablePeripheral(pMci->mciId);
  403204:	9b01      	ldr	r3, [sp, #4]
  403206:	7a1b      	ldrb	r3, [r3, #8]
  403208:	4618      	mov	r0, r3
  40320a:	f7ff fd99 	bl	402d40 <PMC_DisablePeripheral>
    }

    return rc;
  40320e:	f89d 3013 	ldrb.w	r3, [sp, #19]
}
  403212:	4618      	mov	r0, r3
  403214:	b007      	add	sp, #28
  403216:	f85d fb04 	ldr.w	pc, [sp], #4
  40321a:	bf00      	nop
  40321c:	00406f70 	.word	0x00406f70
  403220:	00407000 	.word	0x00407000
  403224:	00406fa8 	.word	0x00406fa8
  403228:	00406fb0 	.word	0x00406fb0

0040322c <MCI_SetBusWidth>:
 *
 * \param pMci  Pointer to the low level MCI driver.
 * \param busWidth  MCI bus width mode. 00: 1-bit, 10: 4-bit, 11: 8-bit.
 */
uint32_t MCI_SetBusWidth(Mcid*pMci, uint32_t busWidth)
{
  40322c:	b500      	push	{lr}
  40322e:	b087      	sub	sp, #28
  403230:	9001      	str	r0, [sp, #4]
  403232:	9100      	str	r1, [sp, #0]
    Hsmci *pMciHw = pMci->pMciHw;
  403234:	9b01      	ldr	r3, [sp, #4]
  403236:	681b      	ldr	r3, [r3, #0]
  403238:	9305      	str	r3, [sp, #20]
    uint32_t mciSdcr;
    uint8_t mciDis;

    assert(pMci);
  40323a:	9b01      	ldr	r3, [sp, #4]
  40323c:	2b00      	cmp	r3, #0
  40323e:	d106      	bne.n	40324e <MCI_SetBusWidth+0x22>
  403240:	4823      	ldr	r0, [pc, #140]	; (4032d0 <MCI_SetBusWidth+0xa4>)
  403242:	f44f 718d 	mov.w	r1, #282	; 0x11a
  403246:	4a23      	ldr	r2, [pc, #140]	; (4032d4 <MCI_SetBusWidth+0xa8>)
  403248:	4b23      	ldr	r3, [pc, #140]	; (4032d8 <MCI_SetBusWidth+0xac>)
  40324a:	f000 f981 	bl	403550 <__assert_func>
    assert(pMci->pMciHw);
  40324e:	9b01      	ldr	r3, [sp, #4]
  403250:	681b      	ldr	r3, [r3, #0]
  403252:	2b00      	cmp	r3, #0
  403254:	d106      	bne.n	403264 <MCI_SetBusWidth+0x38>
  403256:	481e      	ldr	r0, [pc, #120]	; (4032d0 <MCI_SetBusWidth+0xa4>)
  403258:	f240 111b 	movw	r1, #283	; 0x11b
  40325c:	4a1d      	ldr	r2, [pc, #116]	; (4032d4 <MCI_SetBusWidth+0xa8>)
  40325e:	4b1f      	ldr	r3, [pc, #124]	; (4032dc <MCI_SetBusWidth+0xb0>)
  403260:	f000 f976 	bl	403550 <__assert_func>

    if( (busWidth != HSMCI_SDCR_SDCBUS_1) && (busWidth != HSMCI_SDCR_SDCBUS_4) && (busWidth != HSMCI_SDCR_SDCBUS_8) )
  403264:	9b00      	ldr	r3, [sp, #0]
  403266:	2b00      	cmp	r3, #0
  403268:	d008      	beq.n	40327c <MCI_SetBusWidth+0x50>
  40326a:	9b00      	ldr	r3, [sp, #0]
  40326c:	2b80      	cmp	r3, #128	; 0x80
  40326e:	d005      	beq.n	40327c <MCI_SetBusWidth+0x50>
  403270:	9b00      	ldr	r3, [sp, #0]
  403272:	2bc0      	cmp	r3, #192	; 0xc0
  403274:	d002      	beq.n	40327c <MCI_SetBusWidth+0x50>
    {
        return (uint32_t)-1;
  403276:	f04f 33ff 	mov.w	r3, #4294967295
  40327a:	e024      	b.n	4032c6 <MCI_SetBusWidth+0x9a>
    }

    busWidth &= HSMCI_SDCR_SDCBUS_Msk ;
  40327c:	9b00      	ldr	r3, [sp, #0]
  40327e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  403282:	9300      	str	r3, [sp, #0]

    PMC_EnablePeripheral(pMci->mciId);
  403284:	9b01      	ldr	r3, [sp, #4]
  403286:	7a1b      	ldrb	r3, [r3, #8]
  403288:	4618      	mov	r0, r3
  40328a:	f7ff fd07 	bl	402c9c <PMC_EnablePeripheral>
    mciDis = PMC_IsPeriphEnabled(pMci->mciId);
  40328e:	9b01      	ldr	r3, [sp, #4]
  403290:	7a1b      	ldrb	r3, [r3, #8]
  403292:	4618      	mov	r0, r3
  403294:	f7ff fdf4 	bl	402e80 <PMC_IsPeriphEnabled>
  403298:	4603      	mov	r3, r0
  40329a:	f88d 3013 	strb.w	r3, [sp, #19]

    mciSdcr = (pMciHw->HSMCI_SDCR & ~(uint32_t)(HSMCI_SDCR_SDCBUS_Msk));
  40329e:	9b05      	ldr	r3, [sp, #20]
  4032a0:	68db      	ldr	r3, [r3, #12]
  4032a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  4032a6:	9303      	str	r3, [sp, #12]
    pMciHw->HSMCI_SDCR = mciSdcr | busWidth;
  4032a8:	9a03      	ldr	r2, [sp, #12]
  4032aa:	9b00      	ldr	r3, [sp, #0]
  4032ac:	431a      	orrs	r2, r3
  4032ae:	9b05      	ldr	r3, [sp, #20]
  4032b0:	60da      	str	r2, [r3, #12]

    if (mciDis)
  4032b2:	f89d 3013 	ldrb.w	r3, [sp, #19]
  4032b6:	2b00      	cmp	r3, #0
  4032b8:	d004      	beq.n	4032c4 <MCI_SetBusWidth+0x98>
    {
        PMC_DisablePeripheral(pMci->mciId);
  4032ba:	9b01      	ldr	r3, [sp, #4]
  4032bc:	7a1b      	ldrb	r3, [r3, #8]
  4032be:	4618      	mov	r0, r3
  4032c0:	f7ff fd3e 	bl	402d40 <PMC_DisablePeripheral>
    }

    return 0;
  4032c4:	2300      	movs	r3, #0
}
  4032c6:	4618      	mov	r0, r3
  4032c8:	b007      	add	sp, #28
  4032ca:	f85d fb04 	ldr.w	pc, [sp], #4
  4032ce:	bf00      	nop
  4032d0:	00406f70 	.word	0x00406f70
  4032d4:	00407014 	.word	0x00407014
  4032d8:	00406fa8 	.word	0x00406fa8
  4032dc:	00406fb0 	.word	0x00406fb0

004032e0 <SPI_Enable>:
 * \brief Enables a SPI peripheral.
 *
 * \param spi  Pointer to an Spi instance.
 */
extern void SPI_Enable( Spi* spi )
{
  4032e0:	b082      	sub	sp, #8
  4032e2:	9001      	str	r0, [sp, #4]
    spi->SPI_CR = SPI_CR_SPIEN ;
  4032e4:	9b01      	ldr	r3, [sp, #4]
  4032e6:	2201      	movs	r2, #1
  4032e8:	601a      	str	r2, [r3, #0]
}
  4032ea:	b002      	add	sp, #8
  4032ec:	4770      	bx	lr
  4032ee:	bf00      	nop

004032f0 <SPI_Disable>:
 * \brief Disables a SPI peripheral.
 *
 * \param spi  Pointer to an Spi instance.
 */
extern void SPI_Disable( Spi* spi )
{
  4032f0:	b082      	sub	sp, #8
  4032f2:	9001      	str	r0, [sp, #4]
    spi->SPI_CR = SPI_CR_SPIDIS ;
  4032f4:	9b01      	ldr	r3, [sp, #4]
  4032f6:	2202      	movs	r2, #2
  4032f8:	601a      	str	r2, [r3, #0]
}
  4032fa:	b002      	add	sp, #8
  4032fc:	4770      	bx	lr
  4032fe:	bf00      	nop

00403300 <SPI_EnableIt>:
 *
 * \param spi  Pointer to an Spi instance.
 * \param sources Bitwise OR of selected interrupt sources.
 */
extern void SPI_EnableIt( Spi* spi, uint32_t dwSources )
{
  403300:	b082      	sub	sp, #8
  403302:	9001      	str	r0, [sp, #4]
  403304:	9100      	str	r1, [sp, #0]
    spi->SPI_IER = dwSources ;
  403306:	9b01      	ldr	r3, [sp, #4]
  403308:	9a00      	ldr	r2, [sp, #0]
  40330a:	615a      	str	r2, [r3, #20]
}
  40330c:	b002      	add	sp, #8
  40330e:	4770      	bx	lr

00403310 <SPI_DisableIt>:
 *
 * \param spi  Pointer to an Spi instance.
 * \param sources Bitwise OR of selected interrupt sources.
 */
extern void SPI_DisableIt( Spi* spi, uint32_t dwSources )
{
  403310:	b082      	sub	sp, #8
  403312:	9001      	str	r0, [sp, #4]
  403314:	9100      	str	r1, [sp, #0]
    spi->SPI_IDR = dwSources ;
  403316:	9b01      	ldr	r3, [sp, #4]
  403318:	9a00      	ldr	r2, [sp, #0]
  40331a:	619a      	str	r2, [r3, #24]
}
  40331c:	b002      	add	sp, #8
  40331e:	4770      	bx	lr

00403320 <SPI_Configure>:
 * \param spi  Pointer to an Spi instance.
 * \param id   Peripheral ID of the SPI.
 * \param configuration  Value of the SPI configuration register.
 */
extern void SPI_Configure( Spi* spi, uint32_t dwId, uint32_t dwConfiguration )
{
  403320:	b500      	push	{lr}
  403322:	b085      	sub	sp, #20
  403324:	9003      	str	r0, [sp, #12]
  403326:	9102      	str	r1, [sp, #8]
  403328:	9201      	str	r2, [sp, #4]
    PMC_EnablePeripheral( dwId ) ;
  40332a:	9802      	ldr	r0, [sp, #8]
  40332c:	f7ff fcb6 	bl	402c9c <PMC_EnablePeripheral>
    spi->SPI_CR = SPI_CR_SPIDIS ;
  403330:	9b03      	ldr	r3, [sp, #12]
  403332:	2202      	movs	r2, #2
  403334:	601a      	str	r2, [r3, #0]

    /* Execute a software reset of the SPI twice */
    spi->SPI_CR = SPI_CR_SWRST ;
  403336:	9b03      	ldr	r3, [sp, #12]
  403338:	2280      	movs	r2, #128	; 0x80
  40333a:	601a      	str	r2, [r3, #0]
    spi->SPI_CR = SPI_CR_SWRST ;
  40333c:	9b03      	ldr	r3, [sp, #12]
  40333e:	2280      	movs	r2, #128	; 0x80
  403340:	601a      	str	r2, [r3, #0]
    spi->SPI_MR = dwConfiguration ;
  403342:	9b03      	ldr	r3, [sp, #12]
  403344:	9a01      	ldr	r2, [sp, #4]
  403346:	605a      	str	r2, [r3, #4]
}
  403348:	b005      	add	sp, #20
  40334a:	f85d fb04 	ldr.w	pc, [sp], #4
  40334e:	bf00      	nop

00403350 <SPI_ConfigureNPCS>:
 * \param spi   Pointer to an Spi instance.
 * \param npcs  Chip select to configure (0, 1, 2 or 3).
 * \param configuration  Desired chip select configuration.
 */
void SPI_ConfigureNPCS( Spi* spi, uint32_t dwNpcs, uint32_t dwConfiguration )
{
  403350:	b084      	sub	sp, #16
  403352:	9003      	str	r0, [sp, #12]
  403354:	9102      	str	r1, [sp, #8]
  403356:	9201      	str	r2, [sp, #4]
    spi->SPI_CSR[dwNpcs] = dwConfiguration ;
  403358:	9b03      	ldr	r3, [sp, #12]
  40335a:	9a02      	ldr	r2, [sp, #8]
  40335c:	320c      	adds	r2, #12
  40335e:	9901      	ldr	r1, [sp, #4]
  403360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  403364:	b004      	add	sp, #16
  403366:	4770      	bx	lr

00403368 <SPI_GetStatus>:
 * read may yield different values.
 * \param spi   Pointer to a Spi instance.
 * \return  SPI status register.
 */
extern uint32_t SPI_GetStatus( Spi* spi )
{
  403368:	b082      	sub	sp, #8
  40336a:	9001      	str	r0, [sp, #4]
    return spi->SPI_SR ;
  40336c:	9b01      	ldr	r3, [sp, #4]
  40336e:	691b      	ldr	r3, [r3, #16]
}
  403370:	4618      	mov	r0, r3
  403372:	b002      	add	sp, #8
  403374:	4770      	bx	lr
  403376:	bf00      	nop

00403378 <SPI_Read>:
 * \param spi  Pointer to an Spi instance.
 *
 * \return readed data.
 */
extern uint32_t SPI_Read( Spi* spi )
{
  403378:	b082      	sub	sp, #8
  40337a:	9001      	str	r0, [sp, #4]
    while ( (spi->SPI_SR & SPI_SR_RDRF) == 0 ) ;
  40337c:	bf00      	nop
  40337e:	9b01      	ldr	r3, [sp, #4]
  403380:	691b      	ldr	r3, [r3, #16]
  403382:	f003 0301 	and.w	r3, r3, #1
  403386:	2b00      	cmp	r3, #0
  403388:	d0f9      	beq.n	40337e <SPI_Read+0x6>

    return spi->SPI_RDR & 0xFFFF ;
  40338a:	9b01      	ldr	r3, [sp, #4]
  40338c:	689b      	ldr	r3, [r3, #8]
  40338e:	b29b      	uxth	r3, r3
}
  403390:	4618      	mov	r0, r3
  403392:	b002      	add	sp, #8
  403394:	4770      	bx	lr
  403396:	bf00      	nop

00403398 <SPI_Write>:
 * \param spi   Pointer to an Spi instance.
 * \param npcs  Chip select of the component to address (0, 1, 2 or 3).
 * \param data  Word of data to send.
 */
extern void SPI_Write( Spi* spi, uint32_t dwNpcs, uint16_t wData )
{
  403398:	b084      	sub	sp, #16
  40339a:	9003      	str	r0, [sp, #12]
  40339c:	9102      	str	r1, [sp, #8]
  40339e:	4613      	mov	r3, r2
  4033a0:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* Send data */
    while ( (spi->SPI_SR & SPI_SR_TXEMPTY) == 0 ) ;
  4033a4:	bf00      	nop
  4033a6:	9b03      	ldr	r3, [sp, #12]
  4033a8:	691b      	ldr	r3, [r3, #16]
  4033aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
  4033ae:	2b00      	cmp	r3, #0
  4033b0:	d0f9      	beq.n	4033a6 <SPI_Write+0xe>
    spi->SPI_TDR = wData | SPI_PCS( dwNpcs ) ;
  4033b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  4033b6:	9b02      	ldr	r3, [sp, #8]
  4033b8:	2101      	movs	r1, #1
  4033ba:	fa01 f303 	lsl.w	r3, r1, r3
  4033be:	43db      	mvns	r3, r3
  4033c0:	f003 030f 	and.w	r3, r3, #15
  4033c4:	041b      	lsls	r3, r3, #16
  4033c6:	4313      	orrs	r3, r2
  4033c8:	461a      	mov	r2, r3
  4033ca:	9b03      	ldr	r3, [sp, #12]
  4033cc:	60da      	str	r2, [r3, #12]
    while ( (spi->SPI_SR & SPI_SR_TDRE) == 0 ) ;
  4033ce:	bf00      	nop
  4033d0:	9b03      	ldr	r3, [sp, #12]
  4033d2:	691b      	ldr	r3, [r3, #16]
  4033d4:	f003 0302 	and.w	r3, r3, #2
  4033d8:	2b00      	cmp	r3, #0
  4033da:	d0f9      	beq.n	4033d0 <SPI_Write+0x38>
}
  4033dc:	b004      	add	sp, #16
  4033de:	4770      	bx	lr

004033e0 <SPI_IsFinished>:
 *
 * \return Returns 1 if there is no pending write operation on the SPI; otherwise
 * returns 0.
 */
extern uint32_t SPI_IsFinished( Spi* spi )
{
  4033e0:	b082      	sub	sp, #8
  4033e2:	9001      	str	r0, [sp, #4]
    return ((spi->SPI_SR & SPI_SR_TXEMPTY) != 0) ;
  4033e4:	9b01      	ldr	r3, [sp, #4]
  4033e6:	691b      	ldr	r3, [r3, #16]
  4033e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
  4033ec:	2b00      	cmp	r3, #0
  4033ee:	bf0c      	ite	eq
  4033f0:	2300      	moveq	r3, #0
  4033f2:	2301      	movne	r3, #1
  4033f4:	b2db      	uxtb	r3, r3
}
  4033f6:	4618      	mov	r0, r3
  4033f8:	b002      	add	sp, #8
  4033fa:	4770      	bx	lr

004033fc <SPI_PdcEnableTx>:
/**
 * \brief Enable Spi PDC transmit
 * \param spi  Pointer to an Spi instance.
*/
extern void SPI_PdcEnableTx( Spi* spi )
{
  4033fc:	b082      	sub	sp, #8
  4033fe:	9001      	str	r0, [sp, #4]
    spi->SPI_PTCR = SPI_PTCR_TXTEN ;
  403400:	9b01      	ldr	r3, [sp, #4]
  403402:	f44f 7280 	mov.w	r2, #256	; 0x100
  403406:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
  40340a:	b002      	add	sp, #8
  40340c:	4770      	bx	lr
  40340e:	bf00      	nop

00403410 <SPI_PdcDisableTx>:
/**
 * \brief Disable Spi PDC transmit
 * \param spi  Pointer to an Spi instance.
*/
extern void SPI_PdcDisableTx( Spi* spi )
{
  403410:	b082      	sub	sp, #8
  403412:	9001      	str	r0, [sp, #4]
    spi->SPI_PTCR = SPI_PTCR_TXTDIS ;
  403414:	9b01      	ldr	r3, [sp, #4]
  403416:	f44f 7200 	mov.w	r2, #512	; 0x200
  40341a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
  40341e:	b002      	add	sp, #8
  403420:	4770      	bx	lr
  403422:	bf00      	nop

00403424 <SPI_PdcEnableRx>:
/**
 * \brief Enable Spi PDC receive
 * \param spi  Pointer to an Spi instance.
*/
extern void SPI_PdcEnableRx( Spi* spi )
{
  403424:	b082      	sub	sp, #8
  403426:	9001      	str	r0, [sp, #4]
    spi->SPI_PTCR = SPI_PTCR_RXTEN ;
  403428:	9b01      	ldr	r3, [sp, #4]
  40342a:	2201      	movs	r2, #1
  40342c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
  403430:	b002      	add	sp, #8
  403432:	4770      	bx	lr

00403434 <SPI_PdcDisableRx>:
/**
 * \brief Disable Spi PDC receive
 * \param spi  Pointer to an Spi instance.
*/
extern void SPI_PdcDisableRx( Spi* spi )
{
  403434:	b082      	sub	sp, #8
  403436:	9001      	str	r0, [sp, #4]
    spi->SPI_PTCR = SPI_PTCR_RXTDIS ;
  403438:	9b01      	ldr	r3, [sp, #4]
  40343a:	2202      	movs	r2, #2
  40343c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
  403440:	b002      	add	sp, #8
  403442:	4770      	bx	lr

00403444 <SPI_PdcSetTx>:
 * \param txCount  Length in bytes of the transmit buffer.
 * \param txNextBuf  PDC next transmit buffer address.
 * \param txNextCount  Length in bytes of the next transmit buffer.
 */
extern void SPI_PdcSetTx( Spi* spi, void* pvTxBuf, uint32_t dwTxCount, void* pvTxNextBuf, uint32_t dwTxNextCount )
{
  403444:	b084      	sub	sp, #16
  403446:	9003      	str	r0, [sp, #12]
  403448:	9102      	str	r1, [sp, #8]
  40344a:	9201      	str	r2, [sp, #4]
  40344c:	9300      	str	r3, [sp, #0]
    spi->SPI_TPR = (uint32_t)pvTxBuf ;
  40344e:	9a02      	ldr	r2, [sp, #8]
  403450:	9b03      	ldr	r3, [sp, #12]
  403452:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    spi->SPI_TCR = dwTxCount ;
  403456:	9b03      	ldr	r3, [sp, #12]
  403458:	9a01      	ldr	r2, [sp, #4]
  40345a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    spi->SPI_TNPR = (uint32_t)pvTxNextBuf ;
  40345e:	9a00      	ldr	r2, [sp, #0]
  403460:	9b03      	ldr	r3, [sp, #12]
  403462:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    spi->SPI_TNCR = dwTxNextCount ;
  403466:	9b03      	ldr	r3, [sp, #12]
  403468:	9a04      	ldr	r2, [sp, #16]
  40346a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
  40346e:	b004      	add	sp, #16
  403470:	4770      	bx	lr
  403472:	bf00      	nop

00403474 <SPI_PdcSetRx>:
 * \param rxCount  Length in bytes of the receive buffer.
 * \param rxNextBuf  PDC next receive buffer address.
 * \param rxNextCount  Length in bytes of the next receive buffer.
 */
extern void SPI_PdcSetRx( Spi* spi, void* pvRxBuf, uint32_t dwRxCount, void* pvRxNextBuf, uint32_t dwRxNextCount )
{
  403474:	b084      	sub	sp, #16
  403476:	9003      	str	r0, [sp, #12]
  403478:	9102      	str	r1, [sp, #8]
  40347a:	9201      	str	r2, [sp, #4]
  40347c:	9300      	str	r3, [sp, #0]
    spi->SPI_RPR = (uint32_t)pvRxBuf ;
  40347e:	9a02      	ldr	r2, [sp, #8]
  403480:	9b03      	ldr	r3, [sp, #12]
  403482:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    spi->SPI_RCR = dwRxCount ;
  403486:	9b03      	ldr	r3, [sp, #12]
  403488:	9a01      	ldr	r2, [sp, #4]
  40348a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    spi->SPI_RNPR = (uint32_t)pvRxNextBuf ;
  40348e:	9a00      	ldr	r2, [sp, #0]
  403490:	9b03      	ldr	r3, [sp, #12]
  403492:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    spi->SPI_RNCR = dwRxNextCount ;
  403496:	9b03      	ldr	r3, [sp, #12]
  403498:	9a04      	ldr	r2, [sp, #16]
  40349a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
  40349e:	b004      	add	sp, #16
  4034a0:	4770      	bx	lr
  4034a2:	bf00      	nop

004034a4 <SPI_WriteBuffer>:
 * \param spi     Pointer to an Spi instance.
 * \param buffer  Data buffer to send.
 * \param length  Length of the data buffer.
 */
extern uint32_t SPI_WriteBuffer( Spi* spi, void* pvBuffer, uint32_t dwLength )
{
  4034a4:	b084      	sub	sp, #16
  4034a6:	9003      	str	r0, [sp, #12]
  4034a8:	9102      	str	r1, [sp, #8]
  4034aa:	9201      	str	r2, [sp, #4]
    /* Check if first bank is free */
    if ( spi->SPI_TCR == 0 )
  4034ac:	9b03      	ldr	r3, [sp, #12]
  4034ae:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
  4034b2:	2b00      	cmp	r3, #0
  4034b4:	d10e      	bne.n	4034d4 <SPI_WriteBuffer+0x30>
    {
        spi->SPI_TPR = (uint32_t)pvBuffer ;
  4034b6:	9a02      	ldr	r2, [sp, #8]
  4034b8:	9b03      	ldr	r3, [sp, #12]
  4034ba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        spi->SPI_TCR = dwLength ;
  4034be:	9b03      	ldr	r3, [sp, #12]
  4034c0:	9a01      	ldr	r2, [sp, #4]
  4034c2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        spi->SPI_PTCR = PERIPH_PTCR_TXTEN ;
  4034c6:	9b03      	ldr	r3, [sp, #12]
  4034c8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4034cc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

        return 1 ;
  4034d0:	2301      	movs	r3, #1
  4034d2:	e00f      	b.n	4034f4 <SPI_WriteBuffer+0x50>
    }
    /* Check if second bank is free */
    else
    {
        if ( spi->SPI_TNCR == 0 )
  4034d4:	9b03      	ldr	r3, [sp, #12]
  4034d6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
  4034da:	2b00      	cmp	r3, #0
  4034dc:	d109      	bne.n	4034f2 <SPI_WriteBuffer+0x4e>
        {
            spi->SPI_TNPR = (uint32_t)pvBuffer ;
  4034de:	9a02      	ldr	r2, [sp, #8]
  4034e0:	9b03      	ldr	r3, [sp, #12]
  4034e2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            spi->SPI_TNCR = dwLength ;
  4034e6:	9b03      	ldr	r3, [sp, #12]
  4034e8:	9a01      	ldr	r2, [sp, #4]
  4034ea:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

            return 1 ;
  4034ee:	2301      	movs	r3, #1
  4034f0:	e000      	b.n	4034f4 <SPI_WriteBuffer+0x50>
        }
    }

    /* No free banks */
    return 0 ;
  4034f2:	2300      	movs	r3, #0
}
  4034f4:	4618      	mov	r0, r3
  4034f6:	b004      	add	sp, #16
  4034f8:	4770      	bx	lr
  4034fa:	bf00      	nop

004034fc <SPI_ReadBuffer>:
 * \param spi     Pointer to an Spi instance.
 * \param buffer  Data buffer to store incoming bytes.
 * \param length  Length in bytes of the data buffer.
 */
extern uint32_t SPI_ReadBuffer( Spi* spi, void *pvBuffer, uint32_t dwLength )
{
  4034fc:	b084      	sub	sp, #16
  4034fe:	9003      	str	r0, [sp, #12]
  403500:	9102      	str	r1, [sp, #8]
  403502:	9201      	str	r2, [sp, #4]
    /* Check if the first bank is free */
    if ( spi->SPI_RCR == 0 )
  403504:	9b03      	ldr	r3, [sp, #12]
  403506:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
  40350a:	2b00      	cmp	r3, #0
  40350c:	d10d      	bne.n	40352a <SPI_ReadBuffer+0x2e>
    {
        spi->SPI_RPR = (uint32_t)pvBuffer ;
  40350e:	9a02      	ldr	r2, [sp, #8]
  403510:	9b03      	ldr	r3, [sp, #12]
  403512:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        spi->SPI_RCR = dwLength ;
  403516:	9b03      	ldr	r3, [sp, #12]
  403518:	9a01      	ldr	r2, [sp, #4]
  40351a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        spi->SPI_PTCR = PERIPH_PTCR_RXTEN ;
  40351e:	9b03      	ldr	r3, [sp, #12]
  403520:	2201      	movs	r2, #1
  403522:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

        return 1 ;
  403526:	2301      	movs	r3, #1
  403528:	e00f      	b.n	40354a <SPI_ReadBuffer+0x4e>
    }
    /* Check if second bank is free */
    else
    {
        if ( spi->SPI_RNCR == 0 )
  40352a:	9b03      	ldr	r3, [sp, #12]
  40352c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  403530:	2b00      	cmp	r3, #0
  403532:	d109      	bne.n	403548 <SPI_ReadBuffer+0x4c>
        {
            spi->SPI_RNPR = (uint32_t)pvBuffer ;
  403534:	9a02      	ldr	r2, [sp, #8]
  403536:	9b03      	ldr	r3, [sp, #12]
  403538:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            spi->SPI_RNCR = dwLength ;
  40353c:	9b03      	ldr	r3, [sp, #12]
  40353e:	9a01      	ldr	r2, [sp, #4]
  403540:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            return 1 ;
  403544:	2301      	movs	r3, #1
  403546:	e000      	b.n	40354a <SPI_ReadBuffer+0x4e>
        }
    }

    /* No free bank */
    return 0 ;
  403548:	2300      	movs	r3, #0
}
  40354a:	4618      	mov	r0, r3
  40354c:	b004      	add	sp, #16
  40354e:	4770      	bx	lr

00403550 <__assert_func>:
  403550:	b500      	push	{lr}
  403552:	4c0a      	ldr	r4, [pc, #40]	; (40357c <__assert_func+0x2c>)
  403554:	6824      	ldr	r4, [r4, #0]
  403556:	4605      	mov	r5, r0
  403558:	b085      	sub	sp, #20
  40355a:	68e0      	ldr	r0, [r4, #12]
  40355c:	b152      	cbz	r2, 403574 <__assert_func+0x24>
  40355e:	4c08      	ldr	r4, [pc, #32]	; (403580 <__assert_func+0x30>)
  403560:	e88d 0012 	stmia.w	sp, {r1, r4}
  403564:	9202      	str	r2, [sp, #8]
  403566:	4907      	ldr	r1, [pc, #28]	; (403584 <__assert_func+0x34>)
  403568:	461a      	mov	r2, r3
  40356a:	462b      	mov	r3, r5
  40356c:	f000 f80e 	bl	40358c <fiprintf>
  403570:	f000 ffa0 	bl	4044b4 <abort>
  403574:	4c04      	ldr	r4, [pc, #16]	; (403588 <__assert_func+0x38>)
  403576:	4622      	mov	r2, r4
  403578:	e7f2      	b.n	403560 <__assert_func+0x10>
  40357a:	bf00      	nop
  40357c:	200004b8 	.word	0x200004b8
  403580:	00407024 	.word	0x00407024
  403584:	00407034 	.word	0x00407034
  403588:	00407030 	.word	0x00407030

0040358c <fiprintf>:
  40358c:	b40e      	push	{r1, r2, r3}
  40358e:	b510      	push	{r4, lr}
  403590:	b083      	sub	sp, #12
  403592:	ab05      	add	r3, sp, #20
  403594:	4c06      	ldr	r4, [pc, #24]	; (4035b0 <fiprintf+0x24>)
  403596:	f853 2b04 	ldr.w	r2, [r3], #4
  40359a:	9301      	str	r3, [sp, #4]
  40359c:	4601      	mov	r1, r0
  40359e:	6820      	ldr	r0, [r4, #0]
  4035a0:	f000 f8b6 	bl	403710 <_vfiprintf_r>
  4035a4:	b003      	add	sp, #12
  4035a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4035aa:	b003      	add	sp, #12
  4035ac:	4770      	bx	lr
  4035ae:	bf00      	nop
  4035b0:	200004b8 	.word	0x200004b8

004035b4 <__libc_init_array>:
  4035b4:	b570      	push	{r4, r5, r6, lr}
  4035b6:	4e0f      	ldr	r6, [pc, #60]	; (4035f4 <__libc_init_array+0x40>)
  4035b8:	4d0f      	ldr	r5, [pc, #60]	; (4035f8 <__libc_init_array+0x44>)
  4035ba:	1b76      	subs	r6, r6, r5
  4035bc:	10b6      	asrs	r6, r6, #2
  4035be:	d007      	beq.n	4035d0 <__libc_init_array+0x1c>
  4035c0:	3d04      	subs	r5, #4
  4035c2:	2400      	movs	r4, #0
  4035c4:	3401      	adds	r4, #1
  4035c6:	f855 3f04 	ldr.w	r3, [r5, #4]!
  4035ca:	4798      	blx	r3
  4035cc:	42a6      	cmp	r6, r4
  4035ce:	d1f9      	bne.n	4035c4 <__libc_init_array+0x10>
  4035d0:	4e0a      	ldr	r6, [pc, #40]	; (4035fc <__libc_init_array+0x48>)
  4035d2:	4d0b      	ldr	r5, [pc, #44]	; (403600 <__libc_init_array+0x4c>)
  4035d4:	1b76      	subs	r6, r6, r5
  4035d6:	f003 fd71 	bl	4070bc <_init>
  4035da:	10b6      	asrs	r6, r6, #2
  4035dc:	d008      	beq.n	4035f0 <__libc_init_array+0x3c>
  4035de:	3d04      	subs	r5, #4
  4035e0:	2400      	movs	r4, #0
  4035e2:	3401      	adds	r4, #1
  4035e4:	f855 3f04 	ldr.w	r3, [r5, #4]!
  4035e8:	4798      	blx	r3
  4035ea:	42a6      	cmp	r6, r4
  4035ec:	d1f9      	bne.n	4035e2 <__libc_init_array+0x2e>
  4035ee:	bd70      	pop	{r4, r5, r6, pc}
  4035f0:	bd70      	pop	{r4, r5, r6, pc}
  4035f2:	bf00      	nop
  4035f4:	004070c8 	.word	0x004070c8
  4035f8:	004070c8 	.word	0x004070c8
  4035fc:	004070d0 	.word	0x004070d0
  403600:	004070c8 	.word	0x004070c8

00403604 <memset>:
  403604:	b4f0      	push	{r4, r5, r6, r7}
  403606:	0784      	lsls	r4, r0, #30
  403608:	d043      	beq.n	403692 <memset+0x8e>
  40360a:	1e54      	subs	r4, r2, #1
  40360c:	2a00      	cmp	r2, #0
  40360e:	d03e      	beq.n	40368e <memset+0x8a>
  403610:	b2cd      	uxtb	r5, r1
  403612:	4603      	mov	r3, r0
  403614:	e003      	b.n	40361e <memset+0x1a>
  403616:	1e62      	subs	r2, r4, #1
  403618:	2c00      	cmp	r4, #0
  40361a:	d038      	beq.n	40368e <memset+0x8a>
  40361c:	4614      	mov	r4, r2
  40361e:	f803 5b01 	strb.w	r5, [r3], #1
  403622:	079a      	lsls	r2, r3, #30
  403624:	d1f7      	bne.n	403616 <memset+0x12>
  403626:	2c03      	cmp	r4, #3
  403628:	d92a      	bls.n	403680 <memset+0x7c>
  40362a:	b2cd      	uxtb	r5, r1
  40362c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403630:	2c0f      	cmp	r4, #15
  403632:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403636:	d915      	bls.n	403664 <memset+0x60>
  403638:	f1a4 0710 	sub.w	r7, r4, #16
  40363c:	093f      	lsrs	r7, r7, #4
  40363e:	f103 0610 	add.w	r6, r3, #16
  403642:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  403646:	461a      	mov	r2, r3
  403648:	6015      	str	r5, [r2, #0]
  40364a:	6055      	str	r5, [r2, #4]
  40364c:	6095      	str	r5, [r2, #8]
  40364e:	60d5      	str	r5, [r2, #12]
  403650:	3210      	adds	r2, #16
  403652:	42b2      	cmp	r2, r6
  403654:	d1f8      	bne.n	403648 <memset+0x44>
  403656:	f004 040f 	and.w	r4, r4, #15
  40365a:	3701      	adds	r7, #1
  40365c:	2c03      	cmp	r4, #3
  40365e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  403662:	d90d      	bls.n	403680 <memset+0x7c>
  403664:	461e      	mov	r6, r3
  403666:	4622      	mov	r2, r4
  403668:	3a04      	subs	r2, #4
  40366a:	2a03      	cmp	r2, #3
  40366c:	f846 5b04 	str.w	r5, [r6], #4
  403670:	d8fa      	bhi.n	403668 <memset+0x64>
  403672:	1f22      	subs	r2, r4, #4
  403674:	f022 0203 	bic.w	r2, r2, #3
  403678:	3204      	adds	r2, #4
  40367a:	4413      	add	r3, r2
  40367c:	f004 0403 	and.w	r4, r4, #3
  403680:	b12c      	cbz	r4, 40368e <memset+0x8a>
  403682:	b2c9      	uxtb	r1, r1
  403684:	441c      	add	r4, r3
  403686:	f803 1b01 	strb.w	r1, [r3], #1
  40368a:	42a3      	cmp	r3, r4
  40368c:	d1fb      	bne.n	403686 <memset+0x82>
  40368e:	bcf0      	pop	{r4, r5, r6, r7}
  403690:	4770      	bx	lr
  403692:	4614      	mov	r4, r2
  403694:	4603      	mov	r3, r0
  403696:	e7c6      	b.n	403626 <memset+0x22>

00403698 <__sprint_r.part.0>:
  403698:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40369a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40369e:	049c      	lsls	r4, r3, #18
  4036a0:	460e      	mov	r6, r1
  4036a2:	4680      	mov	r8, r0
  4036a4:	4691      	mov	r9, r2
  4036a6:	d52a      	bpl.n	4036fe <__sprint_r.part.0+0x66>
  4036a8:	6893      	ldr	r3, [r2, #8]
  4036aa:	6812      	ldr	r2, [r2, #0]
  4036ac:	f102 0a08 	add.w	sl, r2, #8
  4036b0:	b31b      	cbz	r3, 4036fa <__sprint_r.part.0+0x62>
  4036b2:	e91a 00a0 	ldmdb	sl, {r5, r7}
  4036b6:	08bf      	lsrs	r7, r7, #2
  4036b8:	d017      	beq.n	4036ea <__sprint_r.part.0+0x52>
  4036ba:	3d04      	subs	r5, #4
  4036bc:	2400      	movs	r4, #0
  4036be:	e001      	b.n	4036c4 <__sprint_r.part.0+0x2c>
  4036c0:	42a7      	cmp	r7, r4
  4036c2:	d010      	beq.n	4036e6 <__sprint_r.part.0+0x4e>
  4036c4:	4640      	mov	r0, r8
  4036c6:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4036ca:	4632      	mov	r2, r6
  4036cc:	f001 f85c 	bl	404788 <_fputwc_r>
  4036d0:	1c43      	adds	r3, r0, #1
  4036d2:	f104 0401 	add.w	r4, r4, #1
  4036d6:	d1f3      	bne.n	4036c0 <__sprint_r.part.0+0x28>
  4036d8:	2300      	movs	r3, #0
  4036da:	f8c9 3008 	str.w	r3, [r9, #8]
  4036de:	f8c9 3004 	str.w	r3, [r9, #4]
  4036e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4036e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4036ea:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
  4036ee:	f8c9 3008 	str.w	r3, [r9, #8]
  4036f2:	f10a 0a08 	add.w	sl, sl, #8
  4036f6:	2b00      	cmp	r3, #0
  4036f8:	d1db      	bne.n	4036b2 <__sprint_r.part.0+0x1a>
  4036fa:	2000      	movs	r0, #0
  4036fc:	e7ec      	b.n	4036d8 <__sprint_r.part.0+0x40>
  4036fe:	f001 f9bd 	bl	404a7c <__sfvwrite_r>
  403702:	2300      	movs	r3, #0
  403704:	f8c9 3008 	str.w	r3, [r9, #8]
  403708:	f8c9 3004 	str.w	r3, [r9, #4]
  40370c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403710 <_vfiprintf_r>:
  403710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403714:	b0b1      	sub	sp, #196	; 0xc4
  403716:	461c      	mov	r4, r3
  403718:	9102      	str	r1, [sp, #8]
  40371a:	4690      	mov	r8, r2
  40371c:	9308      	str	r3, [sp, #32]
  40371e:	9006      	str	r0, [sp, #24]
  403720:	b118      	cbz	r0, 40372a <_vfiprintf_r+0x1a>
  403722:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403724:	2b00      	cmp	r3, #0
  403726:	f000 80e8 	beq.w	4038fa <_vfiprintf_r+0x1ea>
  40372a:	9d02      	ldr	r5, [sp, #8]
  40372c:	89ab      	ldrh	r3, [r5, #12]
  40372e:	b29a      	uxth	r2, r3
  403730:	0490      	lsls	r0, r2, #18
  403732:	d407      	bmi.n	403744 <_vfiprintf_r+0x34>
  403734:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  403736:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40373a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  40373e:	81ab      	strh	r3, [r5, #12]
  403740:	b29a      	uxth	r2, r3
  403742:	6669      	str	r1, [r5, #100]	; 0x64
  403744:	0711      	lsls	r1, r2, #28
  403746:	f140 80b7 	bpl.w	4038b8 <_vfiprintf_r+0x1a8>
  40374a:	f8dd b008 	ldr.w	fp, [sp, #8]
  40374e:	f8db 3010 	ldr.w	r3, [fp, #16]
  403752:	2b00      	cmp	r3, #0
  403754:	f000 80b0 	beq.w	4038b8 <_vfiprintf_r+0x1a8>
  403758:	f002 021a 	and.w	r2, r2, #26
  40375c:	2a0a      	cmp	r2, #10
  40375e:	f000 80b7 	beq.w	4038d0 <_vfiprintf_r+0x1c0>
  403762:	2300      	movs	r3, #0
  403764:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  403768:	930a      	str	r3, [sp, #40]	; 0x28
  40376a:	9315      	str	r3, [sp, #84]	; 0x54
  40376c:	9314      	str	r3, [sp, #80]	; 0x50
  40376e:	9309      	str	r3, [sp, #36]	; 0x24
  403770:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  403774:	464e      	mov	r6, r9
  403776:	f898 3000 	ldrb.w	r3, [r8]
  40377a:	2b00      	cmp	r3, #0
  40377c:	f000 84c4 	beq.w	404108 <_vfiprintf_r+0x9f8>
  403780:	2b25      	cmp	r3, #37	; 0x25
  403782:	f000 84c1 	beq.w	404108 <_vfiprintf_r+0x9f8>
  403786:	f108 0201 	add.w	r2, r8, #1
  40378a:	e001      	b.n	403790 <_vfiprintf_r+0x80>
  40378c:	2b25      	cmp	r3, #37	; 0x25
  40378e:	d004      	beq.n	40379a <_vfiprintf_r+0x8a>
  403790:	4614      	mov	r4, r2
  403792:	3201      	adds	r2, #1
  403794:	7823      	ldrb	r3, [r4, #0]
  403796:	2b00      	cmp	r3, #0
  403798:	d1f8      	bne.n	40378c <_vfiprintf_r+0x7c>
  40379a:	ebc8 0504 	rsb	r5, r8, r4
  40379e:	b195      	cbz	r5, 4037c6 <_vfiprintf_r+0xb6>
  4037a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4037a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4037a4:	f8c6 8000 	str.w	r8, [r6]
  4037a8:	3301      	adds	r3, #1
  4037aa:	442a      	add	r2, r5
  4037ac:	2b07      	cmp	r3, #7
  4037ae:	6075      	str	r5, [r6, #4]
  4037b0:	9215      	str	r2, [sp, #84]	; 0x54
  4037b2:	9314      	str	r3, [sp, #80]	; 0x50
  4037b4:	dd7b      	ble.n	4038ae <_vfiprintf_r+0x19e>
  4037b6:	2a00      	cmp	r2, #0
  4037b8:	f040 84d4 	bne.w	404164 <_vfiprintf_r+0xa54>
  4037bc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4037be:	9214      	str	r2, [sp, #80]	; 0x50
  4037c0:	4428      	add	r0, r5
  4037c2:	464e      	mov	r6, r9
  4037c4:	9009      	str	r0, [sp, #36]	; 0x24
  4037c6:	7823      	ldrb	r3, [r4, #0]
  4037c8:	2b00      	cmp	r3, #0
  4037ca:	f000 83e9 	beq.w	403fa0 <_vfiprintf_r+0x890>
  4037ce:	2100      	movs	r1, #0
  4037d0:	f04f 0200 	mov.w	r2, #0
  4037d4:	f04f 3cff 	mov.w	ip, #4294967295
  4037d8:	7863      	ldrb	r3, [r4, #1]
  4037da:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
  4037de:	9104      	str	r1, [sp, #16]
  4037e0:	468a      	mov	sl, r1
  4037e2:	f104 0801 	add.w	r8, r4, #1
  4037e6:	4608      	mov	r0, r1
  4037e8:	4665      	mov	r5, ip
  4037ea:	f108 0801 	add.w	r8, r8, #1
  4037ee:	f1a3 0220 	sub.w	r2, r3, #32
  4037f2:	2a58      	cmp	r2, #88	; 0x58
  4037f4:	f200 82d5 	bhi.w	403da2 <_vfiprintf_r+0x692>
  4037f8:	e8df f012 	tbh	[pc, r2, lsl #1]
  4037fc:	02d302c7 	.word	0x02d302c7
  403800:	02ce02d3 	.word	0x02ce02d3
  403804:	02d302d3 	.word	0x02d302d3
  403808:	02d302d3 	.word	0x02d302d3
  40380c:	02d302d3 	.word	0x02d302d3
  403810:	028b027e 	.word	0x028b027e
  403814:	008402d3 	.word	0x008402d3
  403818:	02d3028f 	.word	0x02d3028f
  40381c:	0194012b 	.word	0x0194012b
  403820:	01940194 	.word	0x01940194
  403824:	01940194 	.word	0x01940194
  403828:	01940194 	.word	0x01940194
  40382c:	01940194 	.word	0x01940194
  403830:	02d302d3 	.word	0x02d302d3
  403834:	02d302d3 	.word	0x02d302d3
  403838:	02d302d3 	.word	0x02d302d3
  40383c:	02d302d3 	.word	0x02d302d3
  403840:	02d302d3 	.word	0x02d302d3
  403844:	02d30130 	.word	0x02d30130
  403848:	02d302d3 	.word	0x02d302d3
  40384c:	02d302d3 	.word	0x02d302d3
  403850:	02d302d3 	.word	0x02d302d3
  403854:	02d302d3 	.word	0x02d302d3
  403858:	017902d3 	.word	0x017902d3
  40385c:	02d302d3 	.word	0x02d302d3
  403860:	02d302d3 	.word	0x02d302d3
  403864:	01a202d3 	.word	0x01a202d3
  403868:	02d302d3 	.word	0x02d302d3
  40386c:	02d301bd 	.word	0x02d301bd
  403870:	02d302d3 	.word	0x02d302d3
  403874:	02d302d3 	.word	0x02d302d3
  403878:	02d302d3 	.word	0x02d302d3
  40387c:	02d302d3 	.word	0x02d302d3
  403880:	01e202d3 	.word	0x01e202d3
  403884:	02d301f8 	.word	0x02d301f8
  403888:	02d302d3 	.word	0x02d302d3
  40388c:	01f80214 	.word	0x01f80214
  403890:	02d302d3 	.word	0x02d302d3
  403894:	02d30219 	.word	0x02d30219
  403898:	00890226 	.word	0x00890226
  40389c:	02790264 	.word	0x02790264
  4038a0:	023802d3 	.word	0x023802d3
  4038a4:	011902d3 	.word	0x011902d3
  4038a8:	02d302d3 	.word	0x02d302d3
  4038ac:	02ab      	.short	0x02ab
  4038ae:	3608      	adds	r6, #8
  4038b0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4038b2:	4428      	add	r0, r5
  4038b4:	9009      	str	r0, [sp, #36]	; 0x24
  4038b6:	e786      	b.n	4037c6 <_vfiprintf_r+0xb6>
  4038b8:	9806      	ldr	r0, [sp, #24]
  4038ba:	9902      	ldr	r1, [sp, #8]
  4038bc:	f000 fd8e 	bl	4043dc <__swsetup_r>
  4038c0:	b9b0      	cbnz	r0, 4038f0 <_vfiprintf_r+0x1e0>
  4038c2:	9d02      	ldr	r5, [sp, #8]
  4038c4:	89aa      	ldrh	r2, [r5, #12]
  4038c6:	f002 021a 	and.w	r2, r2, #26
  4038ca:	2a0a      	cmp	r2, #10
  4038cc:	f47f af49 	bne.w	403762 <_vfiprintf_r+0x52>
  4038d0:	f8dd b008 	ldr.w	fp, [sp, #8]
  4038d4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4038d8:	2b00      	cmp	r3, #0
  4038da:	f6ff af42 	blt.w	403762 <_vfiprintf_r+0x52>
  4038de:	9806      	ldr	r0, [sp, #24]
  4038e0:	4659      	mov	r1, fp
  4038e2:	4642      	mov	r2, r8
  4038e4:	4623      	mov	r3, r4
  4038e6:	f000 fd3d 	bl	404364 <__sbprintf>
  4038ea:	b031      	add	sp, #196	; 0xc4
  4038ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038f0:	f04f 30ff 	mov.w	r0, #4294967295
  4038f4:	b031      	add	sp, #196	; 0xc4
  4038f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038fa:	f000 feaf 	bl	40465c <__sinit>
  4038fe:	e714      	b.n	40372a <_vfiprintf_r+0x1a>
  403900:	4240      	negs	r0, r0
  403902:	9308      	str	r3, [sp, #32]
  403904:	f04a 0a04 	orr.w	sl, sl, #4
  403908:	f898 3000 	ldrb.w	r3, [r8]
  40390c:	e76d      	b.n	4037ea <_vfiprintf_r+0xda>
  40390e:	f01a 0320 	ands.w	r3, sl, #32
  403912:	9004      	str	r0, [sp, #16]
  403914:	46ac      	mov	ip, r5
  403916:	f000 80f2 	beq.w	403afe <_vfiprintf_r+0x3ee>
  40391a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40391e:	f10b 0307 	add.w	r3, fp, #7
  403922:	f023 0307 	bic.w	r3, r3, #7
  403926:	f103 0408 	add.w	r4, r3, #8
  40392a:	9408      	str	r4, [sp, #32]
  40392c:	e9d3 4500 	ldrd	r4, r5, [r3]
  403930:	2300      	movs	r3, #0
  403932:	f04f 0000 	mov.w	r0, #0
  403936:	2100      	movs	r1, #0
  403938:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
  40393c:	f8cd c014 	str.w	ip, [sp, #20]
  403940:	9107      	str	r1, [sp, #28]
  403942:	f1bc 0f00 	cmp.w	ip, #0
  403946:	bfa8      	it	ge
  403948:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  40394c:	ea54 0205 	orrs.w	r2, r4, r5
  403950:	f040 80ad 	bne.w	403aae <_vfiprintf_r+0x39e>
  403954:	f1bc 0f00 	cmp.w	ip, #0
  403958:	f040 80a9 	bne.w	403aae <_vfiprintf_r+0x39e>
  40395c:	2b00      	cmp	r3, #0
  40395e:	f040 83bc 	bne.w	4040da <_vfiprintf_r+0x9ca>
  403962:	f01a 0f01 	tst.w	sl, #1
  403966:	f000 83b8 	beq.w	4040da <_vfiprintf_r+0x9ca>
  40396a:	af30      	add	r7, sp, #192	; 0xc0
  40396c:	2330      	movs	r3, #48	; 0x30
  40396e:	f807 3d41 	strb.w	r3, [r7, #-65]!
  403972:	ebc7 0409 	rsb	r4, r7, r9
  403976:	9405      	str	r4, [sp, #20]
  403978:	f8dd b014 	ldr.w	fp, [sp, #20]
  40397c:	9c07      	ldr	r4, [sp, #28]
  40397e:	45e3      	cmp	fp, ip
  403980:	bfb8      	it	lt
  403982:	46e3      	movlt	fp, ip
  403984:	f8cd b00c 	str.w	fp, [sp, #12]
  403988:	b11c      	cbz	r4, 403992 <_vfiprintf_r+0x282>
  40398a:	f10b 0b01 	add.w	fp, fp, #1
  40398e:	f8cd b00c 	str.w	fp, [sp, #12]
  403992:	f01a 0502 	ands.w	r5, sl, #2
  403996:	9507      	str	r5, [sp, #28]
  403998:	d005      	beq.n	4039a6 <_vfiprintf_r+0x296>
  40399a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40399e:	f10b 0b02 	add.w	fp, fp, #2
  4039a2:	f8cd b00c 	str.w	fp, [sp, #12]
  4039a6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
  4039aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4039ac:	f040 8217 	bne.w	403dde <_vfiprintf_r+0x6ce>
  4039b0:	9d04      	ldr	r5, [sp, #16]
  4039b2:	f8dd b00c 	ldr.w	fp, [sp, #12]
  4039b6:	ebcb 0405 	rsb	r4, fp, r5
  4039ba:	2c00      	cmp	r4, #0
  4039bc:	f340 820f 	ble.w	403dde <_vfiprintf_r+0x6ce>
  4039c0:	2c10      	cmp	r4, #16
  4039c2:	f340 8488 	ble.w	4042d6 <_vfiprintf_r+0xbc6>
  4039c6:	4dbd      	ldr	r5, [pc, #756]	; (403cbc <_vfiprintf_r+0x5ac>)
  4039c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4039ca:	9814      	ldr	r0, [sp, #80]	; 0x50
  4039cc:	462b      	mov	r3, r5
  4039ce:	f04f 0b10 	mov.w	fp, #16
  4039d2:	4625      	mov	r5, r4
  4039d4:	4664      	mov	r4, ip
  4039d6:	46b4      	mov	ip, r6
  4039d8:	461e      	mov	r6, r3
  4039da:	e006      	b.n	4039ea <_vfiprintf_r+0x2da>
  4039dc:	1c83      	adds	r3, r0, #2
  4039de:	f10c 0c08 	add.w	ip, ip, #8
  4039e2:	4608      	mov	r0, r1
  4039e4:	3d10      	subs	r5, #16
  4039e6:	2d10      	cmp	r5, #16
  4039e8:	dd11      	ble.n	403a0e <_vfiprintf_r+0x2fe>
  4039ea:	1c41      	adds	r1, r0, #1
  4039ec:	3210      	adds	r2, #16
  4039ee:	2907      	cmp	r1, #7
  4039f0:	9215      	str	r2, [sp, #84]	; 0x54
  4039f2:	e88c 0840 	stmia.w	ip, {r6, fp}
  4039f6:	9114      	str	r1, [sp, #80]	; 0x50
  4039f8:	ddf0      	ble.n	4039dc <_vfiprintf_r+0x2cc>
  4039fa:	2a00      	cmp	r2, #0
  4039fc:	f040 81e2 	bne.w	403dc4 <_vfiprintf_r+0x6b4>
  403a00:	3d10      	subs	r5, #16
  403a02:	2d10      	cmp	r5, #16
  403a04:	f04f 0301 	mov.w	r3, #1
  403a08:	4610      	mov	r0, r2
  403a0a:	46cc      	mov	ip, r9
  403a0c:	dced      	bgt.n	4039ea <_vfiprintf_r+0x2da>
  403a0e:	4631      	mov	r1, r6
  403a10:	4666      	mov	r6, ip
  403a12:	46a4      	mov	ip, r4
  403a14:	462c      	mov	r4, r5
  403a16:	460d      	mov	r5, r1
  403a18:	4422      	add	r2, r4
  403a1a:	2b07      	cmp	r3, #7
  403a1c:	9215      	str	r2, [sp, #84]	; 0x54
  403a1e:	6035      	str	r5, [r6, #0]
  403a20:	6074      	str	r4, [r6, #4]
  403a22:	9314      	str	r3, [sp, #80]	; 0x50
  403a24:	f300 8369 	bgt.w	4040fa <_vfiprintf_r+0x9ea>
  403a28:	3608      	adds	r6, #8
  403a2a:	1c59      	adds	r1, r3, #1
  403a2c:	e1da      	b.n	403de4 <_vfiprintf_r+0x6d4>
  403a2e:	f01a 0f20 	tst.w	sl, #32
  403a32:	9004      	str	r0, [sp, #16]
  403a34:	46ac      	mov	ip, r5
  403a36:	f000 808b 	beq.w	403b50 <_vfiprintf_r+0x440>
  403a3a:	9d08      	ldr	r5, [sp, #32]
  403a3c:	1deb      	adds	r3, r5, #7
  403a3e:	f023 0307 	bic.w	r3, r3, #7
  403a42:	f103 0b08 	add.w	fp, r3, #8
  403a46:	e9d3 4500 	ldrd	r4, r5, [r3]
  403a4a:	f8cd b020 	str.w	fp, [sp, #32]
  403a4e:	2301      	movs	r3, #1
  403a50:	e76f      	b.n	403932 <_vfiprintf_r+0x222>
  403a52:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
  403a56:	f898 3000 	ldrb.w	r3, [r8]
  403a5a:	e6c6      	b.n	4037ea <_vfiprintf_r+0xda>
  403a5c:	f04a 0a10 	orr.w	sl, sl, #16
  403a60:	f01a 0f20 	tst.w	sl, #32
  403a64:	9004      	str	r0, [sp, #16]
  403a66:	46ac      	mov	ip, r5
  403a68:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  403a6c:	f000 80c6 	beq.w	403bfc <_vfiprintf_r+0x4ec>
  403a70:	9c08      	ldr	r4, [sp, #32]
  403a72:	1de1      	adds	r1, r4, #7
  403a74:	f021 0107 	bic.w	r1, r1, #7
  403a78:	e9d1 2300 	ldrd	r2, r3, [r1]
  403a7c:	3108      	adds	r1, #8
  403a7e:	9108      	str	r1, [sp, #32]
  403a80:	4614      	mov	r4, r2
  403a82:	461d      	mov	r5, r3
  403a84:	2a00      	cmp	r2, #0
  403a86:	f173 0000 	sbcs.w	r0, r3, #0
  403a8a:	f2c0 83cd 	blt.w	404228 <_vfiprintf_r+0xb18>
  403a8e:	f1bc 0f00 	cmp.w	ip, #0
  403a92:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
  403a96:	9107      	str	r1, [sp, #28]
  403a98:	bfa8      	it	ge
  403a9a:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  403a9e:	ea54 0205 	orrs.w	r2, r4, r5
  403aa2:	f8cd c014 	str.w	ip, [sp, #20]
  403aa6:	f04f 0301 	mov.w	r3, #1
  403aaa:	f43f af53 	beq.w	403954 <_vfiprintf_r+0x244>
  403aae:	2b01      	cmp	r3, #1
  403ab0:	f000 8315 	beq.w	4040de <_vfiprintf_r+0x9ce>
  403ab4:	2b02      	cmp	r3, #2
  403ab6:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
  403aba:	f040 8248 	bne.w	403f4e <_vfiprintf_r+0x83e>
  403abe:	980a      	ldr	r0, [sp, #40]	; 0x28
  403ac0:	4619      	mov	r1, r3
  403ac2:	0922      	lsrs	r2, r4, #4
  403ac4:	f004 040f 	and.w	r4, r4, #15
  403ac8:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  403acc:	460f      	mov	r7, r1
  403ace:	092b      	lsrs	r3, r5, #4
  403ad0:	5d01      	ldrb	r1, [r0, r4]
  403ad2:	7039      	strb	r1, [r7, #0]
  403ad4:	ea52 0b03 	orrs.w	fp, r2, r3
  403ad8:	4614      	mov	r4, r2
  403ada:	461d      	mov	r5, r3
  403adc:	f107 31ff 	add.w	r1, r7, #4294967295
  403ae0:	d1ef      	bne.n	403ac2 <_vfiprintf_r+0x3b2>
  403ae2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  403ae6:	ebc7 0309 	rsb	r3, r7, r9
  403aea:	9305      	str	r3, [sp, #20]
  403aec:	e744      	b.n	403978 <_vfiprintf_r+0x268>
  403aee:	f04a 0a10 	orr.w	sl, sl, #16
  403af2:	f01a 0320 	ands.w	r3, sl, #32
  403af6:	9004      	str	r0, [sp, #16]
  403af8:	46ac      	mov	ip, r5
  403afa:	f47f af0e 	bne.w	40391a <_vfiprintf_r+0x20a>
  403afe:	f01a 0210 	ands.w	r2, sl, #16
  403b02:	f040 830f 	bne.w	404124 <_vfiprintf_r+0xa14>
  403b06:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
  403b0a:	f000 830b 	beq.w	404124 <_vfiprintf_r+0xa14>
  403b0e:	f8dd b020 	ldr.w	fp, [sp, #32]
  403b12:	f8bb 4000 	ldrh.w	r4, [fp]
  403b16:	f10b 0b04 	add.w	fp, fp, #4
  403b1a:	4613      	mov	r3, r2
  403b1c:	2500      	movs	r5, #0
  403b1e:	f8cd b020 	str.w	fp, [sp, #32]
  403b22:	e706      	b.n	403932 <_vfiprintf_r+0x222>
  403b24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403b28:	2000      	movs	r0, #0
  403b2a:	f818 3b01 	ldrb.w	r3, [r8], #1
  403b2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403b32:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  403b36:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403b3a:	2a09      	cmp	r2, #9
  403b3c:	d9f5      	bls.n	403b2a <_vfiprintf_r+0x41a>
  403b3e:	e656      	b.n	4037ee <_vfiprintf_r+0xde>
  403b40:	f04a 0a10 	orr.w	sl, sl, #16
  403b44:	f01a 0f20 	tst.w	sl, #32
  403b48:	9004      	str	r0, [sp, #16]
  403b4a:	46ac      	mov	ip, r5
  403b4c:	f47f af75 	bne.w	403a3a <_vfiprintf_r+0x32a>
  403b50:	f01a 0f10 	tst.w	sl, #16
  403b54:	f040 82ec 	bne.w	404130 <_vfiprintf_r+0xa20>
  403b58:	f01a 0f40 	tst.w	sl, #64	; 0x40
  403b5c:	f000 82e8 	beq.w	404130 <_vfiprintf_r+0xa20>
  403b60:	f8dd b020 	ldr.w	fp, [sp, #32]
  403b64:	f8bb 4000 	ldrh.w	r4, [fp]
  403b68:	f10b 0b04 	add.w	fp, fp, #4
  403b6c:	2500      	movs	r5, #0
  403b6e:	2301      	movs	r3, #1
  403b70:	f8cd b020 	str.w	fp, [sp, #32]
  403b74:	e6dd      	b.n	403932 <_vfiprintf_r+0x222>
  403b76:	46ac      	mov	ip, r5
  403b78:	f01a 0f20 	tst.w	sl, #32
  403b7c:	4d50      	ldr	r5, [pc, #320]	; (403cc0 <_vfiprintf_r+0x5b0>)
  403b7e:	9004      	str	r0, [sp, #16]
  403b80:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  403b84:	950a      	str	r5, [sp, #40]	; 0x28
  403b86:	f000 80ee 	beq.w	403d66 <_vfiprintf_r+0x656>
  403b8a:	9d08      	ldr	r5, [sp, #32]
  403b8c:	1dea      	adds	r2, r5, #7
  403b8e:	f022 0207 	bic.w	r2, r2, #7
  403b92:	e9d2 4500 	ldrd	r4, r5, [r2]
  403b96:	f102 0b08 	add.w	fp, r2, #8
  403b9a:	f8cd b020 	str.w	fp, [sp, #32]
  403b9e:	f01a 0f01 	tst.w	sl, #1
  403ba2:	f000 82a8 	beq.w	4040f6 <_vfiprintf_r+0x9e6>
  403ba6:	ea54 0b05 	orrs.w	fp, r4, r5
  403baa:	f000 82a4 	beq.w	4040f6 <_vfiprintf_r+0x9e6>
  403bae:	2230      	movs	r2, #48	; 0x30
  403bb0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  403bb4:	f04a 0a02 	orr.w	sl, sl, #2
  403bb8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403bbc:	2302      	movs	r3, #2
  403bbe:	e6b8      	b.n	403932 <_vfiprintf_r+0x222>
  403bc0:	9b08      	ldr	r3, [sp, #32]
  403bc2:	f8dd b020 	ldr.w	fp, [sp, #32]
  403bc6:	681b      	ldr	r3, [r3, #0]
  403bc8:	9004      	str	r0, [sp, #16]
  403bca:	2401      	movs	r4, #1
  403bcc:	f04f 0500 	mov.w	r5, #0
  403bd0:	f10b 0b04 	add.w	fp, fp, #4
  403bd4:	9403      	str	r4, [sp, #12]
  403bd6:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  403bda:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  403bde:	f8cd b020 	str.w	fp, [sp, #32]
  403be2:	9405      	str	r4, [sp, #20]
  403be4:	af16      	add	r7, sp, #88	; 0x58
  403be6:	f04f 0c00 	mov.w	ip, #0
  403bea:	e6d2      	b.n	403992 <_vfiprintf_r+0x282>
  403bec:	f01a 0f20 	tst.w	sl, #32
  403bf0:	9004      	str	r0, [sp, #16]
  403bf2:	46ac      	mov	ip, r5
  403bf4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  403bf8:	f47f af3a 	bne.w	403a70 <_vfiprintf_r+0x360>
  403bfc:	f01a 0f10 	tst.w	sl, #16
  403c00:	f040 82a4 	bne.w	40414c <_vfiprintf_r+0xa3c>
  403c04:	f01a 0f40 	tst.w	sl, #64	; 0x40
  403c08:	f000 82a0 	beq.w	40414c <_vfiprintf_r+0xa3c>
  403c0c:	f8dd b020 	ldr.w	fp, [sp, #32]
  403c10:	f9bb 4000 	ldrsh.w	r4, [fp]
  403c14:	f10b 0b04 	add.w	fp, fp, #4
  403c18:	17e5      	asrs	r5, r4, #31
  403c1a:	4622      	mov	r2, r4
  403c1c:	462b      	mov	r3, r5
  403c1e:	f8cd b020 	str.w	fp, [sp, #32]
  403c22:	e72f      	b.n	403a84 <_vfiprintf_r+0x374>
  403c24:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
  403c28:	f898 3000 	ldrb.w	r3, [r8]
  403c2c:	e5dd      	b.n	4037ea <_vfiprintf_r+0xda>
  403c2e:	f898 3000 	ldrb.w	r3, [r8]
  403c32:	4642      	mov	r2, r8
  403c34:	2b6c      	cmp	r3, #108	; 0x6c
  403c36:	bf03      	ittte	eq
  403c38:	f108 0801 	addeq.w	r8, r8, #1
  403c3c:	f04a 0a20 	orreq.w	sl, sl, #32
  403c40:	7853      	ldrbeq	r3, [r2, #1]
  403c42:	f04a 0a10 	orrne.w	sl, sl, #16
  403c46:	e5d0      	b.n	4037ea <_vfiprintf_r+0xda>
  403c48:	f01a 0f20 	tst.w	sl, #32
  403c4c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  403c50:	f000 82f8 	beq.w	404244 <_vfiprintf_r+0xb34>
  403c54:	9c08      	ldr	r4, [sp, #32]
  403c56:	6821      	ldr	r1, [r4, #0]
  403c58:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403c5a:	17e5      	asrs	r5, r4, #31
  403c5c:	462b      	mov	r3, r5
  403c5e:	9d08      	ldr	r5, [sp, #32]
  403c60:	4622      	mov	r2, r4
  403c62:	3504      	adds	r5, #4
  403c64:	9508      	str	r5, [sp, #32]
  403c66:	e9c1 2300 	strd	r2, r3, [r1]
  403c6a:	e584      	b.n	403776 <_vfiprintf_r+0x66>
  403c6c:	9c08      	ldr	r4, [sp, #32]
  403c6e:	9004      	str	r0, [sp, #16]
  403c70:	6827      	ldr	r7, [r4, #0]
  403c72:	46ac      	mov	ip, r5
  403c74:	f04f 0500 	mov.w	r5, #0
  403c78:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  403c7c:	3404      	adds	r4, #4
  403c7e:	2f00      	cmp	r7, #0
  403c80:	f000 8334 	beq.w	4042ec <_vfiprintf_r+0xbdc>
  403c84:	f1bc 0f00 	cmp.w	ip, #0
  403c88:	4638      	mov	r0, r7
  403c8a:	f2c0 8308 	blt.w	40429e <_vfiprintf_r+0xb8e>
  403c8e:	4662      	mov	r2, ip
  403c90:	2100      	movs	r1, #0
  403c92:	f8cd c004 	str.w	ip, [sp, #4]
  403c96:	f001 fbb9 	bl	40540c <memchr>
  403c9a:	f8dd c004 	ldr.w	ip, [sp, #4]
  403c9e:	2800      	cmp	r0, #0
  403ca0:	f000 833c 	beq.w	40431c <_vfiprintf_r+0xc0c>
  403ca4:	1bc0      	subs	r0, r0, r7
  403ca6:	4560      	cmp	r0, ip
  403ca8:	bfa8      	it	ge
  403caa:	4660      	movge	r0, ip
  403cac:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  403cb0:	9005      	str	r0, [sp, #20]
  403cb2:	9408      	str	r4, [sp, #32]
  403cb4:	9507      	str	r5, [sp, #28]
  403cb6:	f04f 0c00 	mov.w	ip, #0
  403cba:	e65d      	b.n	403978 <_vfiprintf_r+0x268>
  403cbc:	004070ac 	.word	0x004070ac
  403cc0:	0040706c 	.word	0x0040706c
  403cc4:	9a08      	ldr	r2, [sp, #32]
  403cc6:	9004      	str	r0, [sp, #16]
  403cc8:	2330      	movs	r3, #48	; 0x30
  403cca:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  403cce:	f102 0b04 	add.w	fp, r2, #4
  403cd2:	2378      	movs	r3, #120	; 0x78
  403cd4:	48af      	ldr	r0, [pc, #700]	; (403f94 <_vfiprintf_r+0x884>)
  403cd6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  403cda:	46ac      	mov	ip, r5
  403cdc:	6814      	ldr	r4, [r2, #0]
  403cde:	f8cd b020 	str.w	fp, [sp, #32]
  403ce2:	f04a 0a02 	orr.w	sl, sl, #2
  403ce6:	2500      	movs	r5, #0
  403ce8:	900a      	str	r0, [sp, #40]	; 0x28
  403cea:	2302      	movs	r3, #2
  403cec:	e621      	b.n	403932 <_vfiprintf_r+0x222>
  403cee:	f04a 0a20 	orr.w	sl, sl, #32
  403cf2:	f898 3000 	ldrb.w	r3, [r8]
  403cf6:	e578      	b.n	4037ea <_vfiprintf_r+0xda>
  403cf8:	f8dd b020 	ldr.w	fp, [sp, #32]
  403cfc:	f8db 0000 	ldr.w	r0, [fp]
  403d00:	2800      	cmp	r0, #0
  403d02:	f10b 0304 	add.w	r3, fp, #4
  403d06:	f6ff adfb 	blt.w	403900 <_vfiprintf_r+0x1f0>
  403d0a:	9308      	str	r3, [sp, #32]
  403d0c:	f898 3000 	ldrb.w	r3, [r8]
  403d10:	e56b      	b.n	4037ea <_vfiprintf_r+0xda>
  403d12:	f898 3000 	ldrb.w	r3, [r8]
  403d16:	212b      	movs	r1, #43	; 0x2b
  403d18:	e567      	b.n	4037ea <_vfiprintf_r+0xda>
  403d1a:	f898 3000 	ldrb.w	r3, [r8]
  403d1e:	2b2a      	cmp	r3, #42	; 0x2a
  403d20:	f108 0401 	add.w	r4, r8, #1
  403d24:	f000 8309 	beq.w	40433a <_vfiprintf_r+0xc2a>
  403d28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403d2c:	2a09      	cmp	r2, #9
  403d2e:	bf98      	it	ls
  403d30:	2500      	movls	r5, #0
  403d32:	f200 82fe 	bhi.w	404332 <_vfiprintf_r+0xc22>
  403d36:	f814 3b01 	ldrb.w	r3, [r4], #1
  403d3a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  403d3e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  403d42:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403d46:	2a09      	cmp	r2, #9
  403d48:	d9f5      	bls.n	403d36 <_vfiprintf_r+0x626>
  403d4a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  403d4e:	46a0      	mov	r8, r4
  403d50:	e54d      	b.n	4037ee <_vfiprintf_r+0xde>
  403d52:	4c90      	ldr	r4, [pc, #576]	; (403f94 <_vfiprintf_r+0x884>)
  403d54:	9004      	str	r0, [sp, #16]
  403d56:	f01a 0f20 	tst.w	sl, #32
  403d5a:	46ac      	mov	ip, r5
  403d5c:	940a      	str	r4, [sp, #40]	; 0x28
  403d5e:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  403d62:	f47f af12 	bne.w	403b8a <_vfiprintf_r+0x47a>
  403d66:	f01a 0f10 	tst.w	sl, #16
  403d6a:	f040 81e9 	bne.w	404140 <_vfiprintf_r+0xa30>
  403d6e:	f01a 0f40 	tst.w	sl, #64	; 0x40
  403d72:	f000 81e5 	beq.w	404140 <_vfiprintf_r+0xa30>
  403d76:	f8dd b020 	ldr.w	fp, [sp, #32]
  403d7a:	f8bb 4000 	ldrh.w	r4, [fp]
  403d7e:	f10b 0b04 	add.w	fp, fp, #4
  403d82:	2500      	movs	r5, #0
  403d84:	f8cd b020 	str.w	fp, [sp, #32]
  403d88:	e709      	b.n	403b9e <_vfiprintf_r+0x48e>
  403d8a:	f898 3000 	ldrb.w	r3, [r8]
  403d8e:	2900      	cmp	r1, #0
  403d90:	f47f ad2b 	bne.w	4037ea <_vfiprintf_r+0xda>
  403d94:	2120      	movs	r1, #32
  403d96:	e528      	b.n	4037ea <_vfiprintf_r+0xda>
  403d98:	f04a 0a01 	orr.w	sl, sl, #1
  403d9c:	f898 3000 	ldrb.w	r3, [r8]
  403da0:	e523      	b.n	4037ea <_vfiprintf_r+0xda>
  403da2:	9004      	str	r0, [sp, #16]
  403da4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  403da8:	2b00      	cmp	r3, #0
  403daa:	f000 80f9 	beq.w	403fa0 <_vfiprintf_r+0x890>
  403dae:	2501      	movs	r5, #1
  403db0:	f04f 0b00 	mov.w	fp, #0
  403db4:	9503      	str	r5, [sp, #12]
  403db6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  403dba:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  403dbe:	9505      	str	r5, [sp, #20]
  403dc0:	af16      	add	r7, sp, #88	; 0x58
  403dc2:	e710      	b.n	403be6 <_vfiprintf_r+0x4d6>
  403dc4:	9806      	ldr	r0, [sp, #24]
  403dc6:	9902      	ldr	r1, [sp, #8]
  403dc8:	aa13      	add	r2, sp, #76	; 0x4c
  403dca:	f7ff fc65 	bl	403698 <__sprint_r.part.0>
  403dce:	2800      	cmp	r0, #0
  403dd0:	f040 80ed 	bne.w	403fae <_vfiprintf_r+0x89e>
  403dd4:	9814      	ldr	r0, [sp, #80]	; 0x50
  403dd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403dd8:	1c43      	adds	r3, r0, #1
  403dda:	46cc      	mov	ip, r9
  403ddc:	e602      	b.n	4039e4 <_vfiprintf_r+0x2d4>
  403dde:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403de0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403de2:	1c59      	adds	r1, r3, #1
  403de4:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
  403de8:	b168      	cbz	r0, 403e06 <_vfiprintf_r+0x6f6>
  403dea:	3201      	adds	r2, #1
  403dec:	f10d 0047 	add.w	r0, sp, #71	; 0x47
  403df0:	2301      	movs	r3, #1
  403df2:	2907      	cmp	r1, #7
  403df4:	9215      	str	r2, [sp, #84]	; 0x54
  403df6:	9114      	str	r1, [sp, #80]	; 0x50
  403df8:	e886 0009 	stmia.w	r6, {r0, r3}
  403dfc:	f300 8160 	bgt.w	4040c0 <_vfiprintf_r+0x9b0>
  403e00:	460b      	mov	r3, r1
  403e02:	3608      	adds	r6, #8
  403e04:	3101      	adds	r1, #1
  403e06:	9c07      	ldr	r4, [sp, #28]
  403e08:	b164      	cbz	r4, 403e24 <_vfiprintf_r+0x714>
  403e0a:	3202      	adds	r2, #2
  403e0c:	a812      	add	r0, sp, #72	; 0x48
  403e0e:	2302      	movs	r3, #2
  403e10:	2907      	cmp	r1, #7
  403e12:	9215      	str	r2, [sp, #84]	; 0x54
  403e14:	9114      	str	r1, [sp, #80]	; 0x50
  403e16:	e886 0009 	stmia.w	r6, {r0, r3}
  403e1a:	f300 8157 	bgt.w	4040cc <_vfiprintf_r+0x9bc>
  403e1e:	460b      	mov	r3, r1
  403e20:	3608      	adds	r6, #8
  403e22:	3101      	adds	r1, #1
  403e24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403e26:	2d80      	cmp	r5, #128	; 0x80
  403e28:	f000 8101 	beq.w	40402e <_vfiprintf_r+0x91e>
  403e2c:	9d05      	ldr	r5, [sp, #20]
  403e2e:	ebc5 040c 	rsb	r4, r5, ip
  403e32:	2c00      	cmp	r4, #0
  403e34:	dd2f      	ble.n	403e96 <_vfiprintf_r+0x786>
  403e36:	2c10      	cmp	r4, #16
  403e38:	4d57      	ldr	r5, [pc, #348]	; (403f98 <_vfiprintf_r+0x888>)
  403e3a:	dd22      	ble.n	403e82 <_vfiprintf_r+0x772>
  403e3c:	4630      	mov	r0, r6
  403e3e:	f04f 0b10 	mov.w	fp, #16
  403e42:	462e      	mov	r6, r5
  403e44:	4625      	mov	r5, r4
  403e46:	9c06      	ldr	r4, [sp, #24]
  403e48:	e006      	b.n	403e58 <_vfiprintf_r+0x748>
  403e4a:	f103 0c02 	add.w	ip, r3, #2
  403e4e:	3008      	adds	r0, #8
  403e50:	460b      	mov	r3, r1
  403e52:	3d10      	subs	r5, #16
  403e54:	2d10      	cmp	r5, #16
  403e56:	dd10      	ble.n	403e7a <_vfiprintf_r+0x76a>
  403e58:	1c59      	adds	r1, r3, #1
  403e5a:	3210      	adds	r2, #16
  403e5c:	2907      	cmp	r1, #7
  403e5e:	9215      	str	r2, [sp, #84]	; 0x54
  403e60:	e880 0840 	stmia.w	r0, {r6, fp}
  403e64:	9114      	str	r1, [sp, #80]	; 0x50
  403e66:	ddf0      	ble.n	403e4a <_vfiprintf_r+0x73a>
  403e68:	2a00      	cmp	r2, #0
  403e6a:	d163      	bne.n	403f34 <_vfiprintf_r+0x824>
  403e6c:	3d10      	subs	r5, #16
  403e6e:	2d10      	cmp	r5, #16
  403e70:	f04f 0c01 	mov.w	ip, #1
  403e74:	4613      	mov	r3, r2
  403e76:	4648      	mov	r0, r9
  403e78:	dcee      	bgt.n	403e58 <_vfiprintf_r+0x748>
  403e7a:	462c      	mov	r4, r5
  403e7c:	4661      	mov	r1, ip
  403e7e:	4635      	mov	r5, r6
  403e80:	4606      	mov	r6, r0
  403e82:	4422      	add	r2, r4
  403e84:	2907      	cmp	r1, #7
  403e86:	9215      	str	r2, [sp, #84]	; 0x54
  403e88:	6035      	str	r5, [r6, #0]
  403e8a:	6074      	str	r4, [r6, #4]
  403e8c:	9114      	str	r1, [sp, #80]	; 0x50
  403e8e:	f300 80c1 	bgt.w	404014 <_vfiprintf_r+0x904>
  403e92:	3608      	adds	r6, #8
  403e94:	3101      	adds	r1, #1
  403e96:	9d05      	ldr	r5, [sp, #20]
  403e98:	6037      	str	r7, [r6, #0]
  403e9a:	442a      	add	r2, r5
  403e9c:	2907      	cmp	r1, #7
  403e9e:	9215      	str	r2, [sp, #84]	; 0x54
  403ea0:	6075      	str	r5, [r6, #4]
  403ea2:	9114      	str	r1, [sp, #80]	; 0x50
  403ea4:	f340 80c1 	ble.w	40402a <_vfiprintf_r+0x91a>
  403ea8:	2a00      	cmp	r2, #0
  403eaa:	f040 8130 	bne.w	40410e <_vfiprintf_r+0x9fe>
  403eae:	9214      	str	r2, [sp, #80]	; 0x50
  403eb0:	464e      	mov	r6, r9
  403eb2:	f01a 0f04 	tst.w	sl, #4
  403eb6:	f000 808b 	beq.w	403fd0 <_vfiprintf_r+0x8c0>
  403eba:	9d04      	ldr	r5, [sp, #16]
  403ebc:	f8dd b00c 	ldr.w	fp, [sp, #12]
  403ec0:	ebcb 0405 	rsb	r4, fp, r5
  403ec4:	2c00      	cmp	r4, #0
  403ec6:	f340 8083 	ble.w	403fd0 <_vfiprintf_r+0x8c0>
  403eca:	2c10      	cmp	r4, #16
  403ecc:	f340 8222 	ble.w	404314 <_vfiprintf_r+0xc04>
  403ed0:	9914      	ldr	r1, [sp, #80]	; 0x50
  403ed2:	4d32      	ldr	r5, [pc, #200]	; (403f9c <_vfiprintf_r+0x88c>)
  403ed4:	f8dd a018 	ldr.w	sl, [sp, #24]
  403ed8:	f8dd b008 	ldr.w	fp, [sp, #8]
  403edc:	2710      	movs	r7, #16
  403ede:	e005      	b.n	403eec <_vfiprintf_r+0x7dc>
  403ee0:	1c88      	adds	r0, r1, #2
  403ee2:	3608      	adds	r6, #8
  403ee4:	4619      	mov	r1, r3
  403ee6:	3c10      	subs	r4, #16
  403ee8:	2c10      	cmp	r4, #16
  403eea:	dd10      	ble.n	403f0e <_vfiprintf_r+0x7fe>
  403eec:	1c4b      	adds	r3, r1, #1
  403eee:	3210      	adds	r2, #16
  403ef0:	2b07      	cmp	r3, #7
  403ef2:	9215      	str	r2, [sp, #84]	; 0x54
  403ef4:	e886 00a0 	stmia.w	r6, {r5, r7}
  403ef8:	9314      	str	r3, [sp, #80]	; 0x50
  403efa:	ddf1      	ble.n	403ee0 <_vfiprintf_r+0x7d0>
  403efc:	2a00      	cmp	r2, #0
  403efe:	d17d      	bne.n	403ffc <_vfiprintf_r+0x8ec>
  403f00:	3c10      	subs	r4, #16
  403f02:	2c10      	cmp	r4, #16
  403f04:	f04f 0001 	mov.w	r0, #1
  403f08:	4611      	mov	r1, r2
  403f0a:	464e      	mov	r6, r9
  403f0c:	dcee      	bgt.n	403eec <_vfiprintf_r+0x7dc>
  403f0e:	4422      	add	r2, r4
  403f10:	2807      	cmp	r0, #7
  403f12:	9215      	str	r2, [sp, #84]	; 0x54
  403f14:	6035      	str	r5, [r6, #0]
  403f16:	6074      	str	r4, [r6, #4]
  403f18:	9014      	str	r0, [sp, #80]	; 0x50
  403f1a:	dd59      	ble.n	403fd0 <_vfiprintf_r+0x8c0>
  403f1c:	2a00      	cmp	r2, #0
  403f1e:	d14f      	bne.n	403fc0 <_vfiprintf_r+0x8b0>
  403f20:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403f22:	f8dd b00c 	ldr.w	fp, [sp, #12]
  403f26:	9d04      	ldr	r5, [sp, #16]
  403f28:	45ab      	cmp	fp, r5
  403f2a:	bfac      	ite	ge
  403f2c:	445c      	addge	r4, fp
  403f2e:	1964      	addlt	r4, r4, r5
  403f30:	9409      	str	r4, [sp, #36]	; 0x24
  403f32:	e05e      	b.n	403ff2 <_vfiprintf_r+0x8e2>
  403f34:	4620      	mov	r0, r4
  403f36:	9902      	ldr	r1, [sp, #8]
  403f38:	aa13      	add	r2, sp, #76	; 0x4c
  403f3a:	f7ff fbad 	bl	403698 <__sprint_r.part.0>
  403f3e:	2800      	cmp	r0, #0
  403f40:	d135      	bne.n	403fae <_vfiprintf_r+0x89e>
  403f42:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403f44:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403f46:	f103 0c01 	add.w	ip, r3, #1
  403f4a:	4648      	mov	r0, r9
  403f4c:	e781      	b.n	403e52 <_vfiprintf_r+0x742>
  403f4e:	08e0      	lsrs	r0, r4, #3
  403f50:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  403f54:	f004 0207 	and.w	r2, r4, #7
  403f58:	08e9      	lsrs	r1, r5, #3
  403f5a:	3230      	adds	r2, #48	; 0x30
  403f5c:	ea50 0b01 	orrs.w	fp, r0, r1
  403f60:	461f      	mov	r7, r3
  403f62:	701a      	strb	r2, [r3, #0]
  403f64:	4604      	mov	r4, r0
  403f66:	460d      	mov	r5, r1
  403f68:	f103 33ff 	add.w	r3, r3, #4294967295
  403f6c:	d1ef      	bne.n	403f4e <_vfiprintf_r+0x83e>
  403f6e:	f01a 0f01 	tst.w	sl, #1
  403f72:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  403f76:	4639      	mov	r1, r7
  403f78:	f000 80b9 	beq.w	4040ee <_vfiprintf_r+0x9de>
  403f7c:	2a30      	cmp	r2, #48	; 0x30
  403f7e:	f43f acf8 	beq.w	403972 <_vfiprintf_r+0x262>
  403f82:	461f      	mov	r7, r3
  403f84:	ebc7 0509 	rsb	r5, r7, r9
  403f88:	2330      	movs	r3, #48	; 0x30
  403f8a:	9505      	str	r5, [sp, #20]
  403f8c:	f801 3c01 	strb.w	r3, [r1, #-1]
  403f90:	e4f2      	b.n	403978 <_vfiprintf_r+0x268>
  403f92:	bf00      	nop
  403f94:	00407080 	.word	0x00407080
  403f98:	0040709c 	.word	0x0040709c
  403f9c:	004070ac 	.word	0x004070ac
  403fa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403fa2:	b123      	cbz	r3, 403fae <_vfiprintf_r+0x89e>
  403fa4:	9806      	ldr	r0, [sp, #24]
  403fa6:	9902      	ldr	r1, [sp, #8]
  403fa8:	aa13      	add	r2, sp, #76	; 0x4c
  403faa:	f7ff fb75 	bl	403698 <__sprint_r.part.0>
  403fae:	9c02      	ldr	r4, [sp, #8]
  403fb0:	89a3      	ldrh	r3, [r4, #12]
  403fb2:	065b      	lsls	r3, r3, #25
  403fb4:	f53f ac9c 	bmi.w	4038f0 <_vfiprintf_r+0x1e0>
  403fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
  403fba:	b031      	add	sp, #196	; 0xc4
  403fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fc0:	9806      	ldr	r0, [sp, #24]
  403fc2:	9902      	ldr	r1, [sp, #8]
  403fc4:	aa13      	add	r2, sp, #76	; 0x4c
  403fc6:	f7ff fb67 	bl	403698 <__sprint_r.part.0>
  403fca:	2800      	cmp	r0, #0
  403fcc:	d1ef      	bne.n	403fae <_vfiprintf_r+0x89e>
  403fce:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403fd0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403fd2:	f8dd b00c 	ldr.w	fp, [sp, #12]
  403fd6:	9d04      	ldr	r5, [sp, #16]
  403fd8:	45ab      	cmp	fp, r5
  403fda:	bfac      	ite	ge
  403fdc:	445c      	addge	r4, fp
  403fde:	1964      	addlt	r4, r4, r5
  403fe0:	9409      	str	r4, [sp, #36]	; 0x24
  403fe2:	b132      	cbz	r2, 403ff2 <_vfiprintf_r+0x8e2>
  403fe4:	9806      	ldr	r0, [sp, #24]
  403fe6:	9902      	ldr	r1, [sp, #8]
  403fe8:	aa13      	add	r2, sp, #76	; 0x4c
  403fea:	f7ff fb55 	bl	403698 <__sprint_r.part.0>
  403fee:	2800      	cmp	r0, #0
  403ff0:	d1dd      	bne.n	403fae <_vfiprintf_r+0x89e>
  403ff2:	2000      	movs	r0, #0
  403ff4:	9014      	str	r0, [sp, #80]	; 0x50
  403ff6:	464e      	mov	r6, r9
  403ff8:	f7ff bbbd 	b.w	403776 <_vfiprintf_r+0x66>
  403ffc:	4650      	mov	r0, sl
  403ffe:	4659      	mov	r1, fp
  404000:	aa13      	add	r2, sp, #76	; 0x4c
  404002:	f7ff fb49 	bl	403698 <__sprint_r.part.0>
  404006:	2800      	cmp	r0, #0
  404008:	d1d1      	bne.n	403fae <_vfiprintf_r+0x89e>
  40400a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40400c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40400e:	1c48      	adds	r0, r1, #1
  404010:	464e      	mov	r6, r9
  404012:	e768      	b.n	403ee6 <_vfiprintf_r+0x7d6>
  404014:	2a00      	cmp	r2, #0
  404016:	f040 80fa 	bne.w	40420e <_vfiprintf_r+0xafe>
  40401a:	9c05      	ldr	r4, [sp, #20]
  40401c:	9720      	str	r7, [sp, #128]	; 0x80
  40401e:	2301      	movs	r3, #1
  404020:	9421      	str	r4, [sp, #132]	; 0x84
  404022:	9415      	str	r4, [sp, #84]	; 0x54
  404024:	4622      	mov	r2, r4
  404026:	9314      	str	r3, [sp, #80]	; 0x50
  404028:	464e      	mov	r6, r9
  40402a:	3608      	adds	r6, #8
  40402c:	e741      	b.n	403eb2 <_vfiprintf_r+0x7a2>
  40402e:	9d04      	ldr	r5, [sp, #16]
  404030:	f8dd b00c 	ldr.w	fp, [sp, #12]
  404034:	ebcb 0405 	rsb	r4, fp, r5
  404038:	2c00      	cmp	r4, #0
  40403a:	f77f aef7 	ble.w	403e2c <_vfiprintf_r+0x71c>
  40403e:	2c10      	cmp	r4, #16
  404040:	4da8      	ldr	r5, [pc, #672]	; (4042e4 <_vfiprintf_r+0xbd4>)
  404042:	f340 8174 	ble.w	40432e <_vfiprintf_r+0xc1e>
  404046:	4629      	mov	r1, r5
  404048:	f04f 0b10 	mov.w	fp, #16
  40404c:	4625      	mov	r5, r4
  40404e:	4664      	mov	r4, ip
  404050:	46b4      	mov	ip, r6
  404052:	460e      	mov	r6, r1
  404054:	e006      	b.n	404064 <_vfiprintf_r+0x954>
  404056:	1c98      	adds	r0, r3, #2
  404058:	f10c 0c08 	add.w	ip, ip, #8
  40405c:	460b      	mov	r3, r1
  40405e:	3d10      	subs	r5, #16
  404060:	2d10      	cmp	r5, #16
  404062:	dd0f      	ble.n	404084 <_vfiprintf_r+0x974>
  404064:	1c59      	adds	r1, r3, #1
  404066:	3210      	adds	r2, #16
  404068:	2907      	cmp	r1, #7
  40406a:	9215      	str	r2, [sp, #84]	; 0x54
  40406c:	e88c 0840 	stmia.w	ip, {r6, fp}
  404070:	9114      	str	r1, [sp, #80]	; 0x50
  404072:	ddf0      	ble.n	404056 <_vfiprintf_r+0x946>
  404074:	b9ba      	cbnz	r2, 4040a6 <_vfiprintf_r+0x996>
  404076:	3d10      	subs	r5, #16
  404078:	2d10      	cmp	r5, #16
  40407a:	f04f 0001 	mov.w	r0, #1
  40407e:	4613      	mov	r3, r2
  404080:	46cc      	mov	ip, r9
  404082:	dcef      	bgt.n	404064 <_vfiprintf_r+0x954>
  404084:	4633      	mov	r3, r6
  404086:	4666      	mov	r6, ip
  404088:	46a4      	mov	ip, r4
  40408a:	462c      	mov	r4, r5
  40408c:	461d      	mov	r5, r3
  40408e:	4422      	add	r2, r4
  404090:	2807      	cmp	r0, #7
  404092:	9215      	str	r2, [sp, #84]	; 0x54
  404094:	6035      	str	r5, [r6, #0]
  404096:	6074      	str	r4, [r6, #4]
  404098:	9014      	str	r0, [sp, #80]	; 0x50
  40409a:	f300 80b2 	bgt.w	404202 <_vfiprintf_r+0xaf2>
  40409e:	3608      	adds	r6, #8
  4040a0:	1c41      	adds	r1, r0, #1
  4040a2:	4603      	mov	r3, r0
  4040a4:	e6c2      	b.n	403e2c <_vfiprintf_r+0x71c>
  4040a6:	9806      	ldr	r0, [sp, #24]
  4040a8:	9902      	ldr	r1, [sp, #8]
  4040aa:	aa13      	add	r2, sp, #76	; 0x4c
  4040ac:	f7ff faf4 	bl	403698 <__sprint_r.part.0>
  4040b0:	2800      	cmp	r0, #0
  4040b2:	f47f af7c 	bne.w	403fae <_vfiprintf_r+0x89e>
  4040b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4040b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4040ba:	1c58      	adds	r0, r3, #1
  4040bc:	46cc      	mov	ip, r9
  4040be:	e7ce      	b.n	40405e <_vfiprintf_r+0x94e>
  4040c0:	2a00      	cmp	r2, #0
  4040c2:	d17c      	bne.n	4041be <_vfiprintf_r+0xaae>
  4040c4:	4619      	mov	r1, r3
  4040c6:	464e      	mov	r6, r9
  4040c8:	4613      	mov	r3, r2
  4040ca:	e69c      	b.n	403e06 <_vfiprintf_r+0x6f6>
  4040cc:	2a00      	cmp	r2, #0
  4040ce:	f040 8087 	bne.w	4041e0 <_vfiprintf_r+0xad0>
  4040d2:	2101      	movs	r1, #1
  4040d4:	4613      	mov	r3, r2
  4040d6:	464e      	mov	r6, r9
  4040d8:	e6a4      	b.n	403e24 <_vfiprintf_r+0x714>
  4040da:	464f      	mov	r7, r9
  4040dc:	e44c      	b.n	403978 <_vfiprintf_r+0x268>
  4040de:	2d00      	cmp	r5, #0
  4040e0:	bf08      	it	eq
  4040e2:	2c0a      	cmpeq	r4, #10
  4040e4:	d249      	bcs.n	40417a <_vfiprintf_r+0xa6a>
  4040e6:	af30      	add	r7, sp, #192	; 0xc0
  4040e8:	3430      	adds	r4, #48	; 0x30
  4040ea:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4040ee:	ebc7 0309 	rsb	r3, r7, r9
  4040f2:	9305      	str	r3, [sp, #20]
  4040f4:	e440      	b.n	403978 <_vfiprintf_r+0x268>
  4040f6:	2302      	movs	r3, #2
  4040f8:	e41b      	b.n	403932 <_vfiprintf_r+0x222>
  4040fa:	2a00      	cmp	r2, #0
  4040fc:	f040 80b2 	bne.w	404264 <_vfiprintf_r+0xb54>
  404100:	4613      	mov	r3, r2
  404102:	2101      	movs	r1, #1
  404104:	464e      	mov	r6, r9
  404106:	e66d      	b.n	403de4 <_vfiprintf_r+0x6d4>
  404108:	4644      	mov	r4, r8
  40410a:	f7ff bb5c 	b.w	4037c6 <_vfiprintf_r+0xb6>
  40410e:	9806      	ldr	r0, [sp, #24]
  404110:	9902      	ldr	r1, [sp, #8]
  404112:	aa13      	add	r2, sp, #76	; 0x4c
  404114:	f7ff fac0 	bl	403698 <__sprint_r.part.0>
  404118:	2800      	cmp	r0, #0
  40411a:	f47f af48 	bne.w	403fae <_vfiprintf_r+0x89e>
  40411e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404120:	464e      	mov	r6, r9
  404122:	e6c6      	b.n	403eb2 <_vfiprintf_r+0x7a2>
  404124:	9d08      	ldr	r5, [sp, #32]
  404126:	682c      	ldr	r4, [r5, #0]
  404128:	3504      	adds	r5, #4
  40412a:	9508      	str	r5, [sp, #32]
  40412c:	2500      	movs	r5, #0
  40412e:	e400      	b.n	403932 <_vfiprintf_r+0x222>
  404130:	9d08      	ldr	r5, [sp, #32]
  404132:	682c      	ldr	r4, [r5, #0]
  404134:	3504      	adds	r5, #4
  404136:	9508      	str	r5, [sp, #32]
  404138:	2301      	movs	r3, #1
  40413a:	2500      	movs	r5, #0
  40413c:	f7ff bbf9 	b.w	403932 <_vfiprintf_r+0x222>
  404140:	9d08      	ldr	r5, [sp, #32]
  404142:	682c      	ldr	r4, [r5, #0]
  404144:	3504      	adds	r5, #4
  404146:	9508      	str	r5, [sp, #32]
  404148:	2500      	movs	r5, #0
  40414a:	e528      	b.n	403b9e <_vfiprintf_r+0x48e>
  40414c:	9d08      	ldr	r5, [sp, #32]
  40414e:	f8dd b020 	ldr.w	fp, [sp, #32]
  404152:	682c      	ldr	r4, [r5, #0]
  404154:	f10b 0b04 	add.w	fp, fp, #4
  404158:	17e5      	asrs	r5, r4, #31
  40415a:	f8cd b020 	str.w	fp, [sp, #32]
  40415e:	4622      	mov	r2, r4
  404160:	462b      	mov	r3, r5
  404162:	e48f      	b.n	403a84 <_vfiprintf_r+0x374>
  404164:	9806      	ldr	r0, [sp, #24]
  404166:	9902      	ldr	r1, [sp, #8]
  404168:	aa13      	add	r2, sp, #76	; 0x4c
  40416a:	f7ff fa95 	bl	403698 <__sprint_r.part.0>
  40416e:	2800      	cmp	r0, #0
  404170:	f47f af1d 	bne.w	403fae <_vfiprintf_r+0x89e>
  404174:	464e      	mov	r6, r9
  404176:	f7ff bb9b 	b.w	4038b0 <_vfiprintf_r+0x1a0>
  40417a:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
  40417e:	9603      	str	r6, [sp, #12]
  404180:	465e      	mov	r6, fp
  404182:	46e3      	mov	fp, ip
  404184:	4620      	mov	r0, r4
  404186:	4629      	mov	r1, r5
  404188:	220a      	movs	r2, #10
  40418a:	2300      	movs	r3, #0
  40418c:	f001 ff2e 	bl	405fec <__aeabi_uldivmod>
  404190:	3230      	adds	r2, #48	; 0x30
  404192:	7032      	strb	r2, [r6, #0]
  404194:	4620      	mov	r0, r4
  404196:	4629      	mov	r1, r5
  404198:	220a      	movs	r2, #10
  40419a:	2300      	movs	r3, #0
  40419c:	f001 ff26 	bl	405fec <__aeabi_uldivmod>
  4041a0:	4604      	mov	r4, r0
  4041a2:	460d      	mov	r5, r1
  4041a4:	ea54 0005 	orrs.w	r0, r4, r5
  4041a8:	4637      	mov	r7, r6
  4041aa:	f106 36ff 	add.w	r6, r6, #4294967295
  4041ae:	d1e9      	bne.n	404184 <_vfiprintf_r+0xa74>
  4041b0:	ebc7 0309 	rsb	r3, r7, r9
  4041b4:	46dc      	mov	ip, fp
  4041b6:	9e03      	ldr	r6, [sp, #12]
  4041b8:	9305      	str	r3, [sp, #20]
  4041ba:	f7ff bbdd 	b.w	403978 <_vfiprintf_r+0x268>
  4041be:	9806      	ldr	r0, [sp, #24]
  4041c0:	9902      	ldr	r1, [sp, #8]
  4041c2:	f8cd c004 	str.w	ip, [sp, #4]
  4041c6:	aa13      	add	r2, sp, #76	; 0x4c
  4041c8:	f7ff fa66 	bl	403698 <__sprint_r.part.0>
  4041cc:	f8dd c004 	ldr.w	ip, [sp, #4]
  4041d0:	2800      	cmp	r0, #0
  4041d2:	f47f aeec 	bne.w	403fae <_vfiprintf_r+0x89e>
  4041d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4041d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4041da:	1c59      	adds	r1, r3, #1
  4041dc:	464e      	mov	r6, r9
  4041de:	e612      	b.n	403e06 <_vfiprintf_r+0x6f6>
  4041e0:	9806      	ldr	r0, [sp, #24]
  4041e2:	9902      	ldr	r1, [sp, #8]
  4041e4:	f8cd c004 	str.w	ip, [sp, #4]
  4041e8:	aa13      	add	r2, sp, #76	; 0x4c
  4041ea:	f7ff fa55 	bl	403698 <__sprint_r.part.0>
  4041ee:	f8dd c004 	ldr.w	ip, [sp, #4]
  4041f2:	2800      	cmp	r0, #0
  4041f4:	f47f aedb 	bne.w	403fae <_vfiprintf_r+0x89e>
  4041f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4041fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4041fc:	1c59      	adds	r1, r3, #1
  4041fe:	464e      	mov	r6, r9
  404200:	e610      	b.n	403e24 <_vfiprintf_r+0x714>
  404202:	2a00      	cmp	r2, #0
  404204:	d156      	bne.n	4042b4 <_vfiprintf_r+0xba4>
  404206:	2101      	movs	r1, #1
  404208:	4613      	mov	r3, r2
  40420a:	464e      	mov	r6, r9
  40420c:	e60e      	b.n	403e2c <_vfiprintf_r+0x71c>
  40420e:	9806      	ldr	r0, [sp, #24]
  404210:	9902      	ldr	r1, [sp, #8]
  404212:	aa13      	add	r2, sp, #76	; 0x4c
  404214:	f7ff fa40 	bl	403698 <__sprint_r.part.0>
  404218:	2800      	cmp	r0, #0
  40421a:	f47f aec8 	bne.w	403fae <_vfiprintf_r+0x89e>
  40421e:	9914      	ldr	r1, [sp, #80]	; 0x50
  404220:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404222:	3101      	adds	r1, #1
  404224:	464e      	mov	r6, r9
  404226:	e636      	b.n	403e96 <_vfiprintf_r+0x786>
  404228:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40422c:	4264      	negs	r4, r4
  40422e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404232:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  404236:	f8cd b01c 	str.w	fp, [sp, #28]
  40423a:	f8cd c014 	str.w	ip, [sp, #20]
  40423e:	2301      	movs	r3, #1
  404240:	f7ff bb7f 	b.w	403942 <_vfiprintf_r+0x232>
  404244:	f01a 0f10 	tst.w	sl, #16
  404248:	d11d      	bne.n	404286 <_vfiprintf_r+0xb76>
  40424a:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40424e:	d059      	beq.n	404304 <_vfiprintf_r+0xbf4>
  404250:	9d08      	ldr	r5, [sp, #32]
  404252:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  404256:	682b      	ldr	r3, [r5, #0]
  404258:	3504      	adds	r5, #4
  40425a:	9508      	str	r5, [sp, #32]
  40425c:	f8a3 b000 	strh.w	fp, [r3]
  404260:	f7ff ba89 	b.w	403776 <_vfiprintf_r+0x66>
  404264:	9806      	ldr	r0, [sp, #24]
  404266:	9902      	ldr	r1, [sp, #8]
  404268:	f8cd c004 	str.w	ip, [sp, #4]
  40426c:	aa13      	add	r2, sp, #76	; 0x4c
  40426e:	f7ff fa13 	bl	403698 <__sprint_r.part.0>
  404272:	f8dd c004 	ldr.w	ip, [sp, #4]
  404276:	2800      	cmp	r0, #0
  404278:	f47f ae99 	bne.w	403fae <_vfiprintf_r+0x89e>
  40427c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40427e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404280:	1c59      	adds	r1, r3, #1
  404282:	464e      	mov	r6, r9
  404284:	e5ae      	b.n	403de4 <_vfiprintf_r+0x6d4>
  404286:	f8dd b020 	ldr.w	fp, [sp, #32]
  40428a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40428c:	f8db 3000 	ldr.w	r3, [fp]
  404290:	f10b 0b04 	add.w	fp, fp, #4
  404294:	f8cd b020 	str.w	fp, [sp, #32]
  404298:	601c      	str	r4, [r3, #0]
  40429a:	f7ff ba6c 	b.w	403776 <_vfiprintf_r+0x66>
  40429e:	9408      	str	r4, [sp, #32]
  4042a0:	f001 fc7e 	bl	405ba0 <strlen>
  4042a4:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
  4042a8:	9005      	str	r0, [sp, #20]
  4042aa:	9407      	str	r4, [sp, #28]
  4042ac:	f04f 0c00 	mov.w	ip, #0
  4042b0:	f7ff bb62 	b.w	403978 <_vfiprintf_r+0x268>
  4042b4:	9806      	ldr	r0, [sp, #24]
  4042b6:	9902      	ldr	r1, [sp, #8]
  4042b8:	f8cd c004 	str.w	ip, [sp, #4]
  4042bc:	aa13      	add	r2, sp, #76	; 0x4c
  4042be:	f7ff f9eb 	bl	403698 <__sprint_r.part.0>
  4042c2:	f8dd c004 	ldr.w	ip, [sp, #4]
  4042c6:	2800      	cmp	r0, #0
  4042c8:	f47f ae71 	bne.w	403fae <_vfiprintf_r+0x89e>
  4042cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4042ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4042d0:	1c59      	adds	r1, r3, #1
  4042d2:	464e      	mov	r6, r9
  4042d4:	e5aa      	b.n	403e2c <_vfiprintf_r+0x71c>
  4042d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4042d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4042da:	4d03      	ldr	r5, [pc, #12]	; (4042e8 <_vfiprintf_r+0xbd8>)
  4042dc:	3301      	adds	r3, #1
  4042de:	f7ff bb9b 	b.w	403a18 <_vfiprintf_r+0x308>
  4042e2:	bf00      	nop
  4042e4:	0040709c 	.word	0x0040709c
  4042e8:	004070ac 	.word	0x004070ac
  4042ec:	f1bc 0f06 	cmp.w	ip, #6
  4042f0:	bf34      	ite	cc
  4042f2:	4663      	movcc	r3, ip
  4042f4:	2306      	movcs	r3, #6
  4042f6:	9408      	str	r4, [sp, #32]
  4042f8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
  4042fc:	9305      	str	r3, [sp, #20]
  4042fe:	9403      	str	r4, [sp, #12]
  404300:	4f16      	ldr	r7, [pc, #88]	; (40435c <_vfiprintf_r+0xc4c>)
  404302:	e470      	b.n	403be6 <_vfiprintf_r+0x4d6>
  404304:	9c08      	ldr	r4, [sp, #32]
  404306:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404308:	6823      	ldr	r3, [r4, #0]
  40430a:	3404      	adds	r4, #4
  40430c:	9408      	str	r4, [sp, #32]
  40430e:	601d      	str	r5, [r3, #0]
  404310:	f7ff ba31 	b.w	403776 <_vfiprintf_r+0x66>
  404314:	9814      	ldr	r0, [sp, #80]	; 0x50
  404316:	4d12      	ldr	r5, [pc, #72]	; (404360 <_vfiprintf_r+0xc50>)
  404318:	3001      	adds	r0, #1
  40431a:	e5f8      	b.n	403f0e <_vfiprintf_r+0x7fe>
  40431c:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  404320:	f8cd c014 	str.w	ip, [sp, #20]
  404324:	9507      	str	r5, [sp, #28]
  404326:	9408      	str	r4, [sp, #32]
  404328:	4684      	mov	ip, r0
  40432a:	f7ff bb25 	b.w	403978 <_vfiprintf_r+0x268>
  40432e:	4608      	mov	r0, r1
  404330:	e6ad      	b.n	40408e <_vfiprintf_r+0x97e>
  404332:	46a0      	mov	r8, r4
  404334:	2500      	movs	r5, #0
  404336:	f7ff ba5a 	b.w	4037ee <_vfiprintf_r+0xde>
  40433a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40433e:	f898 3001 	ldrb.w	r3, [r8, #1]
  404342:	f8db 5000 	ldr.w	r5, [fp]
  404346:	f10b 0204 	add.w	r2, fp, #4
  40434a:	2d00      	cmp	r5, #0
  40434c:	9208      	str	r2, [sp, #32]
  40434e:	46a0      	mov	r8, r4
  404350:	f6bf aa4b 	bge.w	4037ea <_vfiprintf_r+0xda>
  404354:	f04f 35ff 	mov.w	r5, #4294967295
  404358:	f7ff ba47 	b.w	4037ea <_vfiprintf_r+0xda>
  40435c:	00407094 	.word	0x00407094
  404360:	004070ac 	.word	0x004070ac

00404364 <__sbprintf>:
  404364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404368:	460c      	mov	r4, r1
  40436a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  40436e:	f8b1 900c 	ldrh.w	r9, [r1, #12]
  404372:	69e7      	ldr	r7, [r4, #28]
  404374:	6e49      	ldr	r1, [r1, #100]	; 0x64
  404376:	f8b4 800e 	ldrh.w	r8, [r4, #14]
  40437a:	9119      	str	r1, [sp, #100]	; 0x64
  40437c:	ad1a      	add	r5, sp, #104	; 0x68
  40437e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  404382:	f04f 0e00 	mov.w	lr, #0
  404386:	9707      	str	r7, [sp, #28]
  404388:	f029 0902 	bic.w	r9, r9, #2
  40438c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40438e:	9500      	str	r5, [sp, #0]
  404390:	4669      	mov	r1, sp
  404392:	9504      	str	r5, [sp, #16]
  404394:	9602      	str	r6, [sp, #8]
  404396:	9605      	str	r6, [sp, #20]
  404398:	f8ad 900c 	strh.w	r9, [sp, #12]
  40439c:	f8ad 800e 	strh.w	r8, [sp, #14]
  4043a0:	9709      	str	r7, [sp, #36]	; 0x24
  4043a2:	f8cd e018 	str.w	lr, [sp, #24]
  4043a6:	4606      	mov	r6, r0
  4043a8:	f7ff f9b2 	bl	403710 <_vfiprintf_r>
  4043ac:	1e05      	subs	r5, r0, #0
  4043ae:	db07      	blt.n	4043c0 <__sbprintf+0x5c>
  4043b0:	4630      	mov	r0, r6
  4043b2:	4669      	mov	r1, sp
  4043b4:	f000 f936 	bl	404624 <_fflush_r>
  4043b8:	2800      	cmp	r0, #0
  4043ba:	bf18      	it	ne
  4043bc:	f04f 35ff 	movne.w	r5, #4294967295
  4043c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4043c4:	065b      	lsls	r3, r3, #25
  4043c6:	d503      	bpl.n	4043d0 <__sbprintf+0x6c>
  4043c8:	89a3      	ldrh	r3, [r4, #12]
  4043ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4043ce:	81a3      	strh	r3, [r4, #12]
  4043d0:	4628      	mov	r0, r5
  4043d2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  4043d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4043da:	bf00      	nop

004043dc <__swsetup_r>:
  4043dc:	4b2f      	ldr	r3, [pc, #188]	; (40449c <__swsetup_r+0xc0>)
  4043de:	681b      	ldr	r3, [r3, #0]
  4043e0:	b570      	push	{r4, r5, r6, lr}
  4043e2:	4606      	mov	r6, r0
  4043e4:	460c      	mov	r4, r1
  4043e6:	b113      	cbz	r3, 4043ee <__swsetup_r+0x12>
  4043e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4043ea:	2a00      	cmp	r2, #0
  4043ec:	d036      	beq.n	40445c <__swsetup_r+0x80>
  4043ee:	89a5      	ldrh	r5, [r4, #12]
  4043f0:	b2ab      	uxth	r3, r5
  4043f2:	0719      	lsls	r1, r3, #28
  4043f4:	d50c      	bpl.n	404410 <__swsetup_r+0x34>
  4043f6:	6922      	ldr	r2, [r4, #16]
  4043f8:	b1aa      	cbz	r2, 404426 <__swsetup_r+0x4a>
  4043fa:	f013 0101 	ands.w	r1, r3, #1
  4043fe:	d01e      	beq.n	40443e <__swsetup_r+0x62>
  404400:	6963      	ldr	r3, [r4, #20]
  404402:	2100      	movs	r1, #0
  404404:	425b      	negs	r3, r3
  404406:	61a3      	str	r3, [r4, #24]
  404408:	60a1      	str	r1, [r4, #8]
  40440a:	b1f2      	cbz	r2, 40444a <__swsetup_r+0x6e>
  40440c:	2000      	movs	r0, #0
  40440e:	bd70      	pop	{r4, r5, r6, pc}
  404410:	06da      	lsls	r2, r3, #27
  404412:	d53b      	bpl.n	40448c <__swsetup_r+0xb0>
  404414:	075b      	lsls	r3, r3, #29
  404416:	d425      	bmi.n	404464 <__swsetup_r+0x88>
  404418:	6922      	ldr	r2, [r4, #16]
  40441a:	f045 0308 	orr.w	r3, r5, #8
  40441e:	81a3      	strh	r3, [r4, #12]
  404420:	b29b      	uxth	r3, r3
  404422:	2a00      	cmp	r2, #0
  404424:	d1e9      	bne.n	4043fa <__swsetup_r+0x1e>
  404426:	f403 7120 	and.w	r1, r3, #640	; 0x280
  40442a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  40442e:	d0e4      	beq.n	4043fa <__swsetup_r+0x1e>
  404430:	4630      	mov	r0, r6
  404432:	4621      	mov	r1, r4
  404434:	f000 fcde 	bl	404df4 <__smakebuf_r>
  404438:	89a3      	ldrh	r3, [r4, #12]
  40443a:	6922      	ldr	r2, [r4, #16]
  40443c:	e7dd      	b.n	4043fa <__swsetup_r+0x1e>
  40443e:	0798      	lsls	r0, r3, #30
  404440:	bf58      	it	pl
  404442:	6961      	ldrpl	r1, [r4, #20]
  404444:	60a1      	str	r1, [r4, #8]
  404446:	2a00      	cmp	r2, #0
  404448:	d1e0      	bne.n	40440c <__swsetup_r+0x30>
  40444a:	89a3      	ldrh	r3, [r4, #12]
  40444c:	061a      	lsls	r2, r3, #24
  40444e:	d5dd      	bpl.n	40440c <__swsetup_r+0x30>
  404450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404454:	81a3      	strh	r3, [r4, #12]
  404456:	f04f 30ff 	mov.w	r0, #4294967295
  40445a:	bd70      	pop	{r4, r5, r6, pc}
  40445c:	4618      	mov	r0, r3
  40445e:	f000 f8fd 	bl	40465c <__sinit>
  404462:	e7c4      	b.n	4043ee <__swsetup_r+0x12>
  404464:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404466:	b149      	cbz	r1, 40447c <__swsetup_r+0xa0>
  404468:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40446c:	4299      	cmp	r1, r3
  40446e:	d003      	beq.n	404478 <__swsetup_r+0x9c>
  404470:	4630      	mov	r0, r6
  404472:	f000 fa35 	bl	4048e0 <_free_r>
  404476:	89a5      	ldrh	r5, [r4, #12]
  404478:	2300      	movs	r3, #0
  40447a:	6323      	str	r3, [r4, #48]	; 0x30
  40447c:	f025 0524 	bic.w	r5, r5, #36	; 0x24
  404480:	2300      	movs	r3, #0
  404482:	6922      	ldr	r2, [r4, #16]
  404484:	6063      	str	r3, [r4, #4]
  404486:	b2ad      	uxth	r5, r5
  404488:	6022      	str	r2, [r4, #0]
  40448a:	e7c6      	b.n	40441a <__swsetup_r+0x3e>
  40448c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  404490:	2309      	movs	r3, #9
  404492:	6033      	str	r3, [r6, #0]
  404494:	f04f 30ff 	mov.w	r0, #4294967295
  404498:	81a5      	strh	r5, [r4, #12]
  40449a:	bd70      	pop	{r4, r5, r6, pc}
  40449c:	200004b8 	.word	0x200004b8

004044a0 <register_fini>:
  4044a0:	4b02      	ldr	r3, [pc, #8]	; (4044ac <register_fini+0xc>)
  4044a2:	b113      	cbz	r3, 4044aa <register_fini+0xa>
  4044a4:	4802      	ldr	r0, [pc, #8]	; (4044b0 <register_fini+0x10>)
  4044a6:	f000 b80d 	b.w	4044c4 <atexit>
  4044aa:	4770      	bx	lr
  4044ac:	00000000 	.word	0x00000000
  4044b0:	00404759 	.word	0x00404759

004044b4 <abort>:
  4044b4:	b508      	push	{r3, lr}
  4044b6:	2006      	movs	r0, #6
  4044b8:	f001 fb12 	bl	405ae0 <raise>
  4044bc:	2001      	movs	r0, #1
  4044be:	f001 fd93 	bl	405fe8 <_exit>
  4044c2:	bf00      	nop

004044c4 <atexit>:
  4044c4:	4601      	mov	r1, r0
  4044c6:	2000      	movs	r0, #0
  4044c8:	4602      	mov	r2, r0
  4044ca:	4603      	mov	r3, r0
  4044cc:	f001 bc36 	b.w	405d3c <__register_exitproc>

004044d0 <__sflush_r>:
  4044d0:	898b      	ldrh	r3, [r1, #12]
  4044d2:	b29a      	uxth	r2, r3
  4044d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4044d8:	460d      	mov	r5, r1
  4044da:	0711      	lsls	r1, r2, #28
  4044dc:	4680      	mov	r8, r0
  4044de:	d43c      	bmi.n	40455a <__sflush_r+0x8a>
  4044e0:	686a      	ldr	r2, [r5, #4]
  4044e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4044e6:	2a00      	cmp	r2, #0
  4044e8:	81ab      	strh	r3, [r5, #12]
  4044ea:	dd59      	ble.n	4045a0 <__sflush_r+0xd0>
  4044ec:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4044ee:	2c00      	cmp	r4, #0
  4044f0:	d04b      	beq.n	40458a <__sflush_r+0xba>
  4044f2:	b29b      	uxth	r3, r3
  4044f4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4044f8:	2100      	movs	r1, #0
  4044fa:	b292      	uxth	r2, r2
  4044fc:	f8d8 6000 	ldr.w	r6, [r8]
  404500:	f8c8 1000 	str.w	r1, [r8]
  404504:	2a00      	cmp	r2, #0
  404506:	d04f      	beq.n	4045a8 <__sflush_r+0xd8>
  404508:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40450a:	075f      	lsls	r7, r3, #29
  40450c:	d505      	bpl.n	40451a <__sflush_r+0x4a>
  40450e:	6869      	ldr	r1, [r5, #4]
  404510:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404512:	1a52      	subs	r2, r2, r1
  404514:	b10b      	cbz	r3, 40451a <__sflush_r+0x4a>
  404516:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404518:	1ad2      	subs	r2, r2, r3
  40451a:	4640      	mov	r0, r8
  40451c:	69e9      	ldr	r1, [r5, #28]
  40451e:	2300      	movs	r3, #0
  404520:	47a0      	blx	r4
  404522:	1c44      	adds	r4, r0, #1
  404524:	d04a      	beq.n	4045bc <__sflush_r+0xec>
  404526:	89aa      	ldrh	r2, [r5, #12]
  404528:	692b      	ldr	r3, [r5, #16]
  40452a:	602b      	str	r3, [r5, #0]
  40452c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404530:	b29b      	uxth	r3, r3
  404532:	2200      	movs	r2, #0
  404534:	606a      	str	r2, [r5, #4]
  404536:	04da      	lsls	r2, r3, #19
  404538:	81ab      	strh	r3, [r5, #12]
  40453a:	d44c      	bmi.n	4045d6 <__sflush_r+0x106>
  40453c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40453e:	f8c8 6000 	str.w	r6, [r8]
  404542:	b311      	cbz	r1, 40458a <__sflush_r+0xba>
  404544:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404548:	4299      	cmp	r1, r3
  40454a:	d002      	beq.n	404552 <__sflush_r+0x82>
  40454c:	4640      	mov	r0, r8
  40454e:	f000 f9c7 	bl	4048e0 <_free_r>
  404552:	2000      	movs	r0, #0
  404554:	6328      	str	r0, [r5, #48]	; 0x30
  404556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40455a:	692e      	ldr	r6, [r5, #16]
  40455c:	b1ae      	cbz	r6, 40458a <__sflush_r+0xba>
  40455e:	682c      	ldr	r4, [r5, #0]
  404560:	602e      	str	r6, [r5, #0]
  404562:	0791      	lsls	r1, r2, #30
  404564:	bf0c      	ite	eq
  404566:	696b      	ldreq	r3, [r5, #20]
  404568:	2300      	movne	r3, #0
  40456a:	1ba4      	subs	r4, r4, r6
  40456c:	60ab      	str	r3, [r5, #8]
  40456e:	e00a      	b.n	404586 <__sflush_r+0xb6>
  404570:	4632      	mov	r2, r6
  404572:	4623      	mov	r3, r4
  404574:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  404576:	69e9      	ldr	r1, [r5, #28]
  404578:	4640      	mov	r0, r8
  40457a:	47b8      	blx	r7
  40457c:	2800      	cmp	r0, #0
  40457e:	ebc0 0404 	rsb	r4, r0, r4
  404582:	4406      	add	r6, r0
  404584:	dd04      	ble.n	404590 <__sflush_r+0xc0>
  404586:	2c00      	cmp	r4, #0
  404588:	dcf2      	bgt.n	404570 <__sflush_r+0xa0>
  40458a:	2000      	movs	r0, #0
  40458c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404590:	89ab      	ldrh	r3, [r5, #12]
  404592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404596:	81ab      	strh	r3, [r5, #12]
  404598:	f04f 30ff 	mov.w	r0, #4294967295
  40459c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4045a0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4045a2:	2a00      	cmp	r2, #0
  4045a4:	dca2      	bgt.n	4044ec <__sflush_r+0x1c>
  4045a6:	e7f0      	b.n	40458a <__sflush_r+0xba>
  4045a8:	2301      	movs	r3, #1
  4045aa:	4640      	mov	r0, r8
  4045ac:	69e9      	ldr	r1, [r5, #28]
  4045ae:	47a0      	blx	r4
  4045b0:	1c43      	adds	r3, r0, #1
  4045b2:	4602      	mov	r2, r0
  4045b4:	d01e      	beq.n	4045f4 <__sflush_r+0x124>
  4045b6:	89ab      	ldrh	r3, [r5, #12]
  4045b8:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4045ba:	e7a6      	b.n	40450a <__sflush_r+0x3a>
  4045bc:	f8d8 3000 	ldr.w	r3, [r8]
  4045c0:	b95b      	cbnz	r3, 4045da <__sflush_r+0x10a>
  4045c2:	89a9      	ldrh	r1, [r5, #12]
  4045c4:	606b      	str	r3, [r5, #4]
  4045c6:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
  4045ca:	b29b      	uxth	r3, r3
  4045cc:	692a      	ldr	r2, [r5, #16]
  4045ce:	81ab      	strh	r3, [r5, #12]
  4045d0:	04db      	lsls	r3, r3, #19
  4045d2:	602a      	str	r2, [r5, #0]
  4045d4:	d5b2      	bpl.n	40453c <__sflush_r+0x6c>
  4045d6:	6528      	str	r0, [r5, #80]	; 0x50
  4045d8:	e7b0      	b.n	40453c <__sflush_r+0x6c>
  4045da:	2b1d      	cmp	r3, #29
  4045dc:	d001      	beq.n	4045e2 <__sflush_r+0x112>
  4045de:	2b16      	cmp	r3, #22
  4045e0:	d119      	bne.n	404616 <__sflush_r+0x146>
  4045e2:	89aa      	ldrh	r2, [r5, #12]
  4045e4:	692b      	ldr	r3, [r5, #16]
  4045e6:	602b      	str	r3, [r5, #0]
  4045e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4045ec:	2300      	movs	r3, #0
  4045ee:	81aa      	strh	r2, [r5, #12]
  4045f0:	606b      	str	r3, [r5, #4]
  4045f2:	e7a3      	b.n	40453c <__sflush_r+0x6c>
  4045f4:	f8d8 3000 	ldr.w	r3, [r8]
  4045f8:	2b00      	cmp	r3, #0
  4045fa:	d0dc      	beq.n	4045b6 <__sflush_r+0xe6>
  4045fc:	2b1d      	cmp	r3, #29
  4045fe:	d007      	beq.n	404610 <__sflush_r+0x140>
  404600:	2b16      	cmp	r3, #22
  404602:	d005      	beq.n	404610 <__sflush_r+0x140>
  404604:	89ab      	ldrh	r3, [r5, #12]
  404606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40460a:	81ab      	strh	r3, [r5, #12]
  40460c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404610:	f8c8 6000 	str.w	r6, [r8]
  404614:	e7b9      	b.n	40458a <__sflush_r+0xba>
  404616:	89ab      	ldrh	r3, [r5, #12]
  404618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40461c:	81ab      	strh	r3, [r5, #12]
  40461e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404622:	bf00      	nop

00404624 <_fflush_r>:
  404624:	b510      	push	{r4, lr}
  404626:	4604      	mov	r4, r0
  404628:	b082      	sub	sp, #8
  40462a:	b108      	cbz	r0, 404630 <_fflush_r+0xc>
  40462c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40462e:	b153      	cbz	r3, 404646 <_fflush_r+0x22>
  404630:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  404634:	b908      	cbnz	r0, 40463a <_fflush_r+0x16>
  404636:	b002      	add	sp, #8
  404638:	bd10      	pop	{r4, pc}
  40463a:	4620      	mov	r0, r4
  40463c:	b002      	add	sp, #8
  40463e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404642:	f7ff bf45 	b.w	4044d0 <__sflush_r>
  404646:	9101      	str	r1, [sp, #4]
  404648:	f000 f808 	bl	40465c <__sinit>
  40464c:	9901      	ldr	r1, [sp, #4]
  40464e:	e7ef      	b.n	404630 <_fflush_r+0xc>

00404650 <_cleanup_r>:
  404650:	4901      	ldr	r1, [pc, #4]	; (404658 <_cleanup_r+0x8>)
  404652:	f000 bb9f 	b.w	404d94 <_fwalk>
  404656:	bf00      	nop
  404658:	00405e89 	.word	0x00405e89

0040465c <__sinit>:
  40465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404660:	6b84      	ldr	r4, [r0, #56]	; 0x38
  404662:	b083      	sub	sp, #12
  404664:	4607      	mov	r7, r0
  404666:	2c00      	cmp	r4, #0
  404668:	d165      	bne.n	404736 <__sinit+0xda>
  40466a:	6845      	ldr	r5, [r0, #4]
  40466c:	4833      	ldr	r0, [pc, #204]	; (40473c <__sinit+0xe0>)
  40466e:	63f8      	str	r0, [r7, #60]	; 0x3c
  404670:	2304      	movs	r3, #4
  404672:	2103      	movs	r1, #3
  404674:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  404678:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  40467c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  404680:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  404684:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  404688:	81ab      	strh	r3, [r5, #12]
  40468a:	602c      	str	r4, [r5, #0]
  40468c:	606c      	str	r4, [r5, #4]
  40468e:	60ac      	str	r4, [r5, #8]
  404690:	666c      	str	r4, [r5, #100]	; 0x64
  404692:	81ec      	strh	r4, [r5, #14]
  404694:	612c      	str	r4, [r5, #16]
  404696:	616c      	str	r4, [r5, #20]
  404698:	61ac      	str	r4, [r5, #24]
  40469a:	4621      	mov	r1, r4
  40469c:	2208      	movs	r2, #8
  40469e:	f7fe ffb1 	bl	403604 <memset>
  4046a2:	68be      	ldr	r6, [r7, #8]
  4046a4:	f8df b098 	ldr.w	fp, [pc, #152]	; 404740 <__sinit+0xe4>
  4046a8:	f8df a098 	ldr.w	sl, [pc, #152]	; 404744 <__sinit+0xe8>
  4046ac:	f8df 9098 	ldr.w	r9, [pc, #152]	; 404748 <__sinit+0xec>
  4046b0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40474c <__sinit+0xf0>
  4046b4:	61ed      	str	r5, [r5, #28]
  4046b6:	2301      	movs	r3, #1
  4046b8:	2209      	movs	r2, #9
  4046ba:	f8c5 b020 	str.w	fp, [r5, #32]
  4046be:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4046c2:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4046c6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4046ca:	4621      	mov	r1, r4
  4046cc:	81f3      	strh	r3, [r6, #14]
  4046ce:	81b2      	strh	r2, [r6, #12]
  4046d0:	6034      	str	r4, [r6, #0]
  4046d2:	6074      	str	r4, [r6, #4]
  4046d4:	60b4      	str	r4, [r6, #8]
  4046d6:	6674      	str	r4, [r6, #100]	; 0x64
  4046d8:	6134      	str	r4, [r6, #16]
  4046da:	6174      	str	r4, [r6, #20]
  4046dc:	61b4      	str	r4, [r6, #24]
  4046de:	2208      	movs	r2, #8
  4046e0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4046e4:	9301      	str	r3, [sp, #4]
  4046e6:	f7fe ff8d 	bl	403604 <memset>
  4046ea:	68fd      	ldr	r5, [r7, #12]
  4046ec:	61f6      	str	r6, [r6, #28]
  4046ee:	2012      	movs	r0, #18
  4046f0:	2202      	movs	r2, #2
  4046f2:	f8c6 b020 	str.w	fp, [r6, #32]
  4046f6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4046fa:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4046fe:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  404702:	4621      	mov	r1, r4
  404704:	81a8      	strh	r0, [r5, #12]
  404706:	81ea      	strh	r2, [r5, #14]
  404708:	602c      	str	r4, [r5, #0]
  40470a:	606c      	str	r4, [r5, #4]
  40470c:	60ac      	str	r4, [r5, #8]
  40470e:	666c      	str	r4, [r5, #100]	; 0x64
  404710:	612c      	str	r4, [r5, #16]
  404712:	616c      	str	r4, [r5, #20]
  404714:	61ac      	str	r4, [r5, #24]
  404716:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40471a:	2208      	movs	r2, #8
  40471c:	f7fe ff72 	bl	403604 <memset>
  404720:	9b01      	ldr	r3, [sp, #4]
  404722:	61ed      	str	r5, [r5, #28]
  404724:	f8c5 b020 	str.w	fp, [r5, #32]
  404728:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40472c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  404730:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  404734:	63bb      	str	r3, [r7, #56]	; 0x38
  404736:	b003      	add	sp, #12
  404738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40473c:	00404651 	.word	0x00404651
  404740:	00405b1d 	.word	0x00405b1d
  404744:	00405b41 	.word	0x00405b41
  404748:	00405b79 	.word	0x00405b79
  40474c:	00405b99 	.word	0x00405b99

00404750 <__sfp_lock_acquire>:
  404750:	4770      	bx	lr
  404752:	bf00      	nop

00404754 <__sfp_lock_release>:
  404754:	4770      	bx	lr
  404756:	bf00      	nop

00404758 <__libc_fini_array>:
  404758:	b538      	push	{r3, r4, r5, lr}
  40475a:	4d09      	ldr	r5, [pc, #36]	; (404780 <__libc_fini_array+0x28>)
  40475c:	4c09      	ldr	r4, [pc, #36]	; (404784 <__libc_fini_array+0x2c>)
  40475e:	1b64      	subs	r4, r4, r5
  404760:	10a4      	asrs	r4, r4, #2
  404762:	bf18      	it	ne
  404764:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  404768:	d005      	beq.n	404776 <__libc_fini_array+0x1e>
  40476a:	3c01      	subs	r4, #1
  40476c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404770:	4798      	blx	r3
  404772:	2c00      	cmp	r4, #0
  404774:	d1f9      	bne.n	40476a <__libc_fini_array+0x12>
  404776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40477a:	f002 bca9 	b.w	4070d0 <_fini>
  40477e:	bf00      	nop
  404780:	004070dc 	.word	0x004070dc
  404784:	004070e0 	.word	0x004070e0

00404788 <_fputwc_r>:
  404788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40478c:	8993      	ldrh	r3, [r2, #12]
  40478e:	460f      	mov	r7, r1
  404790:	0499      	lsls	r1, r3, #18
  404792:	b082      	sub	sp, #8
  404794:	4614      	mov	r4, r2
  404796:	4680      	mov	r8, r0
  404798:	d406      	bmi.n	4047a8 <_fputwc_r+0x20>
  40479a:	6e52      	ldr	r2, [r2, #100]	; 0x64
  40479c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4047a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4047a4:	81a3      	strh	r3, [r4, #12]
  4047a6:	6662      	str	r2, [r4, #100]	; 0x64
  4047a8:	f000 fb1e 	bl	404de8 <__locale_mb_cur_max>
  4047ac:	2801      	cmp	r0, #1
  4047ae:	d03d      	beq.n	40482c <_fputwc_r+0xa4>
  4047b0:	463a      	mov	r2, r7
  4047b2:	4640      	mov	r0, r8
  4047b4:	a901      	add	r1, sp, #4
  4047b6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4047ba:	f001 fa75 	bl	405ca8 <_wcrtomb_r>
  4047be:	1c42      	adds	r2, r0, #1
  4047c0:	4606      	mov	r6, r0
  4047c2:	d02c      	beq.n	40481e <_fputwc_r+0x96>
  4047c4:	2800      	cmp	r0, #0
  4047c6:	d039      	beq.n	40483c <_fputwc_r+0xb4>
  4047c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
  4047cc:	2500      	movs	r5, #0
  4047ce:	e009      	b.n	4047e4 <_fputwc_r+0x5c>
  4047d0:	6823      	ldr	r3, [r4, #0]
  4047d2:	7019      	strb	r1, [r3, #0]
  4047d4:	6823      	ldr	r3, [r4, #0]
  4047d6:	3301      	adds	r3, #1
  4047d8:	6023      	str	r3, [r4, #0]
  4047da:	3501      	adds	r5, #1
  4047dc:	42b5      	cmp	r5, r6
  4047de:	d22d      	bcs.n	40483c <_fputwc_r+0xb4>
  4047e0:	ab01      	add	r3, sp, #4
  4047e2:	5ce9      	ldrb	r1, [r5, r3]
  4047e4:	68a3      	ldr	r3, [r4, #8]
  4047e6:	3b01      	subs	r3, #1
  4047e8:	2b00      	cmp	r3, #0
  4047ea:	60a3      	str	r3, [r4, #8]
  4047ec:	daf0      	bge.n	4047d0 <_fputwc_r+0x48>
  4047ee:	69a2      	ldr	r2, [r4, #24]
  4047f0:	4293      	cmp	r3, r2
  4047f2:	db05      	blt.n	404800 <_fputwc_r+0x78>
  4047f4:	6823      	ldr	r3, [r4, #0]
  4047f6:	7019      	strb	r1, [r3, #0]
  4047f8:	6823      	ldr	r3, [r4, #0]
  4047fa:	7819      	ldrb	r1, [r3, #0]
  4047fc:	290a      	cmp	r1, #10
  4047fe:	d1ea      	bne.n	4047d6 <_fputwc_r+0x4e>
  404800:	4640      	mov	r0, r8
  404802:	4622      	mov	r2, r4
  404804:	f001 f9fc 	bl	405c00 <__swbuf_r>
  404808:	f1b0 33ff 	subs.w	r3, r0, #4294967295
  40480c:	4258      	negs	r0, r3
  40480e:	4158      	adcs	r0, r3
  404810:	2800      	cmp	r0, #0
  404812:	d0e2      	beq.n	4047da <_fputwc_r+0x52>
  404814:	f04f 30ff 	mov.w	r0, #4294967295
  404818:	b002      	add	sp, #8
  40481a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40481e:	89a3      	ldrh	r3, [r4, #12]
  404820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404824:	81a3      	strh	r3, [r4, #12]
  404826:	b002      	add	sp, #8
  404828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40482c:	1e7b      	subs	r3, r7, #1
  40482e:	2bfe      	cmp	r3, #254	; 0xfe
  404830:	d8be      	bhi.n	4047b0 <_fputwc_r+0x28>
  404832:	b2f9      	uxtb	r1, r7
  404834:	4606      	mov	r6, r0
  404836:	f88d 1004 	strb.w	r1, [sp, #4]
  40483a:	e7c7      	b.n	4047cc <_fputwc_r+0x44>
  40483c:	4638      	mov	r0, r7
  40483e:	b002      	add	sp, #8
  404840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404844 <_malloc_trim_r>:
  404844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404846:	4d23      	ldr	r5, [pc, #140]	; (4048d4 <_malloc_trim_r+0x90>)
  404848:	460f      	mov	r7, r1
  40484a:	4604      	mov	r4, r0
  40484c:	f000 ff20 	bl	405690 <__malloc_lock>
  404850:	68ab      	ldr	r3, [r5, #8]
  404852:	685e      	ldr	r6, [r3, #4]
  404854:	f026 0603 	bic.w	r6, r6, #3
  404858:	1bf1      	subs	r1, r6, r7
  40485a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40485e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404862:	f021 010f 	bic.w	r1, r1, #15
  404866:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  40486a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  40486e:	db07      	blt.n	404880 <_malloc_trim_r+0x3c>
  404870:	4620      	mov	r0, r4
  404872:	2100      	movs	r1, #0
  404874:	f001 f8f6 	bl	405a64 <_sbrk_r>
  404878:	68ab      	ldr	r3, [r5, #8]
  40487a:	4433      	add	r3, r6
  40487c:	4298      	cmp	r0, r3
  40487e:	d004      	beq.n	40488a <_malloc_trim_r+0x46>
  404880:	4620      	mov	r0, r4
  404882:	f000 ff07 	bl	405694 <__malloc_unlock>
  404886:	2000      	movs	r0, #0
  404888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40488a:	4620      	mov	r0, r4
  40488c:	4279      	negs	r1, r7
  40488e:	f001 f8e9 	bl	405a64 <_sbrk_r>
  404892:	3001      	adds	r0, #1
  404894:	d00d      	beq.n	4048b2 <_malloc_trim_r+0x6e>
  404896:	4b10      	ldr	r3, [pc, #64]	; (4048d8 <_malloc_trim_r+0x94>)
  404898:	68aa      	ldr	r2, [r5, #8]
  40489a:	6819      	ldr	r1, [r3, #0]
  40489c:	1bf6      	subs	r6, r6, r7
  40489e:	f046 0601 	orr.w	r6, r6, #1
  4048a2:	4620      	mov	r0, r4
  4048a4:	1bc9      	subs	r1, r1, r7
  4048a6:	6056      	str	r6, [r2, #4]
  4048a8:	6019      	str	r1, [r3, #0]
  4048aa:	f000 fef3 	bl	405694 <__malloc_unlock>
  4048ae:	2001      	movs	r0, #1
  4048b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4048b2:	4620      	mov	r0, r4
  4048b4:	2100      	movs	r1, #0
  4048b6:	f001 f8d5 	bl	405a64 <_sbrk_r>
  4048ba:	68ab      	ldr	r3, [r5, #8]
  4048bc:	1ac2      	subs	r2, r0, r3
  4048be:	2a0f      	cmp	r2, #15
  4048c0:	ddde      	ble.n	404880 <_malloc_trim_r+0x3c>
  4048c2:	4d06      	ldr	r5, [pc, #24]	; (4048dc <_malloc_trim_r+0x98>)
  4048c4:	4904      	ldr	r1, [pc, #16]	; (4048d8 <_malloc_trim_r+0x94>)
  4048c6:	682d      	ldr	r5, [r5, #0]
  4048c8:	f042 0201 	orr.w	r2, r2, #1
  4048cc:	1b40      	subs	r0, r0, r5
  4048ce:	605a      	str	r2, [r3, #4]
  4048d0:	6008      	str	r0, [r1, #0]
  4048d2:	e7d5      	b.n	404880 <_malloc_trim_r+0x3c>
  4048d4:	200004e0 	.word	0x200004e0
  4048d8:	2000092c 	.word	0x2000092c
  4048dc:	200008ec 	.word	0x200008ec

004048e0 <_free_r>:
  4048e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4048e4:	460d      	mov	r5, r1
  4048e6:	4606      	mov	r6, r0
  4048e8:	2900      	cmp	r1, #0
  4048ea:	d055      	beq.n	404998 <_free_r+0xb8>
  4048ec:	f000 fed0 	bl	405690 <__malloc_lock>
  4048f0:	f855 1c04 	ldr.w	r1, [r5, #-4]
  4048f4:	f8df c174 	ldr.w	ip, [pc, #372]	; 404a6c <_free_r+0x18c>
  4048f8:	f021 0301 	bic.w	r3, r1, #1
  4048fc:	f1a5 0408 	sub.w	r4, r5, #8
  404900:	18e2      	adds	r2, r4, r3
  404902:	f8dc 0008 	ldr.w	r0, [ip, #8]
  404906:	6857      	ldr	r7, [r2, #4]
  404908:	4290      	cmp	r0, r2
  40490a:	f027 0703 	bic.w	r7, r7, #3
  40490e:	d069      	beq.n	4049e4 <_free_r+0x104>
  404910:	f011 0101 	ands.w	r1, r1, #1
  404914:	6057      	str	r7, [r2, #4]
  404916:	d032      	beq.n	40497e <_free_r+0x9e>
  404918:	2100      	movs	r1, #0
  40491a:	19d0      	adds	r0, r2, r7
  40491c:	6840      	ldr	r0, [r0, #4]
  40491e:	07c0      	lsls	r0, r0, #31
  404920:	d406      	bmi.n	404930 <_free_r+0x50>
  404922:	443b      	add	r3, r7
  404924:	6890      	ldr	r0, [r2, #8]
  404926:	2900      	cmp	r1, #0
  404928:	d04e      	beq.n	4049c8 <_free_r+0xe8>
  40492a:	68d2      	ldr	r2, [r2, #12]
  40492c:	60c2      	str	r2, [r0, #12]
  40492e:	6090      	str	r0, [r2, #8]
  404930:	f043 0201 	orr.w	r2, r3, #1
  404934:	6062      	str	r2, [r4, #4]
  404936:	50e3      	str	r3, [r4, r3]
  404938:	b9e1      	cbnz	r1, 404974 <_free_r+0x94>
  40493a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40493e:	d32d      	bcc.n	40499c <_free_r+0xbc>
  404940:	0a5a      	lsrs	r2, r3, #9
  404942:	2a04      	cmp	r2, #4
  404944:	d86a      	bhi.n	404a1c <_free_r+0x13c>
  404946:	0998      	lsrs	r0, r3, #6
  404948:	3038      	adds	r0, #56	; 0x38
  40494a:	0041      	lsls	r1, r0, #1
  40494c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  404950:	4946      	ldr	r1, [pc, #280]	; (404a6c <_free_r+0x18c>)
  404952:	f8dc 2008 	ldr.w	r2, [ip, #8]
  404956:	4562      	cmp	r2, ip
  404958:	d066      	beq.n	404a28 <_free_r+0x148>
  40495a:	6851      	ldr	r1, [r2, #4]
  40495c:	f021 0103 	bic.w	r1, r1, #3
  404960:	428b      	cmp	r3, r1
  404962:	d202      	bcs.n	40496a <_free_r+0x8a>
  404964:	6892      	ldr	r2, [r2, #8]
  404966:	4594      	cmp	ip, r2
  404968:	d1f7      	bne.n	40495a <_free_r+0x7a>
  40496a:	68d3      	ldr	r3, [r2, #12]
  40496c:	60e3      	str	r3, [r4, #12]
  40496e:	60a2      	str	r2, [r4, #8]
  404970:	609c      	str	r4, [r3, #8]
  404972:	60d4      	str	r4, [r2, #12]
  404974:	4630      	mov	r0, r6
  404976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40497a:	f000 be8b 	b.w	405694 <__malloc_unlock>
  40497e:	f855 5c08 	ldr.w	r5, [r5, #-8]
  404982:	1b64      	subs	r4, r4, r5
  404984:	f10c 0808 	add.w	r8, ip, #8
  404988:	68a0      	ldr	r0, [r4, #8]
  40498a:	4540      	cmp	r0, r8
  40498c:	442b      	add	r3, r5
  40498e:	d043      	beq.n	404a18 <_free_r+0x138>
  404990:	68e5      	ldr	r5, [r4, #12]
  404992:	60c5      	str	r5, [r0, #12]
  404994:	60a8      	str	r0, [r5, #8]
  404996:	e7c0      	b.n	40491a <_free_r+0x3a>
  404998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40499c:	08db      	lsrs	r3, r3, #3
  40499e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  4049a2:	2501      	movs	r5, #1
  4049a4:	f8dc 0004 	ldr.w	r0, [ip, #4]
  4049a8:	6891      	ldr	r1, [r2, #8]
  4049aa:	60a1      	str	r1, [r4, #8]
  4049ac:	109b      	asrs	r3, r3, #2
  4049ae:	fa05 f303 	lsl.w	r3, r5, r3
  4049b2:	4318      	orrs	r0, r3
  4049b4:	60e2      	str	r2, [r4, #12]
  4049b6:	f8cc 0004 	str.w	r0, [ip, #4]
  4049ba:	6094      	str	r4, [r2, #8]
  4049bc:	4630      	mov	r0, r6
  4049be:	60cc      	str	r4, [r1, #12]
  4049c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4049c4:	f000 be66 	b.w	405694 <__malloc_unlock>
  4049c8:	4d29      	ldr	r5, [pc, #164]	; (404a70 <_free_r+0x190>)
  4049ca:	42a8      	cmp	r0, r5
  4049cc:	d1ad      	bne.n	40492a <_free_r+0x4a>
  4049ce:	f043 0201 	orr.w	r2, r3, #1
  4049d2:	f8cc 4014 	str.w	r4, [ip, #20]
  4049d6:	f8cc 4010 	str.w	r4, [ip, #16]
  4049da:	60e0      	str	r0, [r4, #12]
  4049dc:	60a0      	str	r0, [r4, #8]
  4049de:	6062      	str	r2, [r4, #4]
  4049e0:	50e3      	str	r3, [r4, r3]
  4049e2:	e7c7      	b.n	404974 <_free_r+0x94>
  4049e4:	441f      	add	r7, r3
  4049e6:	07cb      	lsls	r3, r1, #31
  4049e8:	d407      	bmi.n	4049fa <_free_r+0x11a>
  4049ea:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4049ee:	1ae4      	subs	r4, r4, r3
  4049f0:	441f      	add	r7, r3
  4049f2:	68a2      	ldr	r2, [r4, #8]
  4049f4:	68e3      	ldr	r3, [r4, #12]
  4049f6:	60d3      	str	r3, [r2, #12]
  4049f8:	609a      	str	r2, [r3, #8]
  4049fa:	4b1e      	ldr	r3, [pc, #120]	; (404a74 <_free_r+0x194>)
  4049fc:	681b      	ldr	r3, [r3, #0]
  4049fe:	f047 0201 	orr.w	r2, r7, #1
  404a02:	429f      	cmp	r7, r3
  404a04:	6062      	str	r2, [r4, #4]
  404a06:	f8cc 4008 	str.w	r4, [ip, #8]
  404a0a:	d3b3      	bcc.n	404974 <_free_r+0x94>
  404a0c:	4b1a      	ldr	r3, [pc, #104]	; (404a78 <_free_r+0x198>)
  404a0e:	4630      	mov	r0, r6
  404a10:	6819      	ldr	r1, [r3, #0]
  404a12:	f7ff ff17 	bl	404844 <_malloc_trim_r>
  404a16:	e7ad      	b.n	404974 <_free_r+0x94>
  404a18:	2101      	movs	r1, #1
  404a1a:	e77e      	b.n	40491a <_free_r+0x3a>
  404a1c:	2a14      	cmp	r2, #20
  404a1e:	d80c      	bhi.n	404a3a <_free_r+0x15a>
  404a20:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  404a24:	0041      	lsls	r1, r0, #1
  404a26:	e791      	b.n	40494c <_free_r+0x6c>
  404a28:	684b      	ldr	r3, [r1, #4]
  404a2a:	1080      	asrs	r0, r0, #2
  404a2c:	2501      	movs	r5, #1
  404a2e:	fa05 f000 	lsl.w	r0, r5, r0
  404a32:	4303      	orrs	r3, r0
  404a34:	604b      	str	r3, [r1, #4]
  404a36:	4613      	mov	r3, r2
  404a38:	e798      	b.n	40496c <_free_r+0x8c>
  404a3a:	2a54      	cmp	r2, #84	; 0x54
  404a3c:	d803      	bhi.n	404a46 <_free_r+0x166>
  404a3e:	0b18      	lsrs	r0, r3, #12
  404a40:	306e      	adds	r0, #110	; 0x6e
  404a42:	0041      	lsls	r1, r0, #1
  404a44:	e782      	b.n	40494c <_free_r+0x6c>
  404a46:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404a4a:	d803      	bhi.n	404a54 <_free_r+0x174>
  404a4c:	0bd8      	lsrs	r0, r3, #15
  404a4e:	3077      	adds	r0, #119	; 0x77
  404a50:	0041      	lsls	r1, r0, #1
  404a52:	e77b      	b.n	40494c <_free_r+0x6c>
  404a54:	f240 5154 	movw	r1, #1364	; 0x554
  404a58:	428a      	cmp	r2, r1
  404a5a:	d803      	bhi.n	404a64 <_free_r+0x184>
  404a5c:	0c98      	lsrs	r0, r3, #18
  404a5e:	307c      	adds	r0, #124	; 0x7c
  404a60:	0041      	lsls	r1, r0, #1
  404a62:	e773      	b.n	40494c <_free_r+0x6c>
  404a64:	21fc      	movs	r1, #252	; 0xfc
  404a66:	207e      	movs	r0, #126	; 0x7e
  404a68:	e770      	b.n	40494c <_free_r+0x6c>
  404a6a:	bf00      	nop
  404a6c:	200004e0 	.word	0x200004e0
  404a70:	200004e8 	.word	0x200004e8
  404a74:	200008e8 	.word	0x200008e8
  404a78:	20000928 	.word	0x20000928

00404a7c <__sfvwrite_r>:
  404a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a80:	6893      	ldr	r3, [r2, #8]
  404a82:	b083      	sub	sp, #12
  404a84:	4616      	mov	r6, r2
  404a86:	4681      	mov	r9, r0
  404a88:	460c      	mov	r4, r1
  404a8a:	b32b      	cbz	r3, 404ad8 <__sfvwrite_r+0x5c>
  404a8c:	898b      	ldrh	r3, [r1, #12]
  404a8e:	0719      	lsls	r1, r3, #28
  404a90:	d526      	bpl.n	404ae0 <__sfvwrite_r+0x64>
  404a92:	6922      	ldr	r2, [r4, #16]
  404a94:	b322      	cbz	r2, 404ae0 <__sfvwrite_r+0x64>
  404a96:	f003 0202 	and.w	r2, r3, #2
  404a9a:	b292      	uxth	r2, r2
  404a9c:	6835      	ldr	r5, [r6, #0]
  404a9e:	2a00      	cmp	r2, #0
  404aa0:	d02c      	beq.n	404afc <__sfvwrite_r+0x80>
  404aa2:	f04f 0a00 	mov.w	sl, #0
  404aa6:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 404d90 <__sfvwrite_r+0x314>
  404aaa:	46d0      	mov	r8, sl
  404aac:	45d8      	cmp	r8, fp
  404aae:	bf34      	ite	cc
  404ab0:	4643      	movcc	r3, r8
  404ab2:	465b      	movcs	r3, fp
  404ab4:	4652      	mov	r2, sl
  404ab6:	4648      	mov	r0, r9
  404ab8:	f1b8 0f00 	cmp.w	r8, #0
  404abc:	d04f      	beq.n	404b5e <__sfvwrite_r+0xe2>
  404abe:	69e1      	ldr	r1, [r4, #28]
  404ac0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404ac2:	47b8      	blx	r7
  404ac4:	2800      	cmp	r0, #0
  404ac6:	dd56      	ble.n	404b76 <__sfvwrite_r+0xfa>
  404ac8:	68b3      	ldr	r3, [r6, #8]
  404aca:	1a1b      	subs	r3, r3, r0
  404acc:	4482      	add	sl, r0
  404ace:	ebc0 0808 	rsb	r8, r0, r8
  404ad2:	60b3      	str	r3, [r6, #8]
  404ad4:	2b00      	cmp	r3, #0
  404ad6:	d1e9      	bne.n	404aac <__sfvwrite_r+0x30>
  404ad8:	2000      	movs	r0, #0
  404ada:	b003      	add	sp, #12
  404adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ae0:	4648      	mov	r0, r9
  404ae2:	4621      	mov	r1, r4
  404ae4:	f7ff fc7a 	bl	4043dc <__swsetup_r>
  404ae8:	2800      	cmp	r0, #0
  404aea:	f040 8148 	bne.w	404d7e <__sfvwrite_r+0x302>
  404aee:	89a3      	ldrh	r3, [r4, #12]
  404af0:	6835      	ldr	r5, [r6, #0]
  404af2:	f003 0202 	and.w	r2, r3, #2
  404af6:	b292      	uxth	r2, r2
  404af8:	2a00      	cmp	r2, #0
  404afa:	d1d2      	bne.n	404aa2 <__sfvwrite_r+0x26>
  404afc:	f013 0a01 	ands.w	sl, r3, #1
  404b00:	d142      	bne.n	404b88 <__sfvwrite_r+0x10c>
  404b02:	46d0      	mov	r8, sl
  404b04:	f1b8 0f00 	cmp.w	r8, #0
  404b08:	d023      	beq.n	404b52 <__sfvwrite_r+0xd6>
  404b0a:	059a      	lsls	r2, r3, #22
  404b0c:	68a7      	ldr	r7, [r4, #8]
  404b0e:	d576      	bpl.n	404bfe <__sfvwrite_r+0x182>
  404b10:	45b8      	cmp	r8, r7
  404b12:	f0c0 80a4 	bcc.w	404c5e <__sfvwrite_r+0x1e2>
  404b16:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404b1a:	f040 80b2 	bne.w	404c82 <__sfvwrite_r+0x206>
  404b1e:	6820      	ldr	r0, [r4, #0]
  404b20:	46bb      	mov	fp, r7
  404b22:	4651      	mov	r1, sl
  404b24:	465a      	mov	r2, fp
  404b26:	f000 fd53 	bl	4055d0 <memmove>
  404b2a:	68a2      	ldr	r2, [r4, #8]
  404b2c:	6821      	ldr	r1, [r4, #0]
  404b2e:	1bd2      	subs	r2, r2, r7
  404b30:	eb01 030b 	add.w	r3, r1, fp
  404b34:	60a2      	str	r2, [r4, #8]
  404b36:	6023      	str	r3, [r4, #0]
  404b38:	4642      	mov	r2, r8
  404b3a:	68b3      	ldr	r3, [r6, #8]
  404b3c:	1a9b      	subs	r3, r3, r2
  404b3e:	4492      	add	sl, r2
  404b40:	ebc2 0808 	rsb	r8, r2, r8
  404b44:	60b3      	str	r3, [r6, #8]
  404b46:	2b00      	cmp	r3, #0
  404b48:	d0c6      	beq.n	404ad8 <__sfvwrite_r+0x5c>
  404b4a:	89a3      	ldrh	r3, [r4, #12]
  404b4c:	f1b8 0f00 	cmp.w	r8, #0
  404b50:	d1db      	bne.n	404b0a <__sfvwrite_r+0x8e>
  404b52:	f8d5 a000 	ldr.w	sl, [r5]
  404b56:	f8d5 8004 	ldr.w	r8, [r5, #4]
  404b5a:	3508      	adds	r5, #8
  404b5c:	e7d2      	b.n	404b04 <__sfvwrite_r+0x88>
  404b5e:	f8d5 a000 	ldr.w	sl, [r5]
  404b62:	f8d5 8004 	ldr.w	r8, [r5, #4]
  404b66:	3508      	adds	r5, #8
  404b68:	e7a0      	b.n	404aac <__sfvwrite_r+0x30>
  404b6a:	4648      	mov	r0, r9
  404b6c:	4621      	mov	r1, r4
  404b6e:	f7ff fd59 	bl	404624 <_fflush_r>
  404b72:	2800      	cmp	r0, #0
  404b74:	d059      	beq.n	404c2a <__sfvwrite_r+0x1ae>
  404b76:	89a3      	ldrh	r3, [r4, #12]
  404b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b7c:	f04f 30ff 	mov.w	r0, #4294967295
  404b80:	81a3      	strh	r3, [r4, #12]
  404b82:	b003      	add	sp, #12
  404b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b88:	4692      	mov	sl, r2
  404b8a:	9201      	str	r2, [sp, #4]
  404b8c:	4693      	mov	fp, r2
  404b8e:	4690      	mov	r8, r2
  404b90:	f1b8 0f00 	cmp.w	r8, #0
  404b94:	d02b      	beq.n	404bee <__sfvwrite_r+0x172>
  404b96:	9f01      	ldr	r7, [sp, #4]
  404b98:	2f00      	cmp	r7, #0
  404b9a:	d064      	beq.n	404c66 <__sfvwrite_r+0x1ea>
  404b9c:	6820      	ldr	r0, [r4, #0]
  404b9e:	6921      	ldr	r1, [r4, #16]
  404ba0:	f8d4 c008 	ldr.w	ip, [r4, #8]
  404ba4:	6962      	ldr	r2, [r4, #20]
  404ba6:	45c2      	cmp	sl, r8
  404ba8:	bf34      	ite	cc
  404baa:	4653      	movcc	r3, sl
  404bac:	4643      	movcs	r3, r8
  404bae:	4288      	cmp	r0, r1
  404bb0:	461f      	mov	r7, r3
  404bb2:	d903      	bls.n	404bbc <__sfvwrite_r+0x140>
  404bb4:	4494      	add	ip, r2
  404bb6:	4563      	cmp	r3, ip
  404bb8:	f300 80ae 	bgt.w	404d18 <__sfvwrite_r+0x29c>
  404bbc:	4293      	cmp	r3, r2
  404bbe:	db36      	blt.n	404c2e <__sfvwrite_r+0x1b2>
  404bc0:	4613      	mov	r3, r2
  404bc2:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404bc4:	69e1      	ldr	r1, [r4, #28]
  404bc6:	4648      	mov	r0, r9
  404bc8:	465a      	mov	r2, fp
  404bca:	47b8      	blx	r7
  404bcc:	1e07      	subs	r7, r0, #0
  404bce:	ddd2      	ble.n	404b76 <__sfvwrite_r+0xfa>
  404bd0:	ebba 0a07 	subs.w	sl, sl, r7
  404bd4:	d03a      	beq.n	404c4c <__sfvwrite_r+0x1d0>
  404bd6:	68b3      	ldr	r3, [r6, #8]
  404bd8:	1bdb      	subs	r3, r3, r7
  404bda:	44bb      	add	fp, r7
  404bdc:	ebc7 0808 	rsb	r8, r7, r8
  404be0:	60b3      	str	r3, [r6, #8]
  404be2:	2b00      	cmp	r3, #0
  404be4:	f43f af78 	beq.w	404ad8 <__sfvwrite_r+0x5c>
  404be8:	f1b8 0f00 	cmp.w	r8, #0
  404bec:	d1d3      	bne.n	404b96 <__sfvwrite_r+0x11a>
  404bee:	2700      	movs	r7, #0
  404bf0:	f8d5 b000 	ldr.w	fp, [r5]
  404bf4:	f8d5 8004 	ldr.w	r8, [r5, #4]
  404bf8:	9701      	str	r7, [sp, #4]
  404bfa:	3508      	adds	r5, #8
  404bfc:	e7c8      	b.n	404b90 <__sfvwrite_r+0x114>
  404bfe:	6820      	ldr	r0, [r4, #0]
  404c00:	6923      	ldr	r3, [r4, #16]
  404c02:	4298      	cmp	r0, r3
  404c04:	d802      	bhi.n	404c0c <__sfvwrite_r+0x190>
  404c06:	6963      	ldr	r3, [r4, #20]
  404c08:	4598      	cmp	r8, r3
  404c0a:	d272      	bcs.n	404cf2 <__sfvwrite_r+0x276>
  404c0c:	45b8      	cmp	r8, r7
  404c0e:	bf38      	it	cc
  404c10:	4647      	movcc	r7, r8
  404c12:	463a      	mov	r2, r7
  404c14:	4651      	mov	r1, sl
  404c16:	f000 fcdb 	bl	4055d0 <memmove>
  404c1a:	68a3      	ldr	r3, [r4, #8]
  404c1c:	6822      	ldr	r2, [r4, #0]
  404c1e:	1bdb      	subs	r3, r3, r7
  404c20:	443a      	add	r2, r7
  404c22:	60a3      	str	r3, [r4, #8]
  404c24:	6022      	str	r2, [r4, #0]
  404c26:	2b00      	cmp	r3, #0
  404c28:	d09f      	beq.n	404b6a <__sfvwrite_r+0xee>
  404c2a:	463a      	mov	r2, r7
  404c2c:	e785      	b.n	404b3a <__sfvwrite_r+0xbe>
  404c2e:	461a      	mov	r2, r3
  404c30:	4659      	mov	r1, fp
  404c32:	9300      	str	r3, [sp, #0]
  404c34:	f000 fccc 	bl	4055d0 <memmove>
  404c38:	9b00      	ldr	r3, [sp, #0]
  404c3a:	68a1      	ldr	r1, [r4, #8]
  404c3c:	6822      	ldr	r2, [r4, #0]
  404c3e:	1ac9      	subs	r1, r1, r3
  404c40:	ebba 0a07 	subs.w	sl, sl, r7
  404c44:	4413      	add	r3, r2
  404c46:	60a1      	str	r1, [r4, #8]
  404c48:	6023      	str	r3, [r4, #0]
  404c4a:	d1c4      	bne.n	404bd6 <__sfvwrite_r+0x15a>
  404c4c:	4648      	mov	r0, r9
  404c4e:	4621      	mov	r1, r4
  404c50:	f7ff fce8 	bl	404624 <_fflush_r>
  404c54:	2800      	cmp	r0, #0
  404c56:	d18e      	bne.n	404b76 <__sfvwrite_r+0xfa>
  404c58:	f8cd a004 	str.w	sl, [sp, #4]
  404c5c:	e7bb      	b.n	404bd6 <__sfvwrite_r+0x15a>
  404c5e:	6820      	ldr	r0, [r4, #0]
  404c60:	4647      	mov	r7, r8
  404c62:	46c3      	mov	fp, r8
  404c64:	e75d      	b.n	404b22 <__sfvwrite_r+0xa6>
  404c66:	4658      	mov	r0, fp
  404c68:	210a      	movs	r1, #10
  404c6a:	4642      	mov	r2, r8
  404c6c:	f000 fbce 	bl	40540c <memchr>
  404c70:	2800      	cmp	r0, #0
  404c72:	d07f      	beq.n	404d74 <__sfvwrite_r+0x2f8>
  404c74:	f100 0a01 	add.w	sl, r0, #1
  404c78:	2701      	movs	r7, #1
  404c7a:	ebcb 0a0a 	rsb	sl, fp, sl
  404c7e:	9701      	str	r7, [sp, #4]
  404c80:	e78c      	b.n	404b9c <__sfvwrite_r+0x120>
  404c82:	6822      	ldr	r2, [r4, #0]
  404c84:	6921      	ldr	r1, [r4, #16]
  404c86:	6967      	ldr	r7, [r4, #20]
  404c88:	ebc1 0c02 	rsb	ip, r1, r2
  404c8c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  404c90:	f10c 0201 	add.w	r2, ip, #1
  404c94:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  404c98:	4442      	add	r2, r8
  404c9a:	107f      	asrs	r7, r7, #1
  404c9c:	4297      	cmp	r7, r2
  404c9e:	bf34      	ite	cc
  404ca0:	4617      	movcc	r7, r2
  404ca2:	463a      	movcs	r2, r7
  404ca4:	055b      	lsls	r3, r3, #21
  404ca6:	d54f      	bpl.n	404d48 <__sfvwrite_r+0x2cc>
  404ca8:	4611      	mov	r1, r2
  404caa:	4648      	mov	r0, r9
  404cac:	f8cd c000 	str.w	ip, [sp]
  404cb0:	f000 f910 	bl	404ed4 <_malloc_r>
  404cb4:	f8dd c000 	ldr.w	ip, [sp]
  404cb8:	4683      	mov	fp, r0
  404cba:	2800      	cmp	r0, #0
  404cbc:	d062      	beq.n	404d84 <__sfvwrite_r+0x308>
  404cbe:	4662      	mov	r2, ip
  404cc0:	6921      	ldr	r1, [r4, #16]
  404cc2:	f8cd c000 	str.w	ip, [sp]
  404cc6:	f000 fbe9 	bl	40549c <memcpy>
  404cca:	89a2      	ldrh	r2, [r4, #12]
  404ccc:	f8dd c000 	ldr.w	ip, [sp]
  404cd0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  404cd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  404cd8:	81a2      	strh	r2, [r4, #12]
  404cda:	eb0b 000c 	add.w	r0, fp, ip
  404cde:	ebcc 0207 	rsb	r2, ip, r7
  404ce2:	f8c4 b010 	str.w	fp, [r4, #16]
  404ce6:	6167      	str	r7, [r4, #20]
  404ce8:	6020      	str	r0, [r4, #0]
  404cea:	60a2      	str	r2, [r4, #8]
  404cec:	4647      	mov	r7, r8
  404cee:	46c3      	mov	fp, r8
  404cf0:	e717      	b.n	404b22 <__sfvwrite_r+0xa6>
  404cf2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  404cf6:	4590      	cmp	r8, r2
  404cf8:	bf38      	it	cc
  404cfa:	4642      	movcc	r2, r8
  404cfc:	fb92 f2f3 	sdiv	r2, r2, r3
  404d00:	fb02 f303 	mul.w	r3, r2, r3
  404d04:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404d06:	69e1      	ldr	r1, [r4, #28]
  404d08:	4648      	mov	r0, r9
  404d0a:	4652      	mov	r2, sl
  404d0c:	47b8      	blx	r7
  404d0e:	2800      	cmp	r0, #0
  404d10:	f77f af31 	ble.w	404b76 <__sfvwrite_r+0xfa>
  404d14:	4602      	mov	r2, r0
  404d16:	e710      	b.n	404b3a <__sfvwrite_r+0xbe>
  404d18:	4662      	mov	r2, ip
  404d1a:	4659      	mov	r1, fp
  404d1c:	f8cd c000 	str.w	ip, [sp]
  404d20:	f000 fc56 	bl	4055d0 <memmove>
  404d24:	f8dd c000 	ldr.w	ip, [sp]
  404d28:	6823      	ldr	r3, [r4, #0]
  404d2a:	4463      	add	r3, ip
  404d2c:	6023      	str	r3, [r4, #0]
  404d2e:	4648      	mov	r0, r9
  404d30:	4621      	mov	r1, r4
  404d32:	f8cd c000 	str.w	ip, [sp]
  404d36:	f7ff fc75 	bl	404624 <_fflush_r>
  404d3a:	f8dd c000 	ldr.w	ip, [sp]
  404d3e:	2800      	cmp	r0, #0
  404d40:	f47f af19 	bne.w	404b76 <__sfvwrite_r+0xfa>
  404d44:	4667      	mov	r7, ip
  404d46:	e743      	b.n	404bd0 <__sfvwrite_r+0x154>
  404d48:	4648      	mov	r0, r9
  404d4a:	f8cd c000 	str.w	ip, [sp]
  404d4e:	f000 fca3 	bl	405698 <_realloc_r>
  404d52:	f8dd c000 	ldr.w	ip, [sp]
  404d56:	4683      	mov	fp, r0
  404d58:	2800      	cmp	r0, #0
  404d5a:	d1be      	bne.n	404cda <__sfvwrite_r+0x25e>
  404d5c:	4648      	mov	r0, r9
  404d5e:	6921      	ldr	r1, [r4, #16]
  404d60:	f7ff fdbe 	bl	4048e0 <_free_r>
  404d64:	89a3      	ldrh	r3, [r4, #12]
  404d66:	220c      	movs	r2, #12
  404d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404d6c:	b29b      	uxth	r3, r3
  404d6e:	f8c9 2000 	str.w	r2, [r9]
  404d72:	e701      	b.n	404b78 <__sfvwrite_r+0xfc>
  404d74:	2701      	movs	r7, #1
  404d76:	f108 0a01 	add.w	sl, r8, #1
  404d7a:	9701      	str	r7, [sp, #4]
  404d7c:	e70e      	b.n	404b9c <__sfvwrite_r+0x120>
  404d7e:	f04f 30ff 	mov.w	r0, #4294967295
  404d82:	e6aa      	b.n	404ada <__sfvwrite_r+0x5e>
  404d84:	230c      	movs	r3, #12
  404d86:	f8c9 3000 	str.w	r3, [r9]
  404d8a:	89a3      	ldrh	r3, [r4, #12]
  404d8c:	e6f4      	b.n	404b78 <__sfvwrite_r+0xfc>
  404d8e:	bf00      	nop
  404d90:	7ffffc00 	.word	0x7ffffc00

00404d94 <_fwalk>:
  404d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d98:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404d9c:	4688      	mov	r8, r1
  404d9e:	d01a      	beq.n	404dd6 <_fwalk+0x42>
  404da0:	2600      	movs	r6, #0
  404da2:	687d      	ldr	r5, [r7, #4]
  404da4:	68bc      	ldr	r4, [r7, #8]
  404da6:	3d01      	subs	r5, #1
  404da8:	d40f      	bmi.n	404dca <_fwalk+0x36>
  404daa:	89a3      	ldrh	r3, [r4, #12]
  404dac:	2b01      	cmp	r3, #1
  404dae:	f105 35ff 	add.w	r5, r5, #4294967295
  404db2:	d906      	bls.n	404dc2 <_fwalk+0x2e>
  404db4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404db8:	3301      	adds	r3, #1
  404dba:	4620      	mov	r0, r4
  404dbc:	d001      	beq.n	404dc2 <_fwalk+0x2e>
  404dbe:	47c0      	blx	r8
  404dc0:	4306      	orrs	r6, r0
  404dc2:	1c6b      	adds	r3, r5, #1
  404dc4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404dc8:	d1ef      	bne.n	404daa <_fwalk+0x16>
  404dca:	683f      	ldr	r7, [r7, #0]
  404dcc:	2f00      	cmp	r7, #0
  404dce:	d1e8      	bne.n	404da2 <_fwalk+0xe>
  404dd0:	4630      	mov	r0, r6
  404dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404dd6:	463e      	mov	r6, r7
  404dd8:	4630      	mov	r0, r6
  404dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404dde:	bf00      	nop

00404de0 <__locale_charset>:
  404de0:	4800      	ldr	r0, [pc, #0]	; (404de4 <__locale_charset+0x4>)
  404de2:	4770      	bx	lr
  404de4:	200004bc 	.word	0x200004bc

00404de8 <__locale_mb_cur_max>:
  404de8:	4b01      	ldr	r3, [pc, #4]	; (404df0 <__locale_mb_cur_max+0x8>)
  404dea:	6818      	ldr	r0, [r3, #0]
  404dec:	4770      	bx	lr
  404dee:	bf00      	nop
  404df0:	200004dc 	.word	0x200004dc

00404df4 <__smakebuf_r>:
  404df4:	b5f0      	push	{r4, r5, r6, r7, lr}
  404df6:	898b      	ldrh	r3, [r1, #12]
  404df8:	b29a      	uxth	r2, r3
  404dfa:	0796      	lsls	r6, r2, #30
  404dfc:	b091      	sub	sp, #68	; 0x44
  404dfe:	460c      	mov	r4, r1
  404e00:	4605      	mov	r5, r0
  404e02:	d437      	bmi.n	404e74 <__smakebuf_r+0x80>
  404e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404e08:	2900      	cmp	r1, #0
  404e0a:	db17      	blt.n	404e3c <__smakebuf_r+0x48>
  404e0c:	aa01      	add	r2, sp, #4
  404e0e:	f001 f843 	bl	405e98 <_fstat_r>
  404e12:	2800      	cmp	r0, #0
  404e14:	db10      	blt.n	404e38 <__smakebuf_r+0x44>
  404e16:	9b02      	ldr	r3, [sp, #8]
  404e18:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  404e1c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
  404e20:	424f      	negs	r7, r1
  404e22:	414f      	adcs	r7, r1
  404e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  404e28:	d02c      	beq.n	404e84 <__smakebuf_r+0x90>
  404e2a:	89a3      	ldrh	r3, [r4, #12]
  404e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404e30:	81a3      	strh	r3, [r4, #12]
  404e32:	f44f 6680 	mov.w	r6, #1024	; 0x400
  404e36:	e00b      	b.n	404e50 <__smakebuf_r+0x5c>
  404e38:	89a3      	ldrh	r3, [r4, #12]
  404e3a:	b29a      	uxth	r2, r3
  404e3c:	f012 0f80 	tst.w	r2, #128	; 0x80
  404e40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404e44:	81a3      	strh	r3, [r4, #12]
  404e46:	bf14      	ite	ne
  404e48:	2640      	movne	r6, #64	; 0x40
  404e4a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  404e4e:	2700      	movs	r7, #0
  404e50:	4628      	mov	r0, r5
  404e52:	4631      	mov	r1, r6
  404e54:	f000 f83e 	bl	404ed4 <_malloc_r>
  404e58:	89a3      	ldrh	r3, [r4, #12]
  404e5a:	2800      	cmp	r0, #0
  404e5c:	d029      	beq.n	404eb2 <__smakebuf_r+0xbe>
  404e5e:	4a1b      	ldr	r2, [pc, #108]	; (404ecc <__smakebuf_r+0xd8>)
  404e60:	63ea      	str	r2, [r5, #60]	; 0x3c
  404e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404e66:	81a3      	strh	r3, [r4, #12]
  404e68:	6020      	str	r0, [r4, #0]
  404e6a:	6120      	str	r0, [r4, #16]
  404e6c:	6166      	str	r6, [r4, #20]
  404e6e:	b9a7      	cbnz	r7, 404e9a <__smakebuf_r+0xa6>
  404e70:	b011      	add	sp, #68	; 0x44
  404e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404e74:	f101 0343 	add.w	r3, r1, #67	; 0x43
  404e78:	2201      	movs	r2, #1
  404e7a:	600b      	str	r3, [r1, #0]
  404e7c:	610b      	str	r3, [r1, #16]
  404e7e:	614a      	str	r2, [r1, #20]
  404e80:	b011      	add	sp, #68	; 0x44
  404e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404e84:	4a12      	ldr	r2, [pc, #72]	; (404ed0 <__smakebuf_r+0xdc>)
  404e86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  404e88:	4293      	cmp	r3, r2
  404e8a:	d1ce      	bne.n	404e2a <__smakebuf_r+0x36>
  404e8c:	89a3      	ldrh	r3, [r4, #12]
  404e8e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  404e92:	4333      	orrs	r3, r6
  404e94:	81a3      	strh	r3, [r4, #12]
  404e96:	64e6      	str	r6, [r4, #76]	; 0x4c
  404e98:	e7da      	b.n	404e50 <__smakebuf_r+0x5c>
  404e9a:	4628      	mov	r0, r5
  404e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404ea0:	f001 f80e 	bl	405ec0 <_isatty_r>
  404ea4:	2800      	cmp	r0, #0
  404ea6:	d0e3      	beq.n	404e70 <__smakebuf_r+0x7c>
  404ea8:	89a3      	ldrh	r3, [r4, #12]
  404eaa:	f043 0301 	orr.w	r3, r3, #1
  404eae:	81a3      	strh	r3, [r4, #12]
  404eb0:	e7de      	b.n	404e70 <__smakebuf_r+0x7c>
  404eb2:	059a      	lsls	r2, r3, #22
  404eb4:	d4dc      	bmi.n	404e70 <__smakebuf_r+0x7c>
  404eb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404eba:	f043 0302 	orr.w	r3, r3, #2
  404ebe:	2101      	movs	r1, #1
  404ec0:	81a3      	strh	r3, [r4, #12]
  404ec2:	6022      	str	r2, [r4, #0]
  404ec4:	6122      	str	r2, [r4, #16]
  404ec6:	6161      	str	r1, [r4, #20]
  404ec8:	e7d2      	b.n	404e70 <__smakebuf_r+0x7c>
  404eca:	bf00      	nop
  404ecc:	00404651 	.word	0x00404651
  404ed0:	00405b79 	.word	0x00405b79

00404ed4 <_malloc_r>:
  404ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ed8:	f101 050b 	add.w	r5, r1, #11
  404edc:	2d16      	cmp	r5, #22
  404ede:	b083      	sub	sp, #12
  404ee0:	4606      	mov	r6, r0
  404ee2:	d927      	bls.n	404f34 <_malloc_r+0x60>
  404ee4:	f035 0507 	bics.w	r5, r5, #7
  404ee8:	d427      	bmi.n	404f3a <_malloc_r+0x66>
  404eea:	42a9      	cmp	r1, r5
  404eec:	d825      	bhi.n	404f3a <_malloc_r+0x66>
  404eee:	4630      	mov	r0, r6
  404ef0:	f000 fbce 	bl	405690 <__malloc_lock>
  404ef4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  404ef8:	d226      	bcs.n	404f48 <_malloc_r+0x74>
  404efa:	4fc1      	ldr	r7, [pc, #772]	; (405200 <_malloc_r+0x32c>)
  404efc:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  404f00:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  404f04:	68dc      	ldr	r4, [r3, #12]
  404f06:	429c      	cmp	r4, r3
  404f08:	f000 81d2 	beq.w	4052b0 <_malloc_r+0x3dc>
  404f0c:	6863      	ldr	r3, [r4, #4]
  404f0e:	68e2      	ldr	r2, [r4, #12]
  404f10:	68a1      	ldr	r1, [r4, #8]
  404f12:	f023 0303 	bic.w	r3, r3, #3
  404f16:	4423      	add	r3, r4
  404f18:	4630      	mov	r0, r6
  404f1a:	685d      	ldr	r5, [r3, #4]
  404f1c:	60ca      	str	r2, [r1, #12]
  404f1e:	f045 0501 	orr.w	r5, r5, #1
  404f22:	6091      	str	r1, [r2, #8]
  404f24:	605d      	str	r5, [r3, #4]
  404f26:	f000 fbb5 	bl	405694 <__malloc_unlock>
  404f2a:	3408      	adds	r4, #8
  404f2c:	4620      	mov	r0, r4
  404f2e:	b003      	add	sp, #12
  404f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f34:	2510      	movs	r5, #16
  404f36:	42a9      	cmp	r1, r5
  404f38:	d9d9      	bls.n	404eee <_malloc_r+0x1a>
  404f3a:	2400      	movs	r4, #0
  404f3c:	230c      	movs	r3, #12
  404f3e:	4620      	mov	r0, r4
  404f40:	6033      	str	r3, [r6, #0]
  404f42:	b003      	add	sp, #12
  404f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f48:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  404f4c:	f000 808a 	beq.w	405064 <_malloc_r+0x190>
  404f50:	f1bc 0f04 	cmp.w	ip, #4
  404f54:	f200 8160 	bhi.w	405218 <_malloc_r+0x344>
  404f58:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  404f5c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  404f60:	ea4f 014c 	mov.w	r1, ip, lsl #1
  404f64:	4fa6      	ldr	r7, [pc, #664]	; (405200 <_malloc_r+0x32c>)
  404f66:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  404f6a:	68cc      	ldr	r4, [r1, #12]
  404f6c:	42a1      	cmp	r1, r4
  404f6e:	d105      	bne.n	404f7c <_malloc_r+0xa8>
  404f70:	e00c      	b.n	404f8c <_malloc_r+0xb8>
  404f72:	2b00      	cmp	r3, #0
  404f74:	da7a      	bge.n	40506c <_malloc_r+0x198>
  404f76:	68e4      	ldr	r4, [r4, #12]
  404f78:	42a1      	cmp	r1, r4
  404f7a:	d007      	beq.n	404f8c <_malloc_r+0xb8>
  404f7c:	6862      	ldr	r2, [r4, #4]
  404f7e:	f022 0203 	bic.w	r2, r2, #3
  404f82:	1b53      	subs	r3, r2, r5
  404f84:	2b0f      	cmp	r3, #15
  404f86:	ddf4      	ble.n	404f72 <_malloc_r+0x9e>
  404f88:	f10c 3cff 	add.w	ip, ip, #4294967295
  404f8c:	f10c 0c01 	add.w	ip, ip, #1
  404f90:	4b9b      	ldr	r3, [pc, #620]	; (405200 <_malloc_r+0x32c>)
  404f92:	693c      	ldr	r4, [r7, #16]
  404f94:	f103 0e08 	add.w	lr, r3, #8
  404f98:	4574      	cmp	r4, lr
  404f9a:	f000 817e 	beq.w	40529a <_malloc_r+0x3c6>
  404f9e:	6861      	ldr	r1, [r4, #4]
  404fa0:	f021 0103 	bic.w	r1, r1, #3
  404fa4:	1b4a      	subs	r2, r1, r5
  404fa6:	2a0f      	cmp	r2, #15
  404fa8:	f300 8164 	bgt.w	405274 <_malloc_r+0x3a0>
  404fac:	2a00      	cmp	r2, #0
  404fae:	f8c3 e014 	str.w	lr, [r3, #20]
  404fb2:	f8c3 e010 	str.w	lr, [r3, #16]
  404fb6:	da6a      	bge.n	40508e <_malloc_r+0x1ba>
  404fb8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  404fbc:	f080 813a 	bcs.w	405234 <_malloc_r+0x360>
  404fc0:	08c9      	lsrs	r1, r1, #3
  404fc2:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  404fc6:	ea4f 08a1 	mov.w	r8, r1, asr #2
  404fca:	685a      	ldr	r2, [r3, #4]
  404fcc:	6881      	ldr	r1, [r0, #8]
  404fce:	60a1      	str	r1, [r4, #8]
  404fd0:	f04f 0901 	mov.w	r9, #1
  404fd4:	fa09 f808 	lsl.w	r8, r9, r8
  404fd8:	ea48 0202 	orr.w	r2, r8, r2
  404fdc:	60e0      	str	r0, [r4, #12]
  404fde:	605a      	str	r2, [r3, #4]
  404fe0:	6084      	str	r4, [r0, #8]
  404fe2:	60cc      	str	r4, [r1, #12]
  404fe4:	ea4f 03ac 	mov.w	r3, ip, asr #2
  404fe8:	2001      	movs	r0, #1
  404fea:	4098      	lsls	r0, r3
  404fec:	4290      	cmp	r0, r2
  404fee:	d85b      	bhi.n	4050a8 <_malloc_r+0x1d4>
  404ff0:	4202      	tst	r2, r0
  404ff2:	d106      	bne.n	405002 <_malloc_r+0x12e>
  404ff4:	f02c 0c03 	bic.w	ip, ip, #3
  404ff8:	0040      	lsls	r0, r0, #1
  404ffa:	4202      	tst	r2, r0
  404ffc:	f10c 0c04 	add.w	ip, ip, #4
  405000:	d0fa      	beq.n	404ff8 <_malloc_r+0x124>
  405002:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  405006:	4644      	mov	r4, r8
  405008:	46e1      	mov	r9, ip
  40500a:	68e3      	ldr	r3, [r4, #12]
  40500c:	429c      	cmp	r4, r3
  40500e:	d107      	bne.n	405020 <_malloc_r+0x14c>
  405010:	e145      	b.n	40529e <_malloc_r+0x3ca>
  405012:	2a00      	cmp	r2, #0
  405014:	f280 8156 	bge.w	4052c4 <_malloc_r+0x3f0>
  405018:	68db      	ldr	r3, [r3, #12]
  40501a:	429c      	cmp	r4, r3
  40501c:	f000 813f 	beq.w	40529e <_malloc_r+0x3ca>
  405020:	6859      	ldr	r1, [r3, #4]
  405022:	f021 0103 	bic.w	r1, r1, #3
  405026:	1b4a      	subs	r2, r1, r5
  405028:	2a0f      	cmp	r2, #15
  40502a:	ddf2      	ble.n	405012 <_malloc_r+0x13e>
  40502c:	461c      	mov	r4, r3
  40502e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405032:	f854 8f08 	ldr.w	r8, [r4, #8]!
  405036:	1959      	adds	r1, r3, r5
  405038:	f045 0901 	orr.w	r9, r5, #1
  40503c:	f042 0501 	orr.w	r5, r2, #1
  405040:	f8c3 9004 	str.w	r9, [r3, #4]
  405044:	4630      	mov	r0, r6
  405046:	f8c8 c00c 	str.w	ip, [r8, #12]
  40504a:	f8cc 8008 	str.w	r8, [ip, #8]
  40504e:	6179      	str	r1, [r7, #20]
  405050:	6139      	str	r1, [r7, #16]
  405052:	f8c1 e00c 	str.w	lr, [r1, #12]
  405056:	f8c1 e008 	str.w	lr, [r1, #8]
  40505a:	604d      	str	r5, [r1, #4]
  40505c:	508a      	str	r2, [r1, r2]
  40505e:	f000 fb19 	bl	405694 <__malloc_unlock>
  405062:	e763      	b.n	404f2c <_malloc_r+0x58>
  405064:	217e      	movs	r1, #126	; 0x7e
  405066:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40506a:	e77b      	b.n	404f64 <_malloc_r+0x90>
  40506c:	4422      	add	r2, r4
  40506e:	68e3      	ldr	r3, [r4, #12]
  405070:	6850      	ldr	r0, [r2, #4]
  405072:	68a1      	ldr	r1, [r4, #8]
  405074:	f040 0501 	orr.w	r5, r0, #1
  405078:	60cb      	str	r3, [r1, #12]
  40507a:	4630      	mov	r0, r6
  40507c:	6099      	str	r1, [r3, #8]
  40507e:	6055      	str	r5, [r2, #4]
  405080:	f000 fb08 	bl	405694 <__malloc_unlock>
  405084:	3408      	adds	r4, #8
  405086:	4620      	mov	r0, r4
  405088:	b003      	add	sp, #12
  40508a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40508e:	4421      	add	r1, r4
  405090:	4630      	mov	r0, r6
  405092:	684b      	ldr	r3, [r1, #4]
  405094:	f043 0301 	orr.w	r3, r3, #1
  405098:	604b      	str	r3, [r1, #4]
  40509a:	f000 fafb 	bl	405694 <__malloc_unlock>
  40509e:	3408      	adds	r4, #8
  4050a0:	4620      	mov	r0, r4
  4050a2:	b003      	add	sp, #12
  4050a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050a8:	68bc      	ldr	r4, [r7, #8]
  4050aa:	6863      	ldr	r3, [r4, #4]
  4050ac:	f023 0903 	bic.w	r9, r3, #3
  4050b0:	45a9      	cmp	r9, r5
  4050b2:	d304      	bcc.n	4050be <_malloc_r+0x1ea>
  4050b4:	ebc5 0309 	rsb	r3, r5, r9
  4050b8:	2b0f      	cmp	r3, #15
  4050ba:	f300 8091 	bgt.w	4051e0 <_malloc_r+0x30c>
  4050be:	4b51      	ldr	r3, [pc, #324]	; (405204 <_malloc_r+0x330>)
  4050c0:	4a51      	ldr	r2, [pc, #324]	; (405208 <_malloc_r+0x334>)
  4050c2:	6819      	ldr	r1, [r3, #0]
  4050c4:	6813      	ldr	r3, [r2, #0]
  4050c6:	3301      	adds	r3, #1
  4050c8:	eb05 0a01 	add.w	sl, r5, r1
  4050cc:	eb04 0b09 	add.w	fp, r4, r9
  4050d0:	f000 8161 	beq.w	405396 <_malloc_r+0x4c2>
  4050d4:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  4050d8:	f10a 0a0f 	add.w	sl, sl, #15
  4050dc:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  4050e0:	f02a 0a0f 	bic.w	sl, sl, #15
  4050e4:	4630      	mov	r0, r6
  4050e6:	4651      	mov	r1, sl
  4050e8:	9201      	str	r2, [sp, #4]
  4050ea:	f000 fcbb 	bl	405a64 <_sbrk_r>
  4050ee:	f1b0 3fff 	cmp.w	r0, #4294967295
  4050f2:	4680      	mov	r8, r0
  4050f4:	9a01      	ldr	r2, [sp, #4]
  4050f6:	f000 8100 	beq.w	4052fa <_malloc_r+0x426>
  4050fa:	4583      	cmp	fp, r0
  4050fc:	f200 80fa 	bhi.w	4052f4 <_malloc_r+0x420>
  405100:	f8df c110 	ldr.w	ip, [pc, #272]	; 405214 <_malloc_r+0x340>
  405104:	f8dc 3000 	ldr.w	r3, [ip]
  405108:	45c3      	cmp	fp, r8
  40510a:	4453      	add	r3, sl
  40510c:	f8cc 3000 	str.w	r3, [ip]
  405110:	f000 814a 	beq.w	4053a8 <_malloc_r+0x4d4>
  405114:	6812      	ldr	r2, [r2, #0]
  405116:	493c      	ldr	r1, [pc, #240]	; (405208 <_malloc_r+0x334>)
  405118:	3201      	adds	r2, #1
  40511a:	bf1b      	ittet	ne
  40511c:	ebcb 0b08 	rsbne	fp, fp, r8
  405120:	445b      	addne	r3, fp
  405122:	f8c1 8000 	streq.w	r8, [r1]
  405126:	f8cc 3000 	strne.w	r3, [ip]
  40512a:	f018 0307 	ands.w	r3, r8, #7
  40512e:	f000 8113 	beq.w	405358 <_malloc_r+0x484>
  405132:	f1c3 0208 	rsb	r2, r3, #8
  405136:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  40513a:	4490      	add	r8, r2
  40513c:	3308      	adds	r3, #8
  40513e:	44c2      	add	sl, r8
  405140:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  405144:	ebca 0a03 	rsb	sl, sl, r3
  405148:	4651      	mov	r1, sl
  40514a:	4630      	mov	r0, r6
  40514c:	f8cd c004 	str.w	ip, [sp, #4]
  405150:	f000 fc88 	bl	405a64 <_sbrk_r>
  405154:	1c43      	adds	r3, r0, #1
  405156:	f8dd c004 	ldr.w	ip, [sp, #4]
  40515a:	f000 8135 	beq.w	4053c8 <_malloc_r+0x4f4>
  40515e:	ebc8 0200 	rsb	r2, r8, r0
  405162:	4452      	add	r2, sl
  405164:	f042 0201 	orr.w	r2, r2, #1
  405168:	f8dc 3000 	ldr.w	r3, [ip]
  40516c:	f8c7 8008 	str.w	r8, [r7, #8]
  405170:	4453      	add	r3, sl
  405172:	42bc      	cmp	r4, r7
  405174:	f8c8 2004 	str.w	r2, [r8, #4]
  405178:	f8cc 3000 	str.w	r3, [ip]
  40517c:	f8df a094 	ldr.w	sl, [pc, #148]	; 405214 <_malloc_r+0x340>
  405180:	d015      	beq.n	4051ae <_malloc_r+0x2da>
  405182:	f1b9 0f0f 	cmp.w	r9, #15
  405186:	f240 80ea 	bls.w	40535e <_malloc_r+0x48a>
  40518a:	6861      	ldr	r1, [r4, #4]
  40518c:	f1a9 020c 	sub.w	r2, r9, #12
  405190:	f022 0207 	bic.w	r2, r2, #7
  405194:	f001 0e01 	and.w	lr, r1, #1
  405198:	18a1      	adds	r1, r4, r2
  40519a:	2005      	movs	r0, #5
  40519c:	ea42 0e0e 	orr.w	lr, r2, lr
  4051a0:	2a0f      	cmp	r2, #15
  4051a2:	f8c4 e004 	str.w	lr, [r4, #4]
  4051a6:	6048      	str	r0, [r1, #4]
  4051a8:	6088      	str	r0, [r1, #8]
  4051aa:	f200 8111 	bhi.w	4053d0 <_malloc_r+0x4fc>
  4051ae:	4a17      	ldr	r2, [pc, #92]	; (40520c <_malloc_r+0x338>)
  4051b0:	68bc      	ldr	r4, [r7, #8]
  4051b2:	6811      	ldr	r1, [r2, #0]
  4051b4:	428b      	cmp	r3, r1
  4051b6:	bf88      	it	hi
  4051b8:	6013      	strhi	r3, [r2, #0]
  4051ba:	4a15      	ldr	r2, [pc, #84]	; (405210 <_malloc_r+0x33c>)
  4051bc:	6811      	ldr	r1, [r2, #0]
  4051be:	428b      	cmp	r3, r1
  4051c0:	bf88      	it	hi
  4051c2:	6013      	strhi	r3, [r2, #0]
  4051c4:	6862      	ldr	r2, [r4, #4]
  4051c6:	f022 0203 	bic.w	r2, r2, #3
  4051ca:	4295      	cmp	r5, r2
  4051cc:	ebc5 0302 	rsb	r3, r5, r2
  4051d0:	d801      	bhi.n	4051d6 <_malloc_r+0x302>
  4051d2:	2b0f      	cmp	r3, #15
  4051d4:	dc04      	bgt.n	4051e0 <_malloc_r+0x30c>
  4051d6:	4630      	mov	r0, r6
  4051d8:	f000 fa5c 	bl	405694 <__malloc_unlock>
  4051dc:	2400      	movs	r4, #0
  4051de:	e6a5      	b.n	404f2c <_malloc_r+0x58>
  4051e0:	1962      	adds	r2, r4, r5
  4051e2:	f043 0301 	orr.w	r3, r3, #1
  4051e6:	f045 0501 	orr.w	r5, r5, #1
  4051ea:	6065      	str	r5, [r4, #4]
  4051ec:	4630      	mov	r0, r6
  4051ee:	60ba      	str	r2, [r7, #8]
  4051f0:	6053      	str	r3, [r2, #4]
  4051f2:	f000 fa4f 	bl	405694 <__malloc_unlock>
  4051f6:	3408      	adds	r4, #8
  4051f8:	4620      	mov	r0, r4
  4051fa:	b003      	add	sp, #12
  4051fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405200:	200004e0 	.word	0x200004e0
  405204:	20000928 	.word	0x20000928
  405208:	200008ec 	.word	0x200008ec
  40520c:	20000924 	.word	0x20000924
  405210:	20000920 	.word	0x20000920
  405214:	2000092c 	.word	0x2000092c
  405218:	f1bc 0f14 	cmp.w	ip, #20
  40521c:	d961      	bls.n	4052e2 <_malloc_r+0x40e>
  40521e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  405222:	f200 808f 	bhi.w	405344 <_malloc_r+0x470>
  405226:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  40522a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40522e:	ea4f 014c 	mov.w	r1, ip, lsl #1
  405232:	e697      	b.n	404f64 <_malloc_r+0x90>
  405234:	0a4b      	lsrs	r3, r1, #9
  405236:	2b04      	cmp	r3, #4
  405238:	d958      	bls.n	4052ec <_malloc_r+0x418>
  40523a:	2b14      	cmp	r3, #20
  40523c:	f200 80ae 	bhi.w	40539c <_malloc_r+0x4c8>
  405240:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  405244:	0050      	lsls	r0, r2, #1
  405246:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  40524a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 405408 <_malloc_r+0x534>
  40524e:	6883      	ldr	r3, [r0, #8]
  405250:	4283      	cmp	r3, r0
  405252:	f000 808a 	beq.w	40536a <_malloc_r+0x496>
  405256:	685a      	ldr	r2, [r3, #4]
  405258:	f022 0203 	bic.w	r2, r2, #3
  40525c:	4291      	cmp	r1, r2
  40525e:	d202      	bcs.n	405266 <_malloc_r+0x392>
  405260:	689b      	ldr	r3, [r3, #8]
  405262:	4298      	cmp	r0, r3
  405264:	d1f7      	bne.n	405256 <_malloc_r+0x382>
  405266:	68d9      	ldr	r1, [r3, #12]
  405268:	687a      	ldr	r2, [r7, #4]
  40526a:	60e1      	str	r1, [r4, #12]
  40526c:	60a3      	str	r3, [r4, #8]
  40526e:	608c      	str	r4, [r1, #8]
  405270:	60dc      	str	r4, [r3, #12]
  405272:	e6b7      	b.n	404fe4 <_malloc_r+0x110>
  405274:	1961      	adds	r1, r4, r5
  405276:	f042 0701 	orr.w	r7, r2, #1
  40527a:	f045 0501 	orr.w	r5, r5, #1
  40527e:	6065      	str	r5, [r4, #4]
  405280:	4630      	mov	r0, r6
  405282:	6159      	str	r1, [r3, #20]
  405284:	6119      	str	r1, [r3, #16]
  405286:	f8c1 e00c 	str.w	lr, [r1, #12]
  40528a:	f8c1 e008 	str.w	lr, [r1, #8]
  40528e:	604f      	str	r7, [r1, #4]
  405290:	508a      	str	r2, [r1, r2]
  405292:	3408      	adds	r4, #8
  405294:	f000 f9fe 	bl	405694 <__malloc_unlock>
  405298:	e648      	b.n	404f2c <_malloc_r+0x58>
  40529a:	685a      	ldr	r2, [r3, #4]
  40529c:	e6a2      	b.n	404fe4 <_malloc_r+0x110>
  40529e:	f109 0901 	add.w	r9, r9, #1
  4052a2:	f019 0f03 	tst.w	r9, #3
  4052a6:	f104 0408 	add.w	r4, r4, #8
  4052aa:	f47f aeae 	bne.w	40500a <_malloc_r+0x136>
  4052ae:	e02d      	b.n	40530c <_malloc_r+0x438>
  4052b0:	f104 0308 	add.w	r3, r4, #8
  4052b4:	6964      	ldr	r4, [r4, #20]
  4052b6:	42a3      	cmp	r3, r4
  4052b8:	bf08      	it	eq
  4052ba:	f10c 0c02 	addeq.w	ip, ip, #2
  4052be:	f43f ae67 	beq.w	404f90 <_malloc_r+0xbc>
  4052c2:	e623      	b.n	404f0c <_malloc_r+0x38>
  4052c4:	4419      	add	r1, r3
  4052c6:	461c      	mov	r4, r3
  4052c8:	6848      	ldr	r0, [r1, #4]
  4052ca:	68db      	ldr	r3, [r3, #12]
  4052cc:	f854 2f08 	ldr.w	r2, [r4, #8]!
  4052d0:	f040 0501 	orr.w	r5, r0, #1
  4052d4:	604d      	str	r5, [r1, #4]
  4052d6:	4630      	mov	r0, r6
  4052d8:	60d3      	str	r3, [r2, #12]
  4052da:	609a      	str	r2, [r3, #8]
  4052dc:	f000 f9da 	bl	405694 <__malloc_unlock>
  4052e0:	e624      	b.n	404f2c <_malloc_r+0x58>
  4052e2:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  4052e6:	ea4f 014c 	mov.w	r1, ip, lsl #1
  4052ea:	e63b      	b.n	404f64 <_malloc_r+0x90>
  4052ec:	098a      	lsrs	r2, r1, #6
  4052ee:	3238      	adds	r2, #56	; 0x38
  4052f0:	0050      	lsls	r0, r2, #1
  4052f2:	e7a8      	b.n	405246 <_malloc_r+0x372>
  4052f4:	42bc      	cmp	r4, r7
  4052f6:	f43f af03 	beq.w	405100 <_malloc_r+0x22c>
  4052fa:	68bc      	ldr	r4, [r7, #8]
  4052fc:	6862      	ldr	r2, [r4, #4]
  4052fe:	f022 0203 	bic.w	r2, r2, #3
  405302:	e762      	b.n	4051ca <_malloc_r+0x2f6>
  405304:	f8d8 8000 	ldr.w	r8, [r8]
  405308:	4598      	cmp	r8, r3
  40530a:	d17b      	bne.n	405404 <_malloc_r+0x530>
  40530c:	f01c 0f03 	tst.w	ip, #3
  405310:	f1a8 0308 	sub.w	r3, r8, #8
  405314:	f10c 3cff 	add.w	ip, ip, #4294967295
  405318:	d1f4      	bne.n	405304 <_malloc_r+0x430>
  40531a:	687b      	ldr	r3, [r7, #4]
  40531c:	ea23 0300 	bic.w	r3, r3, r0
  405320:	607b      	str	r3, [r7, #4]
  405322:	0040      	lsls	r0, r0, #1
  405324:	4298      	cmp	r0, r3
  405326:	f63f aebf 	bhi.w	4050a8 <_malloc_r+0x1d4>
  40532a:	2800      	cmp	r0, #0
  40532c:	f43f aebc 	beq.w	4050a8 <_malloc_r+0x1d4>
  405330:	4203      	tst	r3, r0
  405332:	46cc      	mov	ip, r9
  405334:	f47f ae65 	bne.w	405002 <_malloc_r+0x12e>
  405338:	0040      	lsls	r0, r0, #1
  40533a:	4203      	tst	r3, r0
  40533c:	f10c 0c04 	add.w	ip, ip, #4
  405340:	d0fa      	beq.n	405338 <_malloc_r+0x464>
  405342:	e65e      	b.n	405002 <_malloc_r+0x12e>
  405344:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  405348:	d81a      	bhi.n	405380 <_malloc_r+0x4ac>
  40534a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  40534e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  405352:	ea4f 014c 	mov.w	r1, ip, lsl #1
  405356:	e605      	b.n	404f64 <_malloc_r+0x90>
  405358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40535c:	e6ef      	b.n	40513e <_malloc_r+0x26a>
  40535e:	2301      	movs	r3, #1
  405360:	f8c8 3004 	str.w	r3, [r8, #4]
  405364:	4644      	mov	r4, r8
  405366:	2200      	movs	r2, #0
  405368:	e72f      	b.n	4051ca <_malloc_r+0x2f6>
  40536a:	1091      	asrs	r1, r2, #2
  40536c:	2001      	movs	r0, #1
  40536e:	f8d8 2004 	ldr.w	r2, [r8, #4]
  405372:	fa00 f101 	lsl.w	r1, r0, r1
  405376:	430a      	orrs	r2, r1
  405378:	f8c8 2004 	str.w	r2, [r8, #4]
  40537c:	4619      	mov	r1, r3
  40537e:	e774      	b.n	40526a <_malloc_r+0x396>
  405380:	f240 5354 	movw	r3, #1364	; 0x554
  405384:	459c      	cmp	ip, r3
  405386:	d81b      	bhi.n	4053c0 <_malloc_r+0x4ec>
  405388:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  40538c:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  405390:	ea4f 014c 	mov.w	r1, ip, lsl #1
  405394:	e5e6      	b.n	404f64 <_malloc_r+0x90>
  405396:	f10a 0a10 	add.w	sl, sl, #16
  40539a:	e6a3      	b.n	4050e4 <_malloc_r+0x210>
  40539c:	2b54      	cmp	r3, #84	; 0x54
  40539e:	d81f      	bhi.n	4053e0 <_malloc_r+0x50c>
  4053a0:	0b0a      	lsrs	r2, r1, #12
  4053a2:	326e      	adds	r2, #110	; 0x6e
  4053a4:	0050      	lsls	r0, r2, #1
  4053a6:	e74e      	b.n	405246 <_malloc_r+0x372>
  4053a8:	f3cb 010b 	ubfx	r1, fp, #0, #12
  4053ac:	2900      	cmp	r1, #0
  4053ae:	f47f aeb1 	bne.w	405114 <_malloc_r+0x240>
  4053b2:	eb0a 0109 	add.w	r1, sl, r9
  4053b6:	68ba      	ldr	r2, [r7, #8]
  4053b8:	f041 0101 	orr.w	r1, r1, #1
  4053bc:	6051      	str	r1, [r2, #4]
  4053be:	e6f6      	b.n	4051ae <_malloc_r+0x2da>
  4053c0:	21fc      	movs	r1, #252	; 0xfc
  4053c2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  4053c6:	e5cd      	b.n	404f64 <_malloc_r+0x90>
  4053c8:	2201      	movs	r2, #1
  4053ca:	f04f 0a00 	mov.w	sl, #0
  4053ce:	e6cb      	b.n	405168 <_malloc_r+0x294>
  4053d0:	f104 0108 	add.w	r1, r4, #8
  4053d4:	4630      	mov	r0, r6
  4053d6:	f7ff fa83 	bl	4048e0 <_free_r>
  4053da:	f8da 3000 	ldr.w	r3, [sl]
  4053de:	e6e6      	b.n	4051ae <_malloc_r+0x2da>
  4053e0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4053e4:	d803      	bhi.n	4053ee <_malloc_r+0x51a>
  4053e6:	0bca      	lsrs	r2, r1, #15
  4053e8:	3277      	adds	r2, #119	; 0x77
  4053ea:	0050      	lsls	r0, r2, #1
  4053ec:	e72b      	b.n	405246 <_malloc_r+0x372>
  4053ee:	f240 5254 	movw	r2, #1364	; 0x554
  4053f2:	4293      	cmp	r3, r2
  4053f4:	d803      	bhi.n	4053fe <_malloc_r+0x52a>
  4053f6:	0c8a      	lsrs	r2, r1, #18
  4053f8:	327c      	adds	r2, #124	; 0x7c
  4053fa:	0050      	lsls	r0, r2, #1
  4053fc:	e723      	b.n	405246 <_malloc_r+0x372>
  4053fe:	20fc      	movs	r0, #252	; 0xfc
  405400:	227e      	movs	r2, #126	; 0x7e
  405402:	e720      	b.n	405246 <_malloc_r+0x372>
  405404:	687b      	ldr	r3, [r7, #4]
  405406:	e78c      	b.n	405322 <_malloc_r+0x44e>
  405408:	200004e0 	.word	0x200004e0

0040540c <memchr>:
  40540c:	0783      	lsls	r3, r0, #30
  40540e:	b470      	push	{r4, r5, r6}
  405410:	b2c9      	uxtb	r1, r1
  405412:	d03f      	beq.n	405494 <memchr+0x88>
  405414:	1e54      	subs	r4, r2, #1
  405416:	b32a      	cbz	r2, 405464 <memchr+0x58>
  405418:	7803      	ldrb	r3, [r0, #0]
  40541a:	428b      	cmp	r3, r1
  40541c:	d023      	beq.n	405466 <memchr+0x5a>
  40541e:	1c43      	adds	r3, r0, #1
  405420:	e004      	b.n	40542c <memchr+0x20>
  405422:	b1fc      	cbz	r4, 405464 <memchr+0x58>
  405424:	7804      	ldrb	r4, [r0, #0]
  405426:	428c      	cmp	r4, r1
  405428:	d01d      	beq.n	405466 <memchr+0x5a>
  40542a:	4614      	mov	r4, r2
  40542c:	f013 0f03 	tst.w	r3, #3
  405430:	4618      	mov	r0, r3
  405432:	f104 32ff 	add.w	r2, r4, #4294967295
  405436:	f103 0301 	add.w	r3, r3, #1
  40543a:	d1f2      	bne.n	405422 <memchr+0x16>
  40543c:	2c03      	cmp	r4, #3
  40543e:	d814      	bhi.n	40546a <memchr+0x5e>
  405440:	1e65      	subs	r5, r4, #1
  405442:	b34c      	cbz	r4, 405498 <memchr+0x8c>
  405444:	7803      	ldrb	r3, [r0, #0]
  405446:	428b      	cmp	r3, r1
  405448:	d00d      	beq.n	405466 <memchr+0x5a>
  40544a:	1c42      	adds	r2, r0, #1
  40544c:	2300      	movs	r3, #0
  40544e:	e002      	b.n	405456 <memchr+0x4a>
  405450:	7804      	ldrb	r4, [r0, #0]
  405452:	428c      	cmp	r4, r1
  405454:	d007      	beq.n	405466 <memchr+0x5a>
  405456:	42ab      	cmp	r3, r5
  405458:	4610      	mov	r0, r2
  40545a:	f103 0301 	add.w	r3, r3, #1
  40545e:	f102 0201 	add.w	r2, r2, #1
  405462:	d1f5      	bne.n	405450 <memchr+0x44>
  405464:	2000      	movs	r0, #0
  405466:	bc70      	pop	{r4, r5, r6}
  405468:	4770      	bx	lr
  40546a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40546e:	4603      	mov	r3, r0
  405470:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  405474:	4618      	mov	r0, r3
  405476:	3304      	adds	r3, #4
  405478:	6802      	ldr	r2, [r0, #0]
  40547a:	4072      	eors	r2, r6
  40547c:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  405480:	ea25 0202 	bic.w	r2, r5, r2
  405484:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  405488:	d1da      	bne.n	405440 <memchr+0x34>
  40548a:	3c04      	subs	r4, #4
  40548c:	2c03      	cmp	r4, #3
  40548e:	4618      	mov	r0, r3
  405490:	d8f0      	bhi.n	405474 <memchr+0x68>
  405492:	e7d5      	b.n	405440 <memchr+0x34>
  405494:	4614      	mov	r4, r2
  405496:	e7d1      	b.n	40543c <memchr+0x30>
  405498:	4620      	mov	r0, r4
  40549a:	e7e4      	b.n	405466 <memchr+0x5a>

0040549c <memcpy>:
  40549c:	4684      	mov	ip, r0
  40549e:	ea41 0300 	orr.w	r3, r1, r0
  4054a2:	f013 0303 	ands.w	r3, r3, #3
  4054a6:	d16d      	bne.n	405584 <memcpy+0xe8>
  4054a8:	3a40      	subs	r2, #64	; 0x40
  4054aa:	d341      	bcc.n	405530 <memcpy+0x94>
  4054ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4054b0:	f840 3b04 	str.w	r3, [r0], #4
  4054b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4054b8:	f840 3b04 	str.w	r3, [r0], #4
  4054bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4054c0:	f840 3b04 	str.w	r3, [r0], #4
  4054c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4054c8:	f840 3b04 	str.w	r3, [r0], #4
  4054cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4054d0:	f840 3b04 	str.w	r3, [r0], #4
  4054d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4054d8:	f840 3b04 	str.w	r3, [r0], #4
  4054dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4054e0:	f840 3b04 	str.w	r3, [r0], #4
  4054e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4054e8:	f840 3b04 	str.w	r3, [r0], #4
  4054ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4054f0:	f840 3b04 	str.w	r3, [r0], #4
  4054f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4054f8:	f840 3b04 	str.w	r3, [r0], #4
  4054fc:	f851 3b04 	ldr.w	r3, [r1], #4
  405500:	f840 3b04 	str.w	r3, [r0], #4
  405504:	f851 3b04 	ldr.w	r3, [r1], #4
  405508:	f840 3b04 	str.w	r3, [r0], #4
  40550c:	f851 3b04 	ldr.w	r3, [r1], #4
  405510:	f840 3b04 	str.w	r3, [r0], #4
  405514:	f851 3b04 	ldr.w	r3, [r1], #4
  405518:	f840 3b04 	str.w	r3, [r0], #4
  40551c:	f851 3b04 	ldr.w	r3, [r1], #4
  405520:	f840 3b04 	str.w	r3, [r0], #4
  405524:	f851 3b04 	ldr.w	r3, [r1], #4
  405528:	f840 3b04 	str.w	r3, [r0], #4
  40552c:	3a40      	subs	r2, #64	; 0x40
  40552e:	d2bd      	bcs.n	4054ac <memcpy+0x10>
  405530:	3230      	adds	r2, #48	; 0x30
  405532:	d311      	bcc.n	405558 <memcpy+0xbc>
  405534:	f851 3b04 	ldr.w	r3, [r1], #4
  405538:	f840 3b04 	str.w	r3, [r0], #4
  40553c:	f851 3b04 	ldr.w	r3, [r1], #4
  405540:	f840 3b04 	str.w	r3, [r0], #4
  405544:	f851 3b04 	ldr.w	r3, [r1], #4
  405548:	f840 3b04 	str.w	r3, [r0], #4
  40554c:	f851 3b04 	ldr.w	r3, [r1], #4
  405550:	f840 3b04 	str.w	r3, [r0], #4
  405554:	3a10      	subs	r2, #16
  405556:	d2ed      	bcs.n	405534 <memcpy+0x98>
  405558:	320c      	adds	r2, #12
  40555a:	d305      	bcc.n	405568 <memcpy+0xcc>
  40555c:	f851 3b04 	ldr.w	r3, [r1], #4
  405560:	f840 3b04 	str.w	r3, [r0], #4
  405564:	3a04      	subs	r2, #4
  405566:	d2f9      	bcs.n	40555c <memcpy+0xc0>
  405568:	3204      	adds	r2, #4
  40556a:	d008      	beq.n	40557e <memcpy+0xe2>
  40556c:	07d2      	lsls	r2, r2, #31
  40556e:	bf1c      	itt	ne
  405570:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405574:	f800 3b01 	strbne.w	r3, [r0], #1
  405578:	d301      	bcc.n	40557e <memcpy+0xe2>
  40557a:	880b      	ldrh	r3, [r1, #0]
  40557c:	8003      	strh	r3, [r0, #0]
  40557e:	4660      	mov	r0, ip
  405580:	4770      	bx	lr
  405582:	bf00      	nop
  405584:	2a08      	cmp	r2, #8
  405586:	d313      	bcc.n	4055b0 <memcpy+0x114>
  405588:	078b      	lsls	r3, r1, #30
  40558a:	d08d      	beq.n	4054a8 <memcpy+0xc>
  40558c:	f010 0303 	ands.w	r3, r0, #3
  405590:	d08a      	beq.n	4054a8 <memcpy+0xc>
  405592:	f1c3 0304 	rsb	r3, r3, #4
  405596:	1ad2      	subs	r2, r2, r3
  405598:	07db      	lsls	r3, r3, #31
  40559a:	bf1c      	itt	ne
  40559c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4055a0:	f800 3b01 	strbne.w	r3, [r0], #1
  4055a4:	d380      	bcc.n	4054a8 <memcpy+0xc>
  4055a6:	f831 3b02 	ldrh.w	r3, [r1], #2
  4055aa:	f820 3b02 	strh.w	r3, [r0], #2
  4055ae:	e77b      	b.n	4054a8 <memcpy+0xc>
  4055b0:	3a04      	subs	r2, #4
  4055b2:	d3d9      	bcc.n	405568 <memcpy+0xcc>
  4055b4:	3a01      	subs	r2, #1
  4055b6:	f811 3b01 	ldrb.w	r3, [r1], #1
  4055ba:	f800 3b01 	strb.w	r3, [r0], #1
  4055be:	d2f9      	bcs.n	4055b4 <memcpy+0x118>
  4055c0:	780b      	ldrb	r3, [r1, #0]
  4055c2:	7003      	strb	r3, [r0, #0]
  4055c4:	784b      	ldrb	r3, [r1, #1]
  4055c6:	7043      	strb	r3, [r0, #1]
  4055c8:	788b      	ldrb	r3, [r1, #2]
  4055ca:	7083      	strb	r3, [r0, #2]
  4055cc:	4660      	mov	r0, ip
  4055ce:	4770      	bx	lr

004055d0 <memmove>:
  4055d0:	4288      	cmp	r0, r1
  4055d2:	b4f0      	push	{r4, r5, r6, r7}
  4055d4:	d910      	bls.n	4055f8 <memmove+0x28>
  4055d6:	188c      	adds	r4, r1, r2
  4055d8:	42a0      	cmp	r0, r4
  4055da:	d20d      	bcs.n	4055f8 <memmove+0x28>
  4055dc:	1885      	adds	r5, r0, r2
  4055de:	1e53      	subs	r3, r2, #1
  4055e0:	b142      	cbz	r2, 4055f4 <memmove+0x24>
  4055e2:	4621      	mov	r1, r4
  4055e4:	462a      	mov	r2, r5
  4055e6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  4055ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4055ee:	3b01      	subs	r3, #1
  4055f0:	1c5c      	adds	r4, r3, #1
  4055f2:	d1f8      	bne.n	4055e6 <memmove+0x16>
  4055f4:	bcf0      	pop	{r4, r5, r6, r7}
  4055f6:	4770      	bx	lr
  4055f8:	2a0f      	cmp	r2, #15
  4055fa:	d93f      	bls.n	40567c <memmove+0xac>
  4055fc:	ea40 0301 	orr.w	r3, r0, r1
  405600:	079b      	lsls	r3, r3, #30
  405602:	d13f      	bne.n	405684 <memmove+0xb4>
  405604:	f1a2 0710 	sub.w	r7, r2, #16
  405608:	093f      	lsrs	r7, r7, #4
  40560a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  40560e:	3610      	adds	r6, #16
  405610:	460c      	mov	r4, r1
  405612:	4603      	mov	r3, r0
  405614:	6825      	ldr	r5, [r4, #0]
  405616:	601d      	str	r5, [r3, #0]
  405618:	6865      	ldr	r5, [r4, #4]
  40561a:	605d      	str	r5, [r3, #4]
  40561c:	68a5      	ldr	r5, [r4, #8]
  40561e:	609d      	str	r5, [r3, #8]
  405620:	68e5      	ldr	r5, [r4, #12]
  405622:	60dd      	str	r5, [r3, #12]
  405624:	3310      	adds	r3, #16
  405626:	42b3      	cmp	r3, r6
  405628:	f104 0410 	add.w	r4, r4, #16
  40562c:	d1f2      	bne.n	405614 <memmove+0x44>
  40562e:	1c7b      	adds	r3, r7, #1
  405630:	f002 0c0f 	and.w	ip, r2, #15
  405634:	011b      	lsls	r3, r3, #4
  405636:	f1bc 0f03 	cmp.w	ip, #3
  40563a:	4419      	add	r1, r3
  40563c:	4403      	add	r3, r0
  40563e:	d923      	bls.n	405688 <memmove+0xb8>
  405640:	460e      	mov	r6, r1
  405642:	461d      	mov	r5, r3
  405644:	4664      	mov	r4, ip
  405646:	3c04      	subs	r4, #4
  405648:	f856 7b04 	ldr.w	r7, [r6], #4
  40564c:	f845 7b04 	str.w	r7, [r5], #4
  405650:	2c03      	cmp	r4, #3
  405652:	d8f8      	bhi.n	405646 <memmove+0x76>
  405654:	f1ac 0404 	sub.w	r4, ip, #4
  405658:	f024 0403 	bic.w	r4, r4, #3
  40565c:	3404      	adds	r4, #4
  40565e:	f002 0203 	and.w	r2, r2, #3
  405662:	4423      	add	r3, r4
  405664:	4421      	add	r1, r4
  405666:	2a00      	cmp	r2, #0
  405668:	d0c4      	beq.n	4055f4 <memmove+0x24>
  40566a:	441a      	add	r2, r3
  40566c:	f811 4b01 	ldrb.w	r4, [r1], #1
  405670:	f803 4b01 	strb.w	r4, [r3], #1
  405674:	4293      	cmp	r3, r2
  405676:	d1f9      	bne.n	40566c <memmove+0x9c>
  405678:	bcf0      	pop	{r4, r5, r6, r7}
  40567a:	4770      	bx	lr
  40567c:	4603      	mov	r3, r0
  40567e:	2a00      	cmp	r2, #0
  405680:	d1f3      	bne.n	40566a <memmove+0x9a>
  405682:	e7b7      	b.n	4055f4 <memmove+0x24>
  405684:	4603      	mov	r3, r0
  405686:	e7f0      	b.n	40566a <memmove+0x9a>
  405688:	4662      	mov	r2, ip
  40568a:	2a00      	cmp	r2, #0
  40568c:	d1ed      	bne.n	40566a <memmove+0x9a>
  40568e:	e7b1      	b.n	4055f4 <memmove+0x24>

00405690 <__malloc_lock>:
  405690:	4770      	bx	lr
  405692:	bf00      	nop

00405694 <__malloc_unlock>:
  405694:	4770      	bx	lr
  405696:	bf00      	nop

00405698 <_realloc_r>:
  405698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40569c:	460c      	mov	r4, r1
  40569e:	b083      	sub	sp, #12
  4056a0:	4690      	mov	r8, r2
  4056a2:	4681      	mov	r9, r0
  4056a4:	2900      	cmp	r1, #0
  4056a6:	f000 80e2 	beq.w	40586e <_realloc_r+0x1d6>
  4056aa:	f7ff fff1 	bl	405690 <__malloc_lock>
  4056ae:	f108 060b 	add.w	r6, r8, #11
  4056b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4056b6:	2e16      	cmp	r6, #22
  4056b8:	f023 0503 	bic.w	r5, r3, #3
  4056bc:	f1a4 0708 	sub.w	r7, r4, #8
  4056c0:	d84b      	bhi.n	40575a <_realloc_r+0xc2>
  4056c2:	2110      	movs	r1, #16
  4056c4:	460e      	mov	r6, r1
  4056c6:	45b0      	cmp	r8, r6
  4056c8:	d84c      	bhi.n	405764 <_realloc_r+0xcc>
  4056ca:	428d      	cmp	r5, r1
  4056cc:	da78      	bge.n	4057c0 <_realloc_r+0x128>
  4056ce:	f8df b390 	ldr.w	fp, [pc, #912]	; 405a60 <_realloc_r+0x3c8>
  4056d2:	f8db e008 	ldr.w	lr, [fp, #8]
  4056d6:	1978      	adds	r0, r7, r5
  4056d8:	4586      	cmp	lr, r0
  4056da:	f000 80ce 	beq.w	40587a <_realloc_r+0x1e2>
  4056de:	6842      	ldr	r2, [r0, #4]
  4056e0:	f022 0c01 	bic.w	ip, r2, #1
  4056e4:	4484      	add	ip, r0
  4056e6:	f8dc c004 	ldr.w	ip, [ip, #4]
  4056ea:	f01c 0f01 	tst.w	ip, #1
  4056ee:	d07a      	beq.n	4057e6 <_realloc_r+0x14e>
  4056f0:	2200      	movs	r2, #0
  4056f2:	4610      	mov	r0, r2
  4056f4:	07db      	lsls	r3, r3, #31
  4056f6:	f100 8092 	bmi.w	40581e <_realloc_r+0x186>
  4056fa:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4056fe:	ebc3 0a07 	rsb	sl, r3, r7
  405702:	f8da 3004 	ldr.w	r3, [sl, #4]
  405706:	f023 0303 	bic.w	r3, r3, #3
  40570a:	442b      	add	r3, r5
  40570c:	b388      	cbz	r0, 405772 <_realloc_r+0xda>
  40570e:	4570      	cmp	r0, lr
  405710:	f000 80ed 	beq.w	4058ee <_realloc_r+0x256>
  405714:	eb02 0e03 	add.w	lr, r2, r3
  405718:	458e      	cmp	lr, r1
  40571a:	db2a      	blt.n	405772 <_realloc_r+0xda>
  40571c:	68c3      	ldr	r3, [r0, #12]
  40571e:	6882      	ldr	r2, [r0, #8]
  405720:	4657      	mov	r7, sl
  405722:	60d3      	str	r3, [r2, #12]
  405724:	609a      	str	r2, [r3, #8]
  405726:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40572a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40572e:	60cb      	str	r3, [r1, #12]
  405730:	1f2a      	subs	r2, r5, #4
  405732:	2a24      	cmp	r2, #36	; 0x24
  405734:	6099      	str	r1, [r3, #8]
  405736:	f200 8126 	bhi.w	405986 <_realloc_r+0x2ee>
  40573a:	2a13      	cmp	r2, #19
  40573c:	f240 80b3 	bls.w	4058a6 <_realloc_r+0x20e>
  405740:	6823      	ldr	r3, [r4, #0]
  405742:	f8ca 3008 	str.w	r3, [sl, #8]
  405746:	6863      	ldr	r3, [r4, #4]
  405748:	f8ca 300c 	str.w	r3, [sl, #12]
  40574c:	2a1b      	cmp	r2, #27
  40574e:	f200 8130 	bhi.w	4059b2 <_realloc_r+0x31a>
  405752:	3408      	adds	r4, #8
  405754:	f10a 0310 	add.w	r3, sl, #16
  405758:	e0a6      	b.n	4058a8 <_realloc_r+0x210>
  40575a:	f026 0607 	bic.w	r6, r6, #7
  40575e:	2e00      	cmp	r6, #0
  405760:	4631      	mov	r1, r6
  405762:	dab0      	bge.n	4056c6 <_realloc_r+0x2e>
  405764:	230c      	movs	r3, #12
  405766:	2000      	movs	r0, #0
  405768:	f8c9 3000 	str.w	r3, [r9]
  40576c:	b003      	add	sp, #12
  40576e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405772:	428b      	cmp	r3, r1
  405774:	db53      	blt.n	40581e <_realloc_r+0x186>
  405776:	4657      	mov	r7, sl
  405778:	f8da 100c 	ldr.w	r1, [sl, #12]
  40577c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  405780:	1f2a      	subs	r2, r5, #4
  405782:	2a24      	cmp	r2, #36	; 0x24
  405784:	60c1      	str	r1, [r0, #12]
  405786:	6088      	str	r0, [r1, #8]
  405788:	f200 8109 	bhi.w	40599e <_realloc_r+0x306>
  40578c:	2a13      	cmp	r2, #19
  40578e:	f240 8104 	bls.w	40599a <_realloc_r+0x302>
  405792:	6821      	ldr	r1, [r4, #0]
  405794:	f8ca 1008 	str.w	r1, [sl, #8]
  405798:	6861      	ldr	r1, [r4, #4]
  40579a:	f8ca 100c 	str.w	r1, [sl, #12]
  40579e:	2a1b      	cmp	r2, #27
  4057a0:	f200 811c 	bhi.w	4059dc <_realloc_r+0x344>
  4057a4:	3408      	adds	r4, #8
  4057a6:	f10a 0210 	add.w	r2, sl, #16
  4057aa:	6821      	ldr	r1, [r4, #0]
  4057ac:	6011      	str	r1, [r2, #0]
  4057ae:	6861      	ldr	r1, [r4, #4]
  4057b0:	6051      	str	r1, [r2, #4]
  4057b2:	68a1      	ldr	r1, [r4, #8]
  4057b4:	6091      	str	r1, [r2, #8]
  4057b6:	461d      	mov	r5, r3
  4057b8:	f8da 3004 	ldr.w	r3, [sl, #4]
  4057bc:	463c      	mov	r4, r7
  4057be:	4657      	mov	r7, sl
  4057c0:	1baa      	subs	r2, r5, r6
  4057c2:	2a0f      	cmp	r2, #15
  4057c4:	f003 0301 	and.w	r3, r3, #1
  4057c8:	d819      	bhi.n	4057fe <_realloc_r+0x166>
  4057ca:	432b      	orrs	r3, r5
  4057cc:	443d      	add	r5, r7
  4057ce:	607b      	str	r3, [r7, #4]
  4057d0:	686b      	ldr	r3, [r5, #4]
  4057d2:	f043 0301 	orr.w	r3, r3, #1
  4057d6:	606b      	str	r3, [r5, #4]
  4057d8:	4648      	mov	r0, r9
  4057da:	f7ff ff5b 	bl	405694 <__malloc_unlock>
  4057de:	4620      	mov	r0, r4
  4057e0:	b003      	add	sp, #12
  4057e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057e6:	f022 0203 	bic.w	r2, r2, #3
  4057ea:	eb02 0c05 	add.w	ip, r2, r5
  4057ee:	458c      	cmp	ip, r1
  4057f0:	db80      	blt.n	4056f4 <_realloc_r+0x5c>
  4057f2:	68c2      	ldr	r2, [r0, #12]
  4057f4:	6881      	ldr	r1, [r0, #8]
  4057f6:	4665      	mov	r5, ip
  4057f8:	60ca      	str	r2, [r1, #12]
  4057fa:	6091      	str	r1, [r2, #8]
  4057fc:	e7e0      	b.n	4057c0 <_realloc_r+0x128>
  4057fe:	19b9      	adds	r1, r7, r6
  405800:	f042 0001 	orr.w	r0, r2, #1
  405804:	431e      	orrs	r6, r3
  405806:	440a      	add	r2, r1
  405808:	607e      	str	r6, [r7, #4]
  40580a:	6048      	str	r0, [r1, #4]
  40580c:	6853      	ldr	r3, [r2, #4]
  40580e:	f043 0301 	orr.w	r3, r3, #1
  405812:	3108      	adds	r1, #8
  405814:	6053      	str	r3, [r2, #4]
  405816:	4648      	mov	r0, r9
  405818:	f7ff f862 	bl	4048e0 <_free_r>
  40581c:	e7dc      	b.n	4057d8 <_realloc_r+0x140>
  40581e:	4641      	mov	r1, r8
  405820:	4648      	mov	r0, r9
  405822:	f7ff fb57 	bl	404ed4 <_malloc_r>
  405826:	4680      	mov	r8, r0
  405828:	b1d0      	cbz	r0, 405860 <_realloc_r+0x1c8>
  40582a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40582e:	f023 0201 	bic.w	r2, r3, #1
  405832:	443a      	add	r2, r7
  405834:	f1a0 0108 	sub.w	r1, r0, #8
  405838:	4291      	cmp	r1, r2
  40583a:	f000 809e 	beq.w	40597a <_realloc_r+0x2e2>
  40583e:	1f2a      	subs	r2, r5, #4
  405840:	2a24      	cmp	r2, #36	; 0x24
  405842:	d850      	bhi.n	4058e6 <_realloc_r+0x24e>
  405844:	2a13      	cmp	r2, #19
  405846:	d823      	bhi.n	405890 <_realloc_r+0x1f8>
  405848:	4603      	mov	r3, r0
  40584a:	4622      	mov	r2, r4
  40584c:	6811      	ldr	r1, [r2, #0]
  40584e:	6019      	str	r1, [r3, #0]
  405850:	6851      	ldr	r1, [r2, #4]
  405852:	6059      	str	r1, [r3, #4]
  405854:	6892      	ldr	r2, [r2, #8]
  405856:	609a      	str	r2, [r3, #8]
  405858:	4621      	mov	r1, r4
  40585a:	4648      	mov	r0, r9
  40585c:	f7ff f840 	bl	4048e0 <_free_r>
  405860:	4648      	mov	r0, r9
  405862:	f7ff ff17 	bl	405694 <__malloc_unlock>
  405866:	4640      	mov	r0, r8
  405868:	b003      	add	sp, #12
  40586a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40586e:	4611      	mov	r1, r2
  405870:	b003      	add	sp, #12
  405872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405876:	f7ff bb2d 	b.w	404ed4 <_malloc_r>
  40587a:	f8de 2004 	ldr.w	r2, [lr, #4]
  40587e:	f022 0203 	bic.w	r2, r2, #3
  405882:	1950      	adds	r0, r2, r5
  405884:	f106 0c10 	add.w	ip, r6, #16
  405888:	4560      	cmp	r0, ip
  40588a:	da19      	bge.n	4058c0 <_realloc_r+0x228>
  40588c:	4670      	mov	r0, lr
  40588e:	e731      	b.n	4056f4 <_realloc_r+0x5c>
  405890:	6823      	ldr	r3, [r4, #0]
  405892:	6003      	str	r3, [r0, #0]
  405894:	6863      	ldr	r3, [r4, #4]
  405896:	6043      	str	r3, [r0, #4]
  405898:	2a1b      	cmp	r2, #27
  40589a:	d863      	bhi.n	405964 <_realloc_r+0x2cc>
  40589c:	f100 0308 	add.w	r3, r0, #8
  4058a0:	f104 0208 	add.w	r2, r4, #8
  4058a4:	e7d2      	b.n	40584c <_realloc_r+0x1b4>
  4058a6:	463b      	mov	r3, r7
  4058a8:	6822      	ldr	r2, [r4, #0]
  4058aa:	601a      	str	r2, [r3, #0]
  4058ac:	6862      	ldr	r2, [r4, #4]
  4058ae:	605a      	str	r2, [r3, #4]
  4058b0:	68a2      	ldr	r2, [r4, #8]
  4058b2:	609a      	str	r2, [r3, #8]
  4058b4:	463c      	mov	r4, r7
  4058b6:	4675      	mov	r5, lr
  4058b8:	f8da 3004 	ldr.w	r3, [sl, #4]
  4058bc:	4657      	mov	r7, sl
  4058be:	e77f      	b.n	4057c0 <_realloc_r+0x128>
  4058c0:	4437      	add	r7, r6
  4058c2:	1b83      	subs	r3, r0, r6
  4058c4:	f043 0301 	orr.w	r3, r3, #1
  4058c8:	f8cb 7008 	str.w	r7, [fp, #8]
  4058cc:	607b      	str	r3, [r7, #4]
  4058ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4058d2:	f003 0301 	and.w	r3, r3, #1
  4058d6:	431e      	orrs	r6, r3
  4058d8:	4648      	mov	r0, r9
  4058da:	f844 6c04 	str.w	r6, [r4, #-4]
  4058de:	f7ff fed9 	bl	405694 <__malloc_unlock>
  4058e2:	4620      	mov	r0, r4
  4058e4:	e77c      	b.n	4057e0 <_realloc_r+0x148>
  4058e6:	4621      	mov	r1, r4
  4058e8:	f7ff fe72 	bl	4055d0 <memmove>
  4058ec:	e7b4      	b.n	405858 <_realloc_r+0x1c0>
  4058ee:	eb02 0c03 	add.w	ip, r2, r3
  4058f2:	f106 0210 	add.w	r2, r6, #16
  4058f6:	4594      	cmp	ip, r2
  4058f8:	f6ff af3b 	blt.w	405772 <_realloc_r+0xda>
  4058fc:	4657      	mov	r7, sl
  4058fe:	f8da 300c 	ldr.w	r3, [sl, #12]
  405902:	f857 1f08 	ldr.w	r1, [r7, #8]!
  405906:	1f2a      	subs	r2, r5, #4
  405908:	2a24      	cmp	r2, #36	; 0x24
  40590a:	60cb      	str	r3, [r1, #12]
  40590c:	6099      	str	r1, [r3, #8]
  40590e:	f200 8087 	bhi.w	405a20 <_realloc_r+0x388>
  405912:	2a13      	cmp	r2, #19
  405914:	d978      	bls.n	405a08 <_realloc_r+0x370>
  405916:	6823      	ldr	r3, [r4, #0]
  405918:	f8ca 3008 	str.w	r3, [sl, #8]
  40591c:	6863      	ldr	r3, [r4, #4]
  40591e:	f8ca 300c 	str.w	r3, [sl, #12]
  405922:	2a1b      	cmp	r2, #27
  405924:	f200 8085 	bhi.w	405a32 <_realloc_r+0x39a>
  405928:	3408      	adds	r4, #8
  40592a:	f10a 0310 	add.w	r3, sl, #16
  40592e:	6822      	ldr	r2, [r4, #0]
  405930:	601a      	str	r2, [r3, #0]
  405932:	6862      	ldr	r2, [r4, #4]
  405934:	605a      	str	r2, [r3, #4]
  405936:	68a2      	ldr	r2, [r4, #8]
  405938:	609a      	str	r2, [r3, #8]
  40593a:	eb0a 0306 	add.w	r3, sl, r6
  40593e:	ebc6 020c 	rsb	r2, r6, ip
  405942:	f042 0201 	orr.w	r2, r2, #1
  405946:	f8cb 3008 	str.w	r3, [fp, #8]
  40594a:	605a      	str	r2, [r3, #4]
  40594c:	f8da 3004 	ldr.w	r3, [sl, #4]
  405950:	f003 0301 	and.w	r3, r3, #1
  405954:	431e      	orrs	r6, r3
  405956:	4648      	mov	r0, r9
  405958:	f8ca 6004 	str.w	r6, [sl, #4]
  40595c:	f7ff fe9a 	bl	405694 <__malloc_unlock>
  405960:	4638      	mov	r0, r7
  405962:	e73d      	b.n	4057e0 <_realloc_r+0x148>
  405964:	68a3      	ldr	r3, [r4, #8]
  405966:	6083      	str	r3, [r0, #8]
  405968:	68e3      	ldr	r3, [r4, #12]
  40596a:	60c3      	str	r3, [r0, #12]
  40596c:	2a24      	cmp	r2, #36	; 0x24
  40596e:	d02c      	beq.n	4059ca <_realloc_r+0x332>
  405970:	f100 0310 	add.w	r3, r0, #16
  405974:	f104 0210 	add.w	r2, r4, #16
  405978:	e768      	b.n	40584c <_realloc_r+0x1b4>
  40597a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40597e:	f022 0203 	bic.w	r2, r2, #3
  405982:	4415      	add	r5, r2
  405984:	e71c      	b.n	4057c0 <_realloc_r+0x128>
  405986:	4621      	mov	r1, r4
  405988:	4638      	mov	r0, r7
  40598a:	4675      	mov	r5, lr
  40598c:	463c      	mov	r4, r7
  40598e:	f7ff fe1f 	bl	4055d0 <memmove>
  405992:	4657      	mov	r7, sl
  405994:	f8da 3004 	ldr.w	r3, [sl, #4]
  405998:	e712      	b.n	4057c0 <_realloc_r+0x128>
  40599a:	463a      	mov	r2, r7
  40599c:	e705      	b.n	4057aa <_realloc_r+0x112>
  40599e:	4621      	mov	r1, r4
  4059a0:	4638      	mov	r0, r7
  4059a2:	461d      	mov	r5, r3
  4059a4:	463c      	mov	r4, r7
  4059a6:	f7ff fe13 	bl	4055d0 <memmove>
  4059aa:	4657      	mov	r7, sl
  4059ac:	f8da 3004 	ldr.w	r3, [sl, #4]
  4059b0:	e706      	b.n	4057c0 <_realloc_r+0x128>
  4059b2:	68a3      	ldr	r3, [r4, #8]
  4059b4:	f8ca 3010 	str.w	r3, [sl, #16]
  4059b8:	68e3      	ldr	r3, [r4, #12]
  4059ba:	f8ca 3014 	str.w	r3, [sl, #20]
  4059be:	2a24      	cmp	r2, #36	; 0x24
  4059c0:	d018      	beq.n	4059f4 <_realloc_r+0x35c>
  4059c2:	3410      	adds	r4, #16
  4059c4:	f10a 0318 	add.w	r3, sl, #24
  4059c8:	e76e      	b.n	4058a8 <_realloc_r+0x210>
  4059ca:	6923      	ldr	r3, [r4, #16]
  4059cc:	6103      	str	r3, [r0, #16]
  4059ce:	6963      	ldr	r3, [r4, #20]
  4059d0:	6143      	str	r3, [r0, #20]
  4059d2:	f104 0218 	add.w	r2, r4, #24
  4059d6:	f100 0318 	add.w	r3, r0, #24
  4059da:	e737      	b.n	40584c <_realloc_r+0x1b4>
  4059dc:	68a1      	ldr	r1, [r4, #8]
  4059de:	f8ca 1010 	str.w	r1, [sl, #16]
  4059e2:	68e1      	ldr	r1, [r4, #12]
  4059e4:	f8ca 1014 	str.w	r1, [sl, #20]
  4059e8:	2a24      	cmp	r2, #36	; 0x24
  4059ea:	d00f      	beq.n	405a0c <_realloc_r+0x374>
  4059ec:	3410      	adds	r4, #16
  4059ee:	f10a 0218 	add.w	r2, sl, #24
  4059f2:	e6da      	b.n	4057aa <_realloc_r+0x112>
  4059f4:	6923      	ldr	r3, [r4, #16]
  4059f6:	f8ca 3018 	str.w	r3, [sl, #24]
  4059fa:	6963      	ldr	r3, [r4, #20]
  4059fc:	f8ca 301c 	str.w	r3, [sl, #28]
  405a00:	3418      	adds	r4, #24
  405a02:	f10a 0320 	add.w	r3, sl, #32
  405a06:	e74f      	b.n	4058a8 <_realloc_r+0x210>
  405a08:	463b      	mov	r3, r7
  405a0a:	e790      	b.n	40592e <_realloc_r+0x296>
  405a0c:	6922      	ldr	r2, [r4, #16]
  405a0e:	f8ca 2018 	str.w	r2, [sl, #24]
  405a12:	6962      	ldr	r2, [r4, #20]
  405a14:	f8ca 201c 	str.w	r2, [sl, #28]
  405a18:	3418      	adds	r4, #24
  405a1a:	f10a 0220 	add.w	r2, sl, #32
  405a1e:	e6c4      	b.n	4057aa <_realloc_r+0x112>
  405a20:	4621      	mov	r1, r4
  405a22:	4638      	mov	r0, r7
  405a24:	f8cd c004 	str.w	ip, [sp, #4]
  405a28:	f7ff fdd2 	bl	4055d0 <memmove>
  405a2c:	f8dd c004 	ldr.w	ip, [sp, #4]
  405a30:	e783      	b.n	40593a <_realloc_r+0x2a2>
  405a32:	68a3      	ldr	r3, [r4, #8]
  405a34:	f8ca 3010 	str.w	r3, [sl, #16]
  405a38:	68e3      	ldr	r3, [r4, #12]
  405a3a:	f8ca 3014 	str.w	r3, [sl, #20]
  405a3e:	2a24      	cmp	r2, #36	; 0x24
  405a40:	d003      	beq.n	405a4a <_realloc_r+0x3b2>
  405a42:	3410      	adds	r4, #16
  405a44:	f10a 0318 	add.w	r3, sl, #24
  405a48:	e771      	b.n	40592e <_realloc_r+0x296>
  405a4a:	6923      	ldr	r3, [r4, #16]
  405a4c:	f8ca 3018 	str.w	r3, [sl, #24]
  405a50:	6963      	ldr	r3, [r4, #20]
  405a52:	f8ca 301c 	str.w	r3, [sl, #28]
  405a56:	3418      	adds	r4, #24
  405a58:	f10a 0320 	add.w	r3, sl, #32
  405a5c:	e767      	b.n	40592e <_realloc_r+0x296>
  405a5e:	bf00      	nop
  405a60:	200004e0 	.word	0x200004e0

00405a64 <_sbrk_r>:
  405a64:	b538      	push	{r3, r4, r5, lr}
  405a66:	4c07      	ldr	r4, [pc, #28]	; (405a84 <_sbrk_r+0x20>)
  405a68:	2300      	movs	r3, #0
  405a6a:	4605      	mov	r5, r0
  405a6c:	4608      	mov	r0, r1
  405a6e:	6023      	str	r3, [r4, #0]
  405a70:	f000 fa98 	bl	405fa4 <_sbrk>
  405a74:	1c43      	adds	r3, r0, #1
  405a76:	d000      	beq.n	405a7a <_sbrk_r+0x16>
  405a78:	bd38      	pop	{r3, r4, r5, pc}
  405a7a:	6823      	ldr	r3, [r4, #0]
  405a7c:	2b00      	cmp	r3, #0
  405a7e:	d0fb      	beq.n	405a78 <_sbrk_r+0x14>
  405a80:	602b      	str	r3, [r5, #0]
  405a82:	bd38      	pop	{r3, r4, r5, pc}
  405a84:	2001bef4 	.word	0x2001bef4

00405a88 <_raise_r>:
  405a88:	291f      	cmp	r1, #31
  405a8a:	b538      	push	{r3, r4, r5, lr}
  405a8c:	460c      	mov	r4, r1
  405a8e:	4605      	mov	r5, r0
  405a90:	d820      	bhi.n	405ad4 <_raise_r+0x4c>
  405a92:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  405a96:	b19a      	cbz	r2, 405ac0 <_raise_r+0x38>
  405a98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  405a9c:	b183      	cbz	r3, 405ac0 <_raise_r+0x38>
  405a9e:	2b01      	cmp	r3, #1
  405aa0:	d00c      	beq.n	405abc <_raise_r+0x34>
  405aa2:	1c59      	adds	r1, r3, #1
  405aa4:	d006      	beq.n	405ab4 <_raise_r+0x2c>
  405aa6:	2500      	movs	r5, #0
  405aa8:	4620      	mov	r0, r4
  405aaa:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  405aae:	4798      	blx	r3
  405ab0:	4628      	mov	r0, r5
  405ab2:	bd38      	pop	{r3, r4, r5, pc}
  405ab4:	2316      	movs	r3, #22
  405ab6:	6003      	str	r3, [r0, #0]
  405ab8:	2001      	movs	r0, #1
  405aba:	bd38      	pop	{r3, r4, r5, pc}
  405abc:	2000      	movs	r0, #0
  405abe:	bd38      	pop	{r3, r4, r5, pc}
  405ac0:	4628      	mov	r0, r5
  405ac2:	f000 f829 	bl	405b18 <_getpid_r>
  405ac6:	4622      	mov	r2, r4
  405ac8:	4601      	mov	r1, r0
  405aca:	4628      	mov	r0, r5
  405acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405ad0:	f000 b80e 	b.w	405af0 <_kill_r>
  405ad4:	2316      	movs	r3, #22
  405ad6:	6003      	str	r3, [r0, #0]
  405ad8:	f04f 30ff 	mov.w	r0, #4294967295
  405adc:	bd38      	pop	{r3, r4, r5, pc}
  405ade:	bf00      	nop

00405ae0 <raise>:
  405ae0:	4b02      	ldr	r3, [pc, #8]	; (405aec <raise+0xc>)
  405ae2:	4601      	mov	r1, r0
  405ae4:	6818      	ldr	r0, [r3, #0]
  405ae6:	f7ff bfcf 	b.w	405a88 <_raise_r>
  405aea:	bf00      	nop
  405aec:	200004b8 	.word	0x200004b8

00405af0 <_kill_r>:
  405af0:	b538      	push	{r3, r4, r5, lr}
  405af2:	4c08      	ldr	r4, [pc, #32]	; (405b14 <_kill_r+0x24>)
  405af4:	2300      	movs	r3, #0
  405af6:	4605      	mov	r5, r0
  405af8:	4608      	mov	r0, r1
  405afa:	4611      	mov	r1, r2
  405afc:	6023      	str	r3, [r4, #0]
  405afe:	f000 fa39 	bl	405f74 <_kill>
  405b02:	1c43      	adds	r3, r0, #1
  405b04:	d000      	beq.n	405b08 <_kill_r+0x18>
  405b06:	bd38      	pop	{r3, r4, r5, pc}
  405b08:	6823      	ldr	r3, [r4, #0]
  405b0a:	2b00      	cmp	r3, #0
  405b0c:	d0fb      	beq.n	405b06 <_kill_r+0x16>
  405b0e:	602b      	str	r3, [r5, #0]
  405b10:	bd38      	pop	{r3, r4, r5, pc}
  405b12:	bf00      	nop
  405b14:	2001bef4 	.word	0x2001bef4

00405b18 <_getpid_r>:
  405b18:	f000 ba1c 	b.w	405f54 <_getpid>

00405b1c <__sread>:
  405b1c:	b510      	push	{r4, lr}
  405b1e:	460c      	mov	r4, r1
  405b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405b24:	f000 f9f2 	bl	405f0c <_read_r>
  405b28:	2800      	cmp	r0, #0
  405b2a:	db03      	blt.n	405b34 <__sread+0x18>
  405b2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405b2e:	4403      	add	r3, r0
  405b30:	6523      	str	r3, [r4, #80]	; 0x50
  405b32:	bd10      	pop	{r4, pc}
  405b34:	89a3      	ldrh	r3, [r4, #12]
  405b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405b3a:	81a3      	strh	r3, [r4, #12]
  405b3c:	bd10      	pop	{r4, pc}
  405b3e:	bf00      	nop

00405b40 <__swrite>:
  405b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405b44:	460c      	mov	r4, r1
  405b46:	8989      	ldrh	r1, [r1, #12]
  405b48:	461d      	mov	r5, r3
  405b4a:	05cb      	lsls	r3, r1, #23
  405b4c:	4616      	mov	r6, r2
  405b4e:	4607      	mov	r7, r0
  405b50:	d506      	bpl.n	405b60 <__swrite+0x20>
  405b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405b56:	2200      	movs	r2, #0
  405b58:	2302      	movs	r3, #2
  405b5a:	f000 f9c3 	bl	405ee4 <_lseek_r>
  405b5e:	89a1      	ldrh	r1, [r4, #12]
  405b60:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  405b64:	81a1      	strh	r1, [r4, #12]
  405b66:	4638      	mov	r0, r7
  405b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405b6c:	4632      	mov	r2, r6
  405b6e:	462b      	mov	r3, r5
  405b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405b74:	f000 b8ce 	b.w	405d14 <_write_r>

00405b78 <__sseek>:
  405b78:	b510      	push	{r4, lr}
  405b7a:	460c      	mov	r4, r1
  405b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405b80:	f000 f9b0 	bl	405ee4 <_lseek_r>
  405b84:	89a3      	ldrh	r3, [r4, #12]
  405b86:	1c42      	adds	r2, r0, #1
  405b88:	bf0e      	itee	eq
  405b8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405b8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405b92:	6520      	strne	r0, [r4, #80]	; 0x50
  405b94:	81a3      	strh	r3, [r4, #12]
  405b96:	bd10      	pop	{r4, pc}

00405b98 <__sclose>:
  405b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405b9c:	f000 b922 	b.w	405de4 <_close_r>

00405ba0 <strlen>:
  405ba0:	f020 0103 	bic.w	r1, r0, #3
  405ba4:	f010 0003 	ands.w	r0, r0, #3
  405ba8:	f1c0 0000 	rsb	r0, r0, #0
  405bac:	f851 3b04 	ldr.w	r3, [r1], #4
  405bb0:	f100 0c04 	add.w	ip, r0, #4
  405bb4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  405bb8:	f06f 0200 	mvn.w	r2, #0
  405bbc:	bf1c      	itt	ne
  405bbe:	fa22 f20c 	lsrne.w	r2, r2, ip
  405bc2:	4313      	orrne	r3, r2
  405bc4:	f04f 0c01 	mov.w	ip, #1
  405bc8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  405bcc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  405bd0:	eba3 020c 	sub.w	r2, r3, ip
  405bd4:	ea22 0203 	bic.w	r2, r2, r3
  405bd8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  405bdc:	bf04      	itt	eq
  405bde:	f851 3b04 	ldreq.w	r3, [r1], #4
  405be2:	3004      	addeq	r0, #4
  405be4:	d0f4      	beq.n	405bd0 <strlen+0x30>
  405be6:	f013 0fff 	tst.w	r3, #255	; 0xff
  405bea:	bf1f      	itttt	ne
  405bec:	3001      	addne	r0, #1
  405bee:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  405bf2:	3001      	addne	r0, #1
  405bf4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  405bf8:	bf18      	it	ne
  405bfa:	3001      	addne	r0, #1
  405bfc:	4770      	bx	lr
  405bfe:	bf00      	nop

00405c00 <__swbuf_r>:
  405c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405c02:	460d      	mov	r5, r1
  405c04:	4614      	mov	r4, r2
  405c06:	4607      	mov	r7, r0
  405c08:	b110      	cbz	r0, 405c10 <__swbuf_r+0x10>
  405c0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405c0c:	2b00      	cmp	r3, #0
  405c0e:	d048      	beq.n	405ca2 <__swbuf_r+0xa2>
  405c10:	89a2      	ldrh	r2, [r4, #12]
  405c12:	69a3      	ldr	r3, [r4, #24]
  405c14:	60a3      	str	r3, [r4, #8]
  405c16:	b293      	uxth	r3, r2
  405c18:	0718      	lsls	r0, r3, #28
  405c1a:	d538      	bpl.n	405c8e <__swbuf_r+0x8e>
  405c1c:	6926      	ldr	r6, [r4, #16]
  405c1e:	2e00      	cmp	r6, #0
  405c20:	d035      	beq.n	405c8e <__swbuf_r+0x8e>
  405c22:	0499      	lsls	r1, r3, #18
  405c24:	b2ed      	uxtb	r5, r5
  405c26:	d515      	bpl.n	405c54 <__swbuf_r+0x54>
  405c28:	6823      	ldr	r3, [r4, #0]
  405c2a:	6962      	ldr	r2, [r4, #20]
  405c2c:	1b9e      	subs	r6, r3, r6
  405c2e:	4296      	cmp	r6, r2
  405c30:	da1c      	bge.n	405c6c <__swbuf_r+0x6c>
  405c32:	3601      	adds	r6, #1
  405c34:	68a2      	ldr	r2, [r4, #8]
  405c36:	1c59      	adds	r1, r3, #1
  405c38:	3a01      	subs	r2, #1
  405c3a:	60a2      	str	r2, [r4, #8]
  405c3c:	6021      	str	r1, [r4, #0]
  405c3e:	701d      	strb	r5, [r3, #0]
  405c40:	6963      	ldr	r3, [r4, #20]
  405c42:	42b3      	cmp	r3, r6
  405c44:	d01a      	beq.n	405c7c <__swbuf_r+0x7c>
  405c46:	89a3      	ldrh	r3, [r4, #12]
  405c48:	07db      	lsls	r3, r3, #31
  405c4a:	d501      	bpl.n	405c50 <__swbuf_r+0x50>
  405c4c:	2d0a      	cmp	r5, #10
  405c4e:	d015      	beq.n	405c7c <__swbuf_r+0x7c>
  405c50:	4628      	mov	r0, r5
  405c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405c54:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405c5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405c5e:	6663      	str	r3, [r4, #100]	; 0x64
  405c60:	6823      	ldr	r3, [r4, #0]
  405c62:	81a2      	strh	r2, [r4, #12]
  405c64:	6962      	ldr	r2, [r4, #20]
  405c66:	1b9e      	subs	r6, r3, r6
  405c68:	4296      	cmp	r6, r2
  405c6a:	dbe2      	blt.n	405c32 <__swbuf_r+0x32>
  405c6c:	4638      	mov	r0, r7
  405c6e:	4621      	mov	r1, r4
  405c70:	f7fe fcd8 	bl	404624 <_fflush_r>
  405c74:	b940      	cbnz	r0, 405c88 <__swbuf_r+0x88>
  405c76:	6823      	ldr	r3, [r4, #0]
  405c78:	2601      	movs	r6, #1
  405c7a:	e7db      	b.n	405c34 <__swbuf_r+0x34>
  405c7c:	4638      	mov	r0, r7
  405c7e:	4621      	mov	r1, r4
  405c80:	f7fe fcd0 	bl	404624 <_fflush_r>
  405c84:	2800      	cmp	r0, #0
  405c86:	d0e3      	beq.n	405c50 <__swbuf_r+0x50>
  405c88:	f04f 30ff 	mov.w	r0, #4294967295
  405c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405c8e:	4638      	mov	r0, r7
  405c90:	4621      	mov	r1, r4
  405c92:	f7fe fba3 	bl	4043dc <__swsetup_r>
  405c96:	2800      	cmp	r0, #0
  405c98:	d1f6      	bne.n	405c88 <__swbuf_r+0x88>
  405c9a:	89a2      	ldrh	r2, [r4, #12]
  405c9c:	6926      	ldr	r6, [r4, #16]
  405c9e:	b293      	uxth	r3, r2
  405ca0:	e7bf      	b.n	405c22 <__swbuf_r+0x22>
  405ca2:	f7fe fcdb 	bl	40465c <__sinit>
  405ca6:	e7b3      	b.n	405c10 <__swbuf_r+0x10>

00405ca8 <_wcrtomb_r>:
  405ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405cac:	461e      	mov	r6, r3
  405cae:	b086      	sub	sp, #24
  405cb0:	460c      	mov	r4, r1
  405cb2:	4605      	mov	r5, r0
  405cb4:	4617      	mov	r7, r2
  405cb6:	4b0f      	ldr	r3, [pc, #60]	; (405cf4 <_wcrtomb_r+0x4c>)
  405cb8:	b191      	cbz	r1, 405ce0 <_wcrtomb_r+0x38>
  405cba:	f8d3 8000 	ldr.w	r8, [r3]
  405cbe:	f7ff f88f 	bl	404de0 <__locale_charset>
  405cc2:	9600      	str	r6, [sp, #0]
  405cc4:	4603      	mov	r3, r0
  405cc6:	4621      	mov	r1, r4
  405cc8:	463a      	mov	r2, r7
  405cca:	4628      	mov	r0, r5
  405ccc:	47c0      	blx	r8
  405cce:	1c43      	adds	r3, r0, #1
  405cd0:	d103      	bne.n	405cda <_wcrtomb_r+0x32>
  405cd2:	2200      	movs	r2, #0
  405cd4:	238a      	movs	r3, #138	; 0x8a
  405cd6:	6032      	str	r2, [r6, #0]
  405cd8:	602b      	str	r3, [r5, #0]
  405cda:	b006      	add	sp, #24
  405cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ce0:	681f      	ldr	r7, [r3, #0]
  405ce2:	f7ff f87d 	bl	404de0 <__locale_charset>
  405ce6:	9600      	str	r6, [sp, #0]
  405ce8:	4603      	mov	r3, r0
  405cea:	4622      	mov	r2, r4
  405cec:	4628      	mov	r0, r5
  405cee:	a903      	add	r1, sp, #12
  405cf0:	47b8      	blx	r7
  405cf2:	e7ec      	b.n	405cce <_wcrtomb_r+0x26>
  405cf4:	200008f0 	.word	0x200008f0

00405cf8 <__ascii_wctomb>:
  405cf8:	b121      	cbz	r1, 405d04 <__ascii_wctomb+0xc>
  405cfa:	2aff      	cmp	r2, #255	; 0xff
  405cfc:	d804      	bhi.n	405d08 <__ascii_wctomb+0x10>
  405cfe:	700a      	strb	r2, [r1, #0]
  405d00:	2001      	movs	r0, #1
  405d02:	4770      	bx	lr
  405d04:	4608      	mov	r0, r1
  405d06:	4770      	bx	lr
  405d08:	238a      	movs	r3, #138	; 0x8a
  405d0a:	6003      	str	r3, [r0, #0]
  405d0c:	f04f 30ff 	mov.w	r0, #4294967295
  405d10:	4770      	bx	lr
  405d12:	bf00      	nop

00405d14 <_write_r>:
  405d14:	b570      	push	{r4, r5, r6, lr}
  405d16:	4c08      	ldr	r4, [pc, #32]	; (405d38 <_write_r+0x24>)
  405d18:	4606      	mov	r6, r0
  405d1a:	2500      	movs	r5, #0
  405d1c:	4608      	mov	r0, r1
  405d1e:	4611      	mov	r1, r2
  405d20:	461a      	mov	r2, r3
  405d22:	6025      	str	r5, [r4, #0]
  405d24:	f000 f958 	bl	405fd8 <_write>
  405d28:	1c43      	adds	r3, r0, #1
  405d2a:	d000      	beq.n	405d2e <_write_r+0x1a>
  405d2c:	bd70      	pop	{r4, r5, r6, pc}
  405d2e:	6823      	ldr	r3, [r4, #0]
  405d30:	2b00      	cmp	r3, #0
  405d32:	d0fb      	beq.n	405d2c <_write_r+0x18>
  405d34:	6033      	str	r3, [r6, #0]
  405d36:	bd70      	pop	{r4, r5, r6, pc}
  405d38:	2001bef4 	.word	0x2001bef4

00405d3c <__register_exitproc>:
  405d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  405d3e:	4c27      	ldr	r4, [pc, #156]	; (405ddc <__register_exitproc+0xa0>)
  405d40:	6826      	ldr	r6, [r4, #0]
  405d42:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  405d46:	b085      	sub	sp, #20
  405d48:	4607      	mov	r7, r0
  405d4a:	2c00      	cmp	r4, #0
  405d4c:	d041      	beq.n	405dd2 <__register_exitproc+0x96>
  405d4e:	6865      	ldr	r5, [r4, #4]
  405d50:	2d1f      	cmp	r5, #31
  405d52:	dd1e      	ble.n	405d92 <__register_exitproc+0x56>
  405d54:	4822      	ldr	r0, [pc, #136]	; (405de0 <__register_exitproc+0xa4>)
  405d56:	b918      	cbnz	r0, 405d60 <__register_exitproc+0x24>
  405d58:	f04f 30ff 	mov.w	r0, #4294967295
  405d5c:	b005      	add	sp, #20
  405d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d60:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405d64:	9103      	str	r1, [sp, #12]
  405d66:	9202      	str	r2, [sp, #8]
  405d68:	9301      	str	r3, [sp, #4]
  405d6a:	f3af 8000 	nop.w
  405d6e:	9903      	ldr	r1, [sp, #12]
  405d70:	9a02      	ldr	r2, [sp, #8]
  405d72:	9b01      	ldr	r3, [sp, #4]
  405d74:	4604      	mov	r4, r0
  405d76:	2800      	cmp	r0, #0
  405d78:	d0ee      	beq.n	405d58 <__register_exitproc+0x1c>
  405d7a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  405d7e:	6025      	str	r5, [r4, #0]
  405d80:	2000      	movs	r0, #0
  405d82:	6060      	str	r0, [r4, #4]
  405d84:	4605      	mov	r5, r0
  405d86:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  405d8a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  405d8e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  405d92:	b93f      	cbnz	r7, 405da4 <__register_exitproc+0x68>
  405d94:	1cab      	adds	r3, r5, #2
  405d96:	2000      	movs	r0, #0
  405d98:	3501      	adds	r5, #1
  405d9a:	6065      	str	r5, [r4, #4]
  405d9c:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  405da0:	b005      	add	sp, #20
  405da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405da4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  405da8:	f04f 0c01 	mov.w	ip, #1
  405dac:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  405db0:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  405db4:	fa0c f205 	lsl.w	r2, ip, r5
  405db8:	4316      	orrs	r6, r2
  405dba:	2f02      	cmp	r7, #2
  405dbc:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  405dc0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  405dc4:	d1e6      	bne.n	405d94 <__register_exitproc+0x58>
  405dc6:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  405dca:	431a      	orrs	r2, r3
  405dcc:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  405dd0:	e7e0      	b.n	405d94 <__register_exitproc+0x58>
  405dd2:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  405dd6:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  405dda:	e7b8      	b.n	405d4e <__register_exitproc+0x12>
  405ddc:	00407068 	.word	0x00407068
  405de0:	00000000 	.word	0x00000000

00405de4 <_close_r>:
  405de4:	b538      	push	{r3, r4, r5, lr}
  405de6:	4c07      	ldr	r4, [pc, #28]	; (405e04 <_close_r+0x20>)
  405de8:	2300      	movs	r3, #0
  405dea:	4605      	mov	r5, r0
  405dec:	4608      	mov	r0, r1
  405dee:	6023      	str	r3, [r4, #0]
  405df0:	f000 f8a0 	bl	405f34 <_close>
  405df4:	1c43      	adds	r3, r0, #1
  405df6:	d000      	beq.n	405dfa <_close_r+0x16>
  405df8:	bd38      	pop	{r3, r4, r5, pc}
  405dfa:	6823      	ldr	r3, [r4, #0]
  405dfc:	2b00      	cmp	r3, #0
  405dfe:	d0fb      	beq.n	405df8 <_close_r+0x14>
  405e00:	602b      	str	r3, [r5, #0]
  405e02:	bd38      	pop	{r3, r4, r5, pc}
  405e04:	2001bef4 	.word	0x2001bef4

00405e08 <_fclose_r>:
  405e08:	b570      	push	{r4, r5, r6, lr}
  405e0a:	460c      	mov	r4, r1
  405e0c:	4605      	mov	r5, r0
  405e0e:	b131      	cbz	r1, 405e1e <_fclose_r+0x16>
  405e10:	b110      	cbz	r0, 405e18 <_fclose_r+0x10>
  405e12:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405e14:	2b00      	cmp	r3, #0
  405e16:	d02f      	beq.n	405e78 <_fclose_r+0x70>
  405e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e1c:	b90b      	cbnz	r3, 405e22 <_fclose_r+0x1a>
  405e1e:	2000      	movs	r0, #0
  405e20:	bd70      	pop	{r4, r5, r6, pc}
  405e22:	4628      	mov	r0, r5
  405e24:	4621      	mov	r1, r4
  405e26:	f7fe fbfd 	bl	404624 <_fflush_r>
  405e2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405e2c:	4606      	mov	r6, r0
  405e2e:	b133      	cbz	r3, 405e3e <_fclose_r+0x36>
  405e30:	4628      	mov	r0, r5
  405e32:	69e1      	ldr	r1, [r4, #28]
  405e34:	4798      	blx	r3
  405e36:	2800      	cmp	r0, #0
  405e38:	bfb8      	it	lt
  405e3a:	f04f 36ff 	movlt.w	r6, #4294967295
  405e3e:	89a3      	ldrh	r3, [r4, #12]
  405e40:	061b      	lsls	r3, r3, #24
  405e42:	d41c      	bmi.n	405e7e <_fclose_r+0x76>
  405e44:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405e46:	b141      	cbz	r1, 405e5a <_fclose_r+0x52>
  405e48:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405e4c:	4299      	cmp	r1, r3
  405e4e:	d002      	beq.n	405e56 <_fclose_r+0x4e>
  405e50:	4628      	mov	r0, r5
  405e52:	f7fe fd45 	bl	4048e0 <_free_r>
  405e56:	2300      	movs	r3, #0
  405e58:	6323      	str	r3, [r4, #48]	; 0x30
  405e5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  405e5c:	b121      	cbz	r1, 405e68 <_fclose_r+0x60>
  405e5e:	4628      	mov	r0, r5
  405e60:	f7fe fd3e 	bl	4048e0 <_free_r>
  405e64:	2300      	movs	r3, #0
  405e66:	6463      	str	r3, [r4, #68]	; 0x44
  405e68:	f7fe fc72 	bl	404750 <__sfp_lock_acquire>
  405e6c:	2300      	movs	r3, #0
  405e6e:	81a3      	strh	r3, [r4, #12]
  405e70:	f7fe fc70 	bl	404754 <__sfp_lock_release>
  405e74:	4630      	mov	r0, r6
  405e76:	bd70      	pop	{r4, r5, r6, pc}
  405e78:	f7fe fbf0 	bl	40465c <__sinit>
  405e7c:	e7cc      	b.n	405e18 <_fclose_r+0x10>
  405e7e:	4628      	mov	r0, r5
  405e80:	6921      	ldr	r1, [r4, #16]
  405e82:	f7fe fd2d 	bl	4048e0 <_free_r>
  405e86:	e7dd      	b.n	405e44 <_fclose_r+0x3c>

00405e88 <fclose>:
  405e88:	4b02      	ldr	r3, [pc, #8]	; (405e94 <fclose+0xc>)
  405e8a:	4601      	mov	r1, r0
  405e8c:	6818      	ldr	r0, [r3, #0]
  405e8e:	f7ff bfbb 	b.w	405e08 <_fclose_r>
  405e92:	bf00      	nop
  405e94:	200004b8 	.word	0x200004b8

00405e98 <_fstat_r>:
  405e98:	b538      	push	{r3, r4, r5, lr}
  405e9a:	4c08      	ldr	r4, [pc, #32]	; (405ebc <_fstat_r+0x24>)
  405e9c:	2300      	movs	r3, #0
  405e9e:	4605      	mov	r5, r0
  405ea0:	4608      	mov	r0, r1
  405ea2:	4611      	mov	r1, r2
  405ea4:	6023      	str	r3, [r4, #0]
  405ea6:	f000 f84d 	bl	405f44 <_fstat>
  405eaa:	1c43      	adds	r3, r0, #1
  405eac:	d000      	beq.n	405eb0 <_fstat_r+0x18>
  405eae:	bd38      	pop	{r3, r4, r5, pc}
  405eb0:	6823      	ldr	r3, [r4, #0]
  405eb2:	2b00      	cmp	r3, #0
  405eb4:	d0fb      	beq.n	405eae <_fstat_r+0x16>
  405eb6:	602b      	str	r3, [r5, #0]
  405eb8:	bd38      	pop	{r3, r4, r5, pc}
  405eba:	bf00      	nop
  405ebc:	2001bef4 	.word	0x2001bef4

00405ec0 <_isatty_r>:
  405ec0:	b538      	push	{r3, r4, r5, lr}
  405ec2:	4c07      	ldr	r4, [pc, #28]	; (405ee0 <_isatty_r+0x20>)
  405ec4:	2300      	movs	r3, #0
  405ec6:	4605      	mov	r5, r0
  405ec8:	4608      	mov	r0, r1
  405eca:	6023      	str	r3, [r4, #0]
  405ecc:	f000 f84a 	bl	405f64 <_isatty>
  405ed0:	1c43      	adds	r3, r0, #1
  405ed2:	d000      	beq.n	405ed6 <_isatty_r+0x16>
  405ed4:	bd38      	pop	{r3, r4, r5, pc}
  405ed6:	6823      	ldr	r3, [r4, #0]
  405ed8:	2b00      	cmp	r3, #0
  405eda:	d0fb      	beq.n	405ed4 <_isatty_r+0x14>
  405edc:	602b      	str	r3, [r5, #0]
  405ede:	bd38      	pop	{r3, r4, r5, pc}
  405ee0:	2001bef4 	.word	0x2001bef4

00405ee4 <_lseek_r>:
  405ee4:	b570      	push	{r4, r5, r6, lr}
  405ee6:	4c08      	ldr	r4, [pc, #32]	; (405f08 <_lseek_r+0x24>)
  405ee8:	4606      	mov	r6, r0
  405eea:	2500      	movs	r5, #0
  405eec:	4608      	mov	r0, r1
  405eee:	4611      	mov	r1, r2
  405ef0:	461a      	mov	r2, r3
  405ef2:	6025      	str	r5, [r4, #0]
  405ef4:	f000 f846 	bl	405f84 <_lseek>
  405ef8:	1c43      	adds	r3, r0, #1
  405efa:	d000      	beq.n	405efe <_lseek_r+0x1a>
  405efc:	bd70      	pop	{r4, r5, r6, pc}
  405efe:	6823      	ldr	r3, [r4, #0]
  405f00:	2b00      	cmp	r3, #0
  405f02:	d0fb      	beq.n	405efc <_lseek_r+0x18>
  405f04:	6033      	str	r3, [r6, #0]
  405f06:	bd70      	pop	{r4, r5, r6, pc}
  405f08:	2001bef4 	.word	0x2001bef4

00405f0c <_read_r>:
  405f0c:	b570      	push	{r4, r5, r6, lr}
  405f0e:	4c08      	ldr	r4, [pc, #32]	; (405f30 <_read_r+0x24>)
  405f10:	4606      	mov	r6, r0
  405f12:	2500      	movs	r5, #0
  405f14:	4608      	mov	r0, r1
  405f16:	4611      	mov	r1, r2
  405f18:	461a      	mov	r2, r3
  405f1a:	6025      	str	r5, [r4, #0]
  405f1c:	f000 f83a 	bl	405f94 <_read>
  405f20:	1c43      	adds	r3, r0, #1
  405f22:	d000      	beq.n	405f26 <_read_r+0x1a>
  405f24:	bd70      	pop	{r4, r5, r6, pc}
  405f26:	6823      	ldr	r3, [r4, #0]
  405f28:	2b00      	cmp	r3, #0
  405f2a:	d0fb      	beq.n	405f24 <_read_r+0x18>
  405f2c:	6033      	str	r3, [r6, #0]
  405f2e:	bd70      	pop	{r4, r5, r6, pc}
  405f30:	2001bef4 	.word	0x2001bef4

00405f34 <_close>:
  405f34:	4b02      	ldr	r3, [pc, #8]	; (405f40 <_close+0xc>)
  405f36:	2258      	movs	r2, #88	; 0x58
  405f38:	601a      	str	r2, [r3, #0]
  405f3a:	f04f 30ff 	mov.w	r0, #4294967295
  405f3e:	4770      	bx	lr
  405f40:	2001bef4 	.word	0x2001bef4

00405f44 <_fstat>:
  405f44:	4b02      	ldr	r3, [pc, #8]	; (405f50 <_fstat+0xc>)
  405f46:	2258      	movs	r2, #88	; 0x58
  405f48:	601a      	str	r2, [r3, #0]
  405f4a:	f04f 30ff 	mov.w	r0, #4294967295
  405f4e:	4770      	bx	lr
  405f50:	2001bef4 	.word	0x2001bef4

00405f54 <_getpid>:
  405f54:	4b02      	ldr	r3, [pc, #8]	; (405f60 <_getpid+0xc>)
  405f56:	2258      	movs	r2, #88	; 0x58
  405f58:	601a      	str	r2, [r3, #0]
  405f5a:	f04f 30ff 	mov.w	r0, #4294967295
  405f5e:	4770      	bx	lr
  405f60:	2001bef4 	.word	0x2001bef4

00405f64 <_isatty>:
  405f64:	4b02      	ldr	r3, [pc, #8]	; (405f70 <_isatty+0xc>)
  405f66:	2258      	movs	r2, #88	; 0x58
  405f68:	601a      	str	r2, [r3, #0]
  405f6a:	2000      	movs	r0, #0
  405f6c:	4770      	bx	lr
  405f6e:	bf00      	nop
  405f70:	2001bef4 	.word	0x2001bef4

00405f74 <_kill>:
  405f74:	4b02      	ldr	r3, [pc, #8]	; (405f80 <_kill+0xc>)
  405f76:	2258      	movs	r2, #88	; 0x58
  405f78:	601a      	str	r2, [r3, #0]
  405f7a:	f04f 30ff 	mov.w	r0, #4294967295
  405f7e:	4770      	bx	lr
  405f80:	2001bef4 	.word	0x2001bef4

00405f84 <_lseek>:
  405f84:	4b02      	ldr	r3, [pc, #8]	; (405f90 <_lseek+0xc>)
  405f86:	2258      	movs	r2, #88	; 0x58
  405f88:	601a      	str	r2, [r3, #0]
  405f8a:	f04f 30ff 	mov.w	r0, #4294967295
  405f8e:	4770      	bx	lr
  405f90:	2001bef4 	.word	0x2001bef4

00405f94 <_read>:
  405f94:	4b02      	ldr	r3, [pc, #8]	; (405fa0 <_read+0xc>)
  405f96:	2258      	movs	r2, #88	; 0x58
  405f98:	601a      	str	r2, [r3, #0]
  405f9a:	f04f 30ff 	mov.w	r0, #4294967295
  405f9e:	4770      	bx	lr
  405fa0:	2001bef4 	.word	0x2001bef4

00405fa4 <_sbrk>:
  405fa4:	4a09      	ldr	r2, [pc, #36]	; (405fcc <_sbrk+0x28>)
  405fa6:	6813      	ldr	r3, [r2, #0]
  405fa8:	b163      	cbz	r3, 405fc4 <_sbrk+0x20>
  405faa:	4418      	add	r0, r3
  405fac:	4669      	mov	r1, sp
  405fae:	4288      	cmp	r0, r1
  405fb0:	d802      	bhi.n	405fb8 <_sbrk+0x14>
  405fb2:	6010      	str	r0, [r2, #0]
  405fb4:	4618      	mov	r0, r3
  405fb6:	4770      	bx	lr
  405fb8:	4b05      	ldr	r3, [pc, #20]	; (405fd0 <_sbrk+0x2c>)
  405fba:	220c      	movs	r2, #12
  405fbc:	601a      	str	r2, [r3, #0]
  405fbe:	f04f 30ff 	mov.w	r0, #4294967295
  405fc2:	4770      	bx	lr
  405fc4:	4b03      	ldr	r3, [pc, #12]	; (405fd4 <_sbrk+0x30>)
  405fc6:	6013      	str	r3, [r2, #0]
  405fc8:	e7ef      	b.n	405faa <_sbrk+0x6>
  405fca:	bf00      	nop
  405fcc:	20000954 	.word	0x20000954
  405fd0:	2001bef4 	.word	0x2001bef4
  405fd4:	2001eef8 	.word	0x2001eef8

00405fd8 <_write>:
  405fd8:	4b02      	ldr	r3, [pc, #8]	; (405fe4 <_write+0xc>)
  405fda:	2258      	movs	r2, #88	; 0x58
  405fdc:	601a      	str	r2, [r3, #0]
  405fde:	f04f 30ff 	mov.w	r0, #4294967295
  405fe2:	4770      	bx	lr
  405fe4:	2001bef4 	.word	0x2001bef4

00405fe8 <_exit>:
  405fe8:	e7fe      	b.n	405fe8 <_exit>
  405fea:	bf00      	nop

00405fec <__aeabi_uldivmod>:
  405fec:	b94b      	cbnz	r3, 406002 <__aeabi_uldivmod+0x16>
  405fee:	b942      	cbnz	r2, 406002 <__aeabi_uldivmod+0x16>
  405ff0:	2900      	cmp	r1, #0
  405ff2:	bf08      	it	eq
  405ff4:	2800      	cmpeq	r0, #0
  405ff6:	d002      	beq.n	405ffe <__aeabi_uldivmod+0x12>
  405ff8:	f04f 31ff 	mov.w	r1, #4294967295
  405ffc:	4608      	mov	r0, r1
  405ffe:	f000 b83b 	b.w	406078 <__aeabi_idiv0>
  406002:	b082      	sub	sp, #8
  406004:	46ec      	mov	ip, sp
  406006:	e92d 5000 	stmdb	sp!, {ip, lr}
  40600a:	f000 f81d 	bl	406048 <__gnu_uldivmod_helper>
  40600e:	f8dd e004 	ldr.w	lr, [sp, #4]
  406012:	b002      	add	sp, #8
  406014:	bc0c      	pop	{r2, r3}
  406016:	4770      	bx	lr

00406018 <__gnu_ldivmod_helper>:
  406018:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40601c:	9e06      	ldr	r6, [sp, #24]
  40601e:	4614      	mov	r4, r2
  406020:	461d      	mov	r5, r3
  406022:	4680      	mov	r8, r0
  406024:	4689      	mov	r9, r1
  406026:	f000 f829 	bl	40607c <__divdi3>
  40602a:	fb04 f301 	mul.w	r3, r4, r1
  40602e:	fb00 3305 	mla	r3, r0, r5, r3
  406032:	fba4 4500 	umull	r4, r5, r4, r0
  406036:	441d      	add	r5, r3
  406038:	ebb8 0404 	subs.w	r4, r8, r4
  40603c:	eb69 0505 	sbc.w	r5, r9, r5
  406040:	e9c6 4500 	strd	r4, r5, [r6]
  406044:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00406048 <__gnu_uldivmod_helper>:
  406048:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40604c:	9e06      	ldr	r6, [sp, #24]
  40604e:	4614      	mov	r4, r2
  406050:	4680      	mov	r8, r0
  406052:	4689      	mov	r9, r1
  406054:	461d      	mov	r5, r3
  406056:	f000 f95d 	bl	406314 <__udivdi3>
  40605a:	fb00 f505 	mul.w	r5, r0, r5
  40605e:	fb04 5301 	mla	r3, r4, r1, r5
  406062:	fba0 4504 	umull	r4, r5, r0, r4
  406066:	441d      	add	r5, r3
  406068:	ebb8 0404 	subs.w	r4, r8, r4
  40606c:	eb69 0505 	sbc.w	r5, r9, r5
  406070:	e9c6 4500 	strd	r4, r5, [r6]
  406074:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00406078 <__aeabi_idiv0>:
  406078:	4770      	bx	lr
  40607a:	bf00      	nop

0040607c <__divdi3>:
  40607c:	2900      	cmp	r1, #0
  40607e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  406082:	f2c0 809f 	blt.w	4061c4 <__divdi3+0x148>
  406086:	2400      	movs	r4, #0
  406088:	2b00      	cmp	r3, #0
  40608a:	f2c0 8096 	blt.w	4061ba <__divdi3+0x13e>
  40608e:	4615      	mov	r5, r2
  406090:	4606      	mov	r6, r0
  406092:	460f      	mov	r7, r1
  406094:	2b00      	cmp	r3, #0
  406096:	d13e      	bne.n	406116 <__divdi3+0x9a>
  406098:	428a      	cmp	r2, r1
  40609a:	d957      	bls.n	40614c <__divdi3+0xd0>
  40609c:	fab2 f382 	clz	r3, r2
  4060a0:	b14b      	cbz	r3, 4060b6 <__divdi3+0x3a>
  4060a2:	f1c3 0220 	rsb	r2, r3, #32
  4060a6:	fa01 f703 	lsl.w	r7, r1, r3
  4060aa:	fa20 f202 	lsr.w	r2, r0, r2
  4060ae:	409d      	lsls	r5, r3
  4060b0:	4317      	orrs	r7, r2
  4060b2:	fa00 f603 	lsl.w	r6, r0, r3
  4060b6:	0c29      	lsrs	r1, r5, #16
  4060b8:	fbb7 f2f1 	udiv	r2, r7, r1
  4060bc:	0c33      	lsrs	r3, r6, #16
  4060be:	fb01 7c12 	mls	ip, r1, r2, r7
  4060c2:	b2a8      	uxth	r0, r5
  4060c4:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  4060c8:	fb00 f302 	mul.w	r3, r0, r2
  4060cc:	42bb      	cmp	r3, r7
  4060ce:	d909      	bls.n	4060e4 <__divdi3+0x68>
  4060d0:	197f      	adds	r7, r7, r5
  4060d2:	f102 3cff 	add.w	ip, r2, #4294967295
  4060d6:	f080 8101 	bcs.w	4062dc <__divdi3+0x260>
  4060da:	42bb      	cmp	r3, r7
  4060dc:	f240 80fe 	bls.w	4062dc <__divdi3+0x260>
  4060e0:	3a02      	subs	r2, #2
  4060e2:	442f      	add	r7, r5
  4060e4:	1aff      	subs	r7, r7, r3
  4060e6:	fbb7 f3f1 	udiv	r3, r7, r1
  4060ea:	b2b6      	uxth	r6, r6
  4060ec:	fb01 7113 	mls	r1, r1, r3, r7
  4060f0:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  4060f4:	fb00 f003 	mul.w	r0, r0, r3
  4060f8:	4288      	cmp	r0, r1
  4060fa:	d908      	bls.n	40610e <__divdi3+0x92>
  4060fc:	1949      	adds	r1, r1, r5
  4060fe:	f103 37ff 	add.w	r7, r3, #4294967295
  406102:	f080 80ed 	bcs.w	4062e0 <__divdi3+0x264>
  406106:	4288      	cmp	r0, r1
  406108:	f240 80ea 	bls.w	4062e0 <__divdi3+0x264>
  40610c:	3b02      	subs	r3, #2
  40610e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  406112:	2300      	movs	r3, #0
  406114:	e003      	b.n	40611e <__divdi3+0xa2>
  406116:	428b      	cmp	r3, r1
  406118:	d90a      	bls.n	406130 <__divdi3+0xb4>
  40611a:	2300      	movs	r3, #0
  40611c:	461a      	mov	r2, r3
  40611e:	4610      	mov	r0, r2
  406120:	4619      	mov	r1, r3
  406122:	b114      	cbz	r4, 40612a <__divdi3+0xae>
  406124:	4240      	negs	r0, r0
  406126:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40612a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40612e:	4770      	bx	lr
  406130:	fab3 f883 	clz	r8, r3
  406134:	f1b8 0f00 	cmp.w	r8, #0
  406138:	f040 8084 	bne.w	406244 <__divdi3+0x1c8>
  40613c:	428b      	cmp	r3, r1
  40613e:	d302      	bcc.n	406146 <__divdi3+0xca>
  406140:	4282      	cmp	r2, r0
  406142:	f200 80de 	bhi.w	406302 <__divdi3+0x286>
  406146:	2300      	movs	r3, #0
  406148:	2201      	movs	r2, #1
  40614a:	e7e8      	b.n	40611e <__divdi3+0xa2>
  40614c:	b912      	cbnz	r2, 406154 <__divdi3+0xd8>
  40614e:	2301      	movs	r3, #1
  406150:	fbb3 f5f2 	udiv	r5, r3, r2
  406154:	fab5 f285 	clz	r2, r5
  406158:	2a00      	cmp	r2, #0
  40615a:	d139      	bne.n	4061d0 <__divdi3+0x154>
  40615c:	1b7f      	subs	r7, r7, r5
  40615e:	0c28      	lsrs	r0, r5, #16
  406160:	fa1f fc85 	uxth.w	ip, r5
  406164:	2301      	movs	r3, #1
  406166:	fbb7 f1f0 	udiv	r1, r7, r0
  40616a:	0c32      	lsrs	r2, r6, #16
  40616c:	fb00 7711 	mls	r7, r0, r1, r7
  406170:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  406174:	fb0c f201 	mul.w	r2, ip, r1
  406178:	42ba      	cmp	r2, r7
  40617a:	d907      	bls.n	40618c <__divdi3+0x110>
  40617c:	197f      	adds	r7, r7, r5
  40617e:	f101 38ff 	add.w	r8, r1, #4294967295
  406182:	d202      	bcs.n	40618a <__divdi3+0x10e>
  406184:	42ba      	cmp	r2, r7
  406186:	f200 80c1 	bhi.w	40630c <__divdi3+0x290>
  40618a:	4641      	mov	r1, r8
  40618c:	1abf      	subs	r7, r7, r2
  40618e:	fbb7 f2f0 	udiv	r2, r7, r0
  406192:	b2b6      	uxth	r6, r6
  406194:	fb00 7012 	mls	r0, r0, r2, r7
  406198:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  40619c:	fb0c fc02 	mul.w	ip, ip, r2
  4061a0:	4584      	cmp	ip, r0
  4061a2:	d907      	bls.n	4061b4 <__divdi3+0x138>
  4061a4:	1940      	adds	r0, r0, r5
  4061a6:	f102 37ff 	add.w	r7, r2, #4294967295
  4061aa:	d202      	bcs.n	4061b2 <__divdi3+0x136>
  4061ac:	4584      	cmp	ip, r0
  4061ae:	f200 80ab 	bhi.w	406308 <__divdi3+0x28c>
  4061b2:	463a      	mov	r2, r7
  4061b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  4061b8:	e7b1      	b.n	40611e <__divdi3+0xa2>
  4061ba:	43e4      	mvns	r4, r4
  4061bc:	4252      	negs	r2, r2
  4061be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4061c2:	e764      	b.n	40608e <__divdi3+0x12>
  4061c4:	4240      	negs	r0, r0
  4061c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4061ca:	f04f 34ff 	mov.w	r4, #4294967295
  4061ce:	e75b      	b.n	406088 <__divdi3+0xc>
  4061d0:	4095      	lsls	r5, r2
  4061d2:	f1c2 0320 	rsb	r3, r2, #32
  4061d6:	fa27 f103 	lsr.w	r1, r7, r3
  4061da:	0c28      	lsrs	r0, r5, #16
  4061dc:	fa26 f303 	lsr.w	r3, r6, r3
  4061e0:	4097      	lsls	r7, r2
  4061e2:	fbb1 f8f0 	udiv	r8, r1, r0
  4061e6:	431f      	orrs	r7, r3
  4061e8:	0c3b      	lsrs	r3, r7, #16
  4061ea:	fb00 1118 	mls	r1, r0, r8, r1
  4061ee:	fa1f fc85 	uxth.w	ip, r5
  4061f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  4061f6:	fb0c f308 	mul.w	r3, ip, r8
  4061fa:	428b      	cmp	r3, r1
  4061fc:	fa06 f602 	lsl.w	r6, r6, r2
  406200:	d908      	bls.n	406214 <__divdi3+0x198>
  406202:	1949      	adds	r1, r1, r5
  406204:	f108 32ff 	add.w	r2, r8, #4294967295
  406208:	d279      	bcs.n	4062fe <__divdi3+0x282>
  40620a:	428b      	cmp	r3, r1
  40620c:	d977      	bls.n	4062fe <__divdi3+0x282>
  40620e:	f1a8 0802 	sub.w	r8, r8, #2
  406212:	4429      	add	r1, r5
  406214:	1ac9      	subs	r1, r1, r3
  406216:	fbb1 f3f0 	udiv	r3, r1, r0
  40621a:	b2bf      	uxth	r7, r7
  40621c:	fb00 1113 	mls	r1, r0, r3, r1
  406220:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  406224:	fb0c f203 	mul.w	r2, ip, r3
  406228:	42ba      	cmp	r2, r7
  40622a:	d907      	bls.n	40623c <__divdi3+0x1c0>
  40622c:	197f      	adds	r7, r7, r5
  40622e:	f103 31ff 	add.w	r1, r3, #4294967295
  406232:	d260      	bcs.n	4062f6 <__divdi3+0x27a>
  406234:	42ba      	cmp	r2, r7
  406236:	d95e      	bls.n	4062f6 <__divdi3+0x27a>
  406238:	3b02      	subs	r3, #2
  40623a:	442f      	add	r7, r5
  40623c:	1abf      	subs	r7, r7, r2
  40623e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  406242:	e790      	b.n	406166 <__divdi3+0xea>
  406244:	f1c8 0220 	rsb	r2, r8, #32
  406248:	fa03 fc08 	lsl.w	ip, r3, r8
  40624c:	fa25 f302 	lsr.w	r3, r5, r2
  406250:	ea43 0c0c 	orr.w	ip, r3, ip
  406254:	ea4f 491c 	mov.w	r9, ip, lsr #16
  406258:	fa21 f302 	lsr.w	r3, r1, r2
  40625c:	fa01 f708 	lsl.w	r7, r1, r8
  406260:	fa20 f202 	lsr.w	r2, r0, r2
  406264:	fbb3 f1f9 	udiv	r1, r3, r9
  406268:	4317      	orrs	r7, r2
  40626a:	fb09 3311 	mls	r3, r9, r1, r3
  40626e:	0c3a      	lsrs	r2, r7, #16
  406270:	fa1f fb8c 	uxth.w	fp, ip
  406274:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  406278:	fb0b fa01 	mul.w	sl, fp, r1
  40627c:	459a      	cmp	sl, r3
  40627e:	fa05 f008 	lsl.w	r0, r5, r8
  406282:	d908      	bls.n	406296 <__divdi3+0x21a>
  406284:	eb13 030c 	adds.w	r3, r3, ip
  406288:	f101 32ff 	add.w	r2, r1, #4294967295
  40628c:	d235      	bcs.n	4062fa <__divdi3+0x27e>
  40628e:	459a      	cmp	sl, r3
  406290:	d933      	bls.n	4062fa <__divdi3+0x27e>
  406292:	3902      	subs	r1, #2
  406294:	4463      	add	r3, ip
  406296:	ebca 0303 	rsb	r3, sl, r3
  40629a:	fbb3 f2f9 	udiv	r2, r3, r9
  40629e:	fb09 3312 	mls	r3, r9, r2, r3
  4062a2:	b2bf      	uxth	r7, r7
  4062a4:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  4062a8:	fb0b f902 	mul.w	r9, fp, r2
  4062ac:	45b9      	cmp	r9, r7
  4062ae:	d908      	bls.n	4062c2 <__divdi3+0x246>
  4062b0:	eb17 070c 	adds.w	r7, r7, ip
  4062b4:	f102 33ff 	add.w	r3, r2, #4294967295
  4062b8:	d21b      	bcs.n	4062f2 <__divdi3+0x276>
  4062ba:	45b9      	cmp	r9, r7
  4062bc:	d919      	bls.n	4062f2 <__divdi3+0x276>
  4062be:	3a02      	subs	r2, #2
  4062c0:	4467      	add	r7, ip
  4062c2:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  4062c6:	fba5 0100 	umull	r0, r1, r5, r0
  4062ca:	ebc9 0707 	rsb	r7, r9, r7
  4062ce:	428f      	cmp	r7, r1
  4062d0:	f04f 0300 	mov.w	r3, #0
  4062d4:	d30a      	bcc.n	4062ec <__divdi3+0x270>
  4062d6:	d005      	beq.n	4062e4 <__divdi3+0x268>
  4062d8:	462a      	mov	r2, r5
  4062da:	e720      	b.n	40611e <__divdi3+0xa2>
  4062dc:	4662      	mov	r2, ip
  4062de:	e701      	b.n	4060e4 <__divdi3+0x68>
  4062e0:	463b      	mov	r3, r7
  4062e2:	e714      	b.n	40610e <__divdi3+0x92>
  4062e4:	fa06 f608 	lsl.w	r6, r6, r8
  4062e8:	4286      	cmp	r6, r0
  4062ea:	d2f5      	bcs.n	4062d8 <__divdi3+0x25c>
  4062ec:	1e6a      	subs	r2, r5, #1
  4062ee:	2300      	movs	r3, #0
  4062f0:	e715      	b.n	40611e <__divdi3+0xa2>
  4062f2:	461a      	mov	r2, r3
  4062f4:	e7e5      	b.n	4062c2 <__divdi3+0x246>
  4062f6:	460b      	mov	r3, r1
  4062f8:	e7a0      	b.n	40623c <__divdi3+0x1c0>
  4062fa:	4611      	mov	r1, r2
  4062fc:	e7cb      	b.n	406296 <__divdi3+0x21a>
  4062fe:	4690      	mov	r8, r2
  406300:	e788      	b.n	406214 <__divdi3+0x198>
  406302:	4643      	mov	r3, r8
  406304:	4642      	mov	r2, r8
  406306:	e70a      	b.n	40611e <__divdi3+0xa2>
  406308:	3a02      	subs	r2, #2
  40630a:	e753      	b.n	4061b4 <__divdi3+0x138>
  40630c:	3902      	subs	r1, #2
  40630e:	442f      	add	r7, r5
  406310:	e73c      	b.n	40618c <__divdi3+0x110>
  406312:	bf00      	nop

00406314 <__udivdi3>:
  406314:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  406318:	4614      	mov	r4, r2
  40631a:	4605      	mov	r5, r0
  40631c:	460e      	mov	r6, r1
  40631e:	2b00      	cmp	r3, #0
  406320:	d143      	bne.n	4063aa <__udivdi3+0x96>
  406322:	428a      	cmp	r2, r1
  406324:	d953      	bls.n	4063ce <__udivdi3+0xba>
  406326:	fab2 f782 	clz	r7, r2
  40632a:	b157      	cbz	r7, 406342 <__udivdi3+0x2e>
  40632c:	f1c7 0620 	rsb	r6, r7, #32
  406330:	fa20 f606 	lsr.w	r6, r0, r6
  406334:	fa01 f307 	lsl.w	r3, r1, r7
  406338:	fa02 f407 	lsl.w	r4, r2, r7
  40633c:	431e      	orrs	r6, r3
  40633e:	fa00 f507 	lsl.w	r5, r0, r7
  406342:	0c21      	lsrs	r1, r4, #16
  406344:	fbb6 f2f1 	udiv	r2, r6, r1
  406348:	0c2b      	lsrs	r3, r5, #16
  40634a:	fb01 6712 	mls	r7, r1, r2, r6
  40634e:	b2a0      	uxth	r0, r4
  406350:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  406354:	fb00 f302 	mul.w	r3, r0, r2
  406358:	42b3      	cmp	r3, r6
  40635a:	d909      	bls.n	406370 <__udivdi3+0x5c>
  40635c:	1936      	adds	r6, r6, r4
  40635e:	f102 37ff 	add.w	r7, r2, #4294967295
  406362:	f080 80f6 	bcs.w	406552 <__udivdi3+0x23e>
  406366:	42b3      	cmp	r3, r6
  406368:	f240 80f3 	bls.w	406552 <__udivdi3+0x23e>
  40636c:	3a02      	subs	r2, #2
  40636e:	4426      	add	r6, r4
  406370:	1af6      	subs	r6, r6, r3
  406372:	fbb6 f3f1 	udiv	r3, r6, r1
  406376:	b2ad      	uxth	r5, r5
  406378:	fb01 6113 	mls	r1, r1, r3, r6
  40637c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  406380:	fb00 f003 	mul.w	r0, r0, r3
  406384:	4288      	cmp	r0, r1
  406386:	d908      	bls.n	40639a <__udivdi3+0x86>
  406388:	1909      	adds	r1, r1, r4
  40638a:	f103 36ff 	add.w	r6, r3, #4294967295
  40638e:	f080 80e2 	bcs.w	406556 <__udivdi3+0x242>
  406392:	4288      	cmp	r0, r1
  406394:	f240 80df 	bls.w	406556 <__udivdi3+0x242>
  406398:	3b02      	subs	r3, #2
  40639a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40639e:	2300      	movs	r3, #0
  4063a0:	4610      	mov	r0, r2
  4063a2:	4619      	mov	r1, r3
  4063a4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4063a8:	4770      	bx	lr
  4063aa:	428b      	cmp	r3, r1
  4063ac:	d84a      	bhi.n	406444 <__udivdi3+0x130>
  4063ae:	fab3 f683 	clz	r6, r3
  4063b2:	2e00      	cmp	r6, #0
  4063b4:	d14d      	bne.n	406452 <__udivdi3+0x13e>
  4063b6:	428b      	cmp	r3, r1
  4063b8:	d302      	bcc.n	4063c0 <__udivdi3+0xac>
  4063ba:	4282      	cmp	r2, r0
  4063bc:	f200 80d6 	bhi.w	40656c <__udivdi3+0x258>
  4063c0:	2300      	movs	r3, #0
  4063c2:	2201      	movs	r2, #1
  4063c4:	4610      	mov	r0, r2
  4063c6:	4619      	mov	r1, r3
  4063c8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4063cc:	4770      	bx	lr
  4063ce:	b912      	cbnz	r2, 4063d6 <__udivdi3+0xc2>
  4063d0:	2401      	movs	r4, #1
  4063d2:	fbb4 f4f2 	udiv	r4, r4, r2
  4063d6:	fab4 f284 	clz	r2, r4
  4063da:	2a00      	cmp	r2, #0
  4063dc:	d17c      	bne.n	4064d8 <__udivdi3+0x1c4>
  4063de:	1b09      	subs	r1, r1, r4
  4063e0:	0c26      	lsrs	r6, r4, #16
  4063e2:	b2a7      	uxth	r7, r4
  4063e4:	2301      	movs	r3, #1
  4063e6:	fbb1 f0f6 	udiv	r0, r1, r6
  4063ea:	0c2a      	lsrs	r2, r5, #16
  4063ec:	fb06 1110 	mls	r1, r6, r0, r1
  4063f0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  4063f4:	fb07 f200 	mul.w	r2, r7, r0
  4063f8:	428a      	cmp	r2, r1
  4063fa:	d907      	bls.n	40640c <__udivdi3+0xf8>
  4063fc:	1909      	adds	r1, r1, r4
  4063fe:	f100 3cff 	add.w	ip, r0, #4294967295
  406402:	d202      	bcs.n	40640a <__udivdi3+0xf6>
  406404:	428a      	cmp	r2, r1
  406406:	f200 80c3 	bhi.w	406590 <__udivdi3+0x27c>
  40640a:	4660      	mov	r0, ip
  40640c:	1a89      	subs	r1, r1, r2
  40640e:	fbb1 f2f6 	udiv	r2, r1, r6
  406412:	b2ad      	uxth	r5, r5
  406414:	fb06 1112 	mls	r1, r6, r2, r1
  406418:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  40641c:	fb07 f702 	mul.w	r7, r7, r2
  406420:	42af      	cmp	r7, r5
  406422:	d908      	bls.n	406436 <__udivdi3+0x122>
  406424:	192c      	adds	r4, r5, r4
  406426:	f102 31ff 	add.w	r1, r2, #4294967295
  40642a:	f080 8096 	bcs.w	40655a <__udivdi3+0x246>
  40642e:	42a7      	cmp	r7, r4
  406430:	f240 8093 	bls.w	40655a <__udivdi3+0x246>
  406434:	3a02      	subs	r2, #2
  406436:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  40643a:	4610      	mov	r0, r2
  40643c:	4619      	mov	r1, r3
  40643e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  406442:	4770      	bx	lr
  406444:	2300      	movs	r3, #0
  406446:	461a      	mov	r2, r3
  406448:	4610      	mov	r0, r2
  40644a:	4619      	mov	r1, r3
  40644c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  406450:	4770      	bx	lr
  406452:	f1c6 0520 	rsb	r5, r6, #32
  406456:	fa22 f405 	lsr.w	r4, r2, r5
  40645a:	40b3      	lsls	r3, r6
  40645c:	431c      	orrs	r4, r3
  40645e:	ea4f 4814 	mov.w	r8, r4, lsr #16
  406462:	fa21 f305 	lsr.w	r3, r1, r5
  406466:	fa01 f706 	lsl.w	r7, r1, r6
  40646a:	fa20 f505 	lsr.w	r5, r0, r5
  40646e:	fbb3 fcf8 	udiv	ip, r3, r8
  406472:	432f      	orrs	r7, r5
  406474:	fb08 331c 	mls	r3, r8, ip, r3
  406478:	0c3d      	lsrs	r5, r7, #16
  40647a:	fa1f fa84 	uxth.w	sl, r4
  40647e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  406482:	fb0a f90c 	mul.w	r9, sl, ip
  406486:	4599      	cmp	r9, r3
  406488:	fa02 fb06 	lsl.w	fp, r2, r6
  40648c:	d904      	bls.n	406498 <__udivdi3+0x184>
  40648e:	191b      	adds	r3, r3, r4
  406490:	f10c 32ff 	add.w	r2, ip, #4294967295
  406494:	d36d      	bcc.n	406572 <__udivdi3+0x25e>
  406496:	4694      	mov	ip, r2
  406498:	ebc9 0303 	rsb	r3, r9, r3
  40649c:	fbb3 f5f8 	udiv	r5, r3, r8
  4064a0:	fb08 3315 	mls	r3, r8, r5, r3
  4064a4:	b2bf      	uxth	r7, r7
  4064a6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  4064aa:	fb0a f805 	mul.w	r8, sl, r5
  4064ae:	45b8      	cmp	r8, r7
  4064b0:	d904      	bls.n	4064bc <__udivdi3+0x1a8>
  4064b2:	193f      	adds	r7, r7, r4
  4064b4:	f105 33ff 	add.w	r3, r5, #4294967295
  4064b8:	d361      	bcc.n	40657e <__udivdi3+0x26a>
  4064ba:	461d      	mov	r5, r3
  4064bc:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  4064c0:	fbac 230b 	umull	r2, r3, ip, fp
  4064c4:	ebc8 0707 	rsb	r7, r8, r7
  4064c8:	429f      	cmp	r7, r3
  4064ca:	f04f 0500 	mov.w	r5, #0
  4064ce:	d349      	bcc.n	406564 <__udivdi3+0x250>
  4064d0:	d045      	beq.n	40655e <__udivdi3+0x24a>
  4064d2:	4662      	mov	r2, ip
  4064d4:	462b      	mov	r3, r5
  4064d6:	e763      	b.n	4063a0 <__udivdi3+0x8c>
  4064d8:	4094      	lsls	r4, r2
  4064da:	f1c2 0320 	rsb	r3, r2, #32
  4064de:	fa21 fc03 	lsr.w	ip, r1, r3
  4064e2:	0c26      	lsrs	r6, r4, #16
  4064e4:	fa20 f303 	lsr.w	r3, r0, r3
  4064e8:	fa01 f502 	lsl.w	r5, r1, r2
  4064ec:	fbbc f8f6 	udiv	r8, ip, r6
  4064f0:	ea43 0105 	orr.w	r1, r3, r5
  4064f4:	0c0b      	lsrs	r3, r1, #16
  4064f6:	fb06 cc18 	mls	ip, r6, r8, ip
  4064fa:	b2a7      	uxth	r7, r4
  4064fc:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  406500:	fb07 f308 	mul.w	r3, r7, r8
  406504:	4563      	cmp	r3, ip
  406506:	fa00 f502 	lsl.w	r5, r0, r2
  40650a:	d909      	bls.n	406520 <__udivdi3+0x20c>
  40650c:	eb1c 0c04 	adds.w	ip, ip, r4
  406510:	f108 32ff 	add.w	r2, r8, #4294967295
  406514:	d23a      	bcs.n	40658c <__udivdi3+0x278>
  406516:	4563      	cmp	r3, ip
  406518:	d938      	bls.n	40658c <__udivdi3+0x278>
  40651a:	f1a8 0802 	sub.w	r8, r8, #2
  40651e:	44a4      	add	ip, r4
  406520:	ebc3 0c0c 	rsb	ip, r3, ip
  406524:	fbbc f3f6 	udiv	r3, ip, r6
  406528:	b289      	uxth	r1, r1
  40652a:	fb06 cc13 	mls	ip, r6, r3, ip
  40652e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  406532:	fb07 f203 	mul.w	r2, r7, r3
  406536:	428a      	cmp	r2, r1
  406538:	d907      	bls.n	40654a <__udivdi3+0x236>
  40653a:	1909      	adds	r1, r1, r4
  40653c:	f103 30ff 	add.w	r0, r3, #4294967295
  406540:	d222      	bcs.n	406588 <__udivdi3+0x274>
  406542:	428a      	cmp	r2, r1
  406544:	d920      	bls.n	406588 <__udivdi3+0x274>
  406546:	3b02      	subs	r3, #2
  406548:	4421      	add	r1, r4
  40654a:	1a89      	subs	r1, r1, r2
  40654c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  406550:	e749      	b.n	4063e6 <__udivdi3+0xd2>
  406552:	463a      	mov	r2, r7
  406554:	e70c      	b.n	406370 <__udivdi3+0x5c>
  406556:	4633      	mov	r3, r6
  406558:	e71f      	b.n	40639a <__udivdi3+0x86>
  40655a:	460a      	mov	r2, r1
  40655c:	e76b      	b.n	406436 <__udivdi3+0x122>
  40655e:	40b0      	lsls	r0, r6
  406560:	4290      	cmp	r0, r2
  406562:	d2b6      	bcs.n	4064d2 <__udivdi3+0x1be>
  406564:	f10c 32ff 	add.w	r2, ip, #4294967295
  406568:	2300      	movs	r3, #0
  40656a:	e719      	b.n	4063a0 <__udivdi3+0x8c>
  40656c:	4633      	mov	r3, r6
  40656e:	4632      	mov	r2, r6
  406570:	e716      	b.n	4063a0 <__udivdi3+0x8c>
  406572:	4599      	cmp	r9, r3
  406574:	d98f      	bls.n	406496 <__udivdi3+0x182>
  406576:	f1ac 0c02 	sub.w	ip, ip, #2
  40657a:	4423      	add	r3, r4
  40657c:	e78c      	b.n	406498 <__udivdi3+0x184>
  40657e:	45b8      	cmp	r8, r7
  406580:	d99b      	bls.n	4064ba <__udivdi3+0x1a6>
  406582:	3d02      	subs	r5, #2
  406584:	4427      	add	r7, r4
  406586:	e799      	b.n	4064bc <__udivdi3+0x1a8>
  406588:	4603      	mov	r3, r0
  40658a:	e7de      	b.n	40654a <__udivdi3+0x236>
  40658c:	4690      	mov	r8, r2
  40658e:	e7c7      	b.n	406520 <__udivdi3+0x20c>
  406590:	3802      	subs	r0, #2
  406592:	4421      	add	r1, r4
  406594:	e73a      	b.n	40640c <__udivdi3+0xf8>
  406596:	bf00      	nop

00406598 <gap_fonts>:
  406598:	65a0 0040 699c 0040                         .e@..i@.

004065a0 <Sinclair_S>:
  4065a0:	0808 5f20 0000 0000 0000 0000 817e 81a5     .. _........~...
  4065b0:	99bd 7e81 ff7e ffdb e7c3 7eff fe6c fefe     ...~~......~l...
  4065c0:	387c 0010 3810 fe7c 387c 0010 7c38 fe38     |8...8|.|8..8|8.
  4065d0:	7cfe 7c38 1010 7c38 7cfe 7c38 0000 3c18     .|8|..8|.|8|...<
  4065e0:	183c 0000 ffff c3e7 e7c3 ffff 3c00 4266     <............<fB
  4065f0:	6642 003c c3ff bd99 99bd ffc3 070f 7d0f     Bf<............}
  406600:	cccc 78cc 663c 6666 183c 187e 333f 303f     ...x<fff<.~.?3?0
  406610:	7030 e0f0 637f 637f 6763 c0e6 5a99 e73c     0p...c.ccg...Z<.
  406620:	3ce7 995a e080 fef8 e0f8 0080 0e02 fe3e     .<Z...........>.
  406630:	0e3e 0002 3c18 187e 7e18 183c 6666 6666     >....<~..~<.ffff
  406640:	0066 0066 db7f 7bdb 1b1b 001b 633e 6c38     f.f....{....>c8l
  406650:	386c 78cc 0000 0000 7e7e 007e 3c18 187e     l8.x....~~~..<~.
  406660:	3c7e ff18 3c18 187e 1818 0018 1818 1818     ~<...<~.........
  406670:	3c7e 0018 1800 fe0c 180c 0000 3000 fe60     ~<...........0`.
  406680:	3060 0000 0000 c0c0 fec0 0000 2400 ff66     `0...........$f.
  406690:	2466 0000 1800 7e3c ffff 0000 ff00 7eff     f$....<~.......~
  4066a0:	183c 0000 0000 0000 0000 0000 0808 0808     <...............
  4066b0:	0008 0008 1414 0000 0000 0000 2400 247e     .............$~$
  4066c0:	7e24 0024 7c10 7c50 7c14 0010 6200 0864     $~$..|P|.|...bd.
  4066d0:	2610 0046 1000 1028 442a 003a 0800 0010     .&F...(.*D:.....
  4066e0:	0000 0000 0800 1010 1010 0008 1000 0808     ................
  4066f0:	0808 0010 0000 1028 107c 0028 0000 1010     ......(.|.(.....
  406700:	107c 0010 0000 0000 0800 1008 0000 0000     |...............
  406710:	007c 0000 0000 0000 1800 0018 0000 0804     |...............
  406720:	2010 0040 7800 948c c4a4 0078 6000 20a0     . @..x....x..`. 
  406730:	2020 00f8 7800 0484 8078 00fc 7800 1884       ...x..x....x..
  406740:	8404 0078 1000 5030 fc90 0010 fc00 f880     ..x...0P........
  406750:	8404 0078 7800 f880 8484 0078 fc00 0804     ..x..x....x.....
  406760:	2010 0020 7800 7884 8484 0078 7800 8484     .  ..x.x..x..x..
  406770:	047c 0078 0000 1000 0000 0010 0000 0010     |.x.............
  406780:	1000 2010 0000 1008 1020 0008 0000 7c00     ... .... ......|
  406790:	7c00 0000 0000 1020 1008 0020 3c00 0442     .|.... ... ..<B.
  4067a0:	0008 0008 3c00 564a 405e 003c 7800 8484     .....<JV^@<..x..
  4067b0:	84fc 0084 f800 f884 8484 00f8 7800 8084     .............x..
  4067c0:	8480 0078 f000 8488 8884 00f0 fc00 f880     ..x.............
  4067d0:	8080 00fc fc00 f880 8080 0080 7800 8084     .............x..
  4067e0:	849c 0078 8400 fc84 8484 0084 7c00 1010     ..x..........|..
  4067f0:	1010 007c 0400 0404 8484 0078 8800 e090     ..|.......x.....
  406800:	8890 0084 8000 8080 8080 00fc 8400 b4cc     ................
  406810:	8484 0084 8400 a4c4 8c94 0084 7800 8484     .............x..
  406820:	8484 0078 f800 8484 80f8 0080 7800 8484     ..x..........x..
  406830:	94a4 0078 f800 8484 88f8 0084 7800 7880     ..x..........x.x
  406840:	8404 0078 fe00 1010 1010 0010 8400 8484     ..x.............
  406850:	8484 0078 8400 8484 4884 0030 8400 8484     ..x......H0.....
  406860:	b484 0048 8400 3048 4830 0084 8200 2844     ..H...H00H....D(
  406870:	1010 0010 fc00 1008 4020 00fc 3800 2020     ........ @...8  
  406880:	2020 0038 0000 2040 0810 0004 3800 0808       8...@ .....8..
  406890:	0808 0038 1000 5438 1010 0010 0000 0000     ..8...8T........
  4068a0:	0000 fe00 423c a199 99a1 3c42 0000 0438     ....<B....B<..8.
  4068b0:	443c 003c 4000 7840 4444 0078 0000 201c     <D<..@@xDDx.... 
  4068c0:	2020 001c 0400 3c04 4444 003c 0000 4438       .....<DD<...8D
  4068d0:	4078 003c 0c00 1810 1010 0010 0000 423e     x@<...........>B
  4068e0:	3e42 3c02 4000 7840 4444 0044 0800 1800     B>.<.@@xDDD.....
  4068f0:	0808 001c 0400 0400 0404 1824 4000 6050     ..........$..@P`
  406900:	5060 0048 1000 1010 1010 000c 0000 5468     `PH...........hT
  406910:	5454 0054 0000 4478 4444 0044 0000 4438     TTT...xDDDD...8D
  406920:	4444 0038 0000 4478 7844 4040 0000 443c     DD8...xDDx@@..<D
  406930:	3c44 0604 0000 201c 2020 0020 0000 4038     D<.....    ...8@
  406940:	0438 0078 1000 1038 1010 000c 0000 4444     8.x...8.......DD
  406950:	4444 0038 0000 4444 2828 0010 0000 5444     DD8...DD((....DT
  406960:	5454 0028 0000 2844 2810 0044 0000 4444     TT(...D(.(D...DD
  406970:	3c44 3804 0000 087c 2010 007c 1c00 6010     D<.8..|.. |....`
  406980:	1010 001c 1000 1010 1010 0010 7000 0c10     .............p..
  406990:	1010 0070 1400 0028 0000 0000               ..p...(.....

0040699c <Sinclair_Inverted_S>:
  40699c:	0808 5f20 0000 0000 0000 0000 817e 81a5     .. _........~...
  4069ac:	99bd 7e81 ff7e ffdb e7c3 7eff fe6c fefe     ...~~......~l...
  4069bc:	387c 0010 3810 fe7c 387c 0010 7c38 fe38     |8...8|.|8..8|8.
  4069cc:	7cfe 7c38 1010 7c38 7cfe 7c38 0000 3c18     .|8|..8|.|8|...<
  4069dc:	183c 0000 ffff c3e7 e7c3 ffff 3c00 4266     <............<fB
  4069ec:	6642 003c c3ff bd99 99bd ffc3 070f 7d0f     Bf<............}
  4069fc:	cccc 78cc 663c 6666 183c 187e 333f 303f     ...x<fff<.~.?3?0
  406a0c:	7030 e0f0 637f 637f 6763 c0e6 5a99 e73c     0p...c.ccg...Z<.
  406a1c:	3ce7 995a e080 fef8 e0f8 0080 0e02 fe3e     .<Z...........>.
  406a2c:	0e3e 0002 3c18 187e 7e18 183c 6666 6666     >....<~..~<.ffff
  406a3c:	0066 0066 db7f 7bdb 1b1b 001b 633e 6c38     f.f....{....>c8l
  406a4c:	386c 78cc 0000 0000 7e7e 007e 3c18 187e     l8.x....~~~..<~.
  406a5c:	3c7e ff18 3c18 187e 1818 0018 1818 1818     ~<...<~.........
  406a6c:	3c7e 0018 1800 fe0c 180c 0000 3000 fe60     ~<...........0`.
  406a7c:	3060 0000 0000 c0c0 fec0 0000 2400 ff66     `0...........$f.
  406a8c:	2466 0000 1800 7e3c ffff 0000 ff00 7eff     f$....<~.......~
  406a9c:	183c 0000 0000 0000 0000 0000 0808 0808     <...............
  406aac:	0008 0008 1414 0000 0000 0000 2400 247e     .............$~$
  406abc:	7e24 0024 7c10 7c50 7c14 0010 6200 0864     $~$..|P|.|...bd.
  406acc:	2610 0046 1000 1028 442a 003a 0800 0010     .&F...(.*D:.....
  406adc:	0000 0000 0800 1010 1010 0008 1000 0808     ................
  406aec:	0808 0010 0000 1028 107c 0028 0000 1010     ......(.|.(.....
  406afc:	107c 0010 0000 0000 0800 1008 0000 0000     |...............
  406b0c:	007c 0000 0000 0000 1800 0018 0000 0804     |...............
  406b1c:	2010 0040 7800 948c c4a4 0078 6000 20a0     . @..x....x..`. 
  406b2c:	2020 00f8 7800 0484 8078 00fc 7800 1884       ...x..x....x..
  406b3c:	8404 0078 1000 5030 fc90 0010 fc00 f880     ..x...0P........
  406b4c:	8404 0078 7800 f880 8484 0078 fc00 0804     ..x..x....x.....
  406b5c:	2010 0020 7800 7884 8484 0078 7800 8484     .  ..x.x..x..x..
  406b6c:	047c 0078 0000 1000 0000 0010 0000 0010     |.x.............
  406b7c:	1000 2010 0000 1008 1020 0008 0000 7c00     ... .... ......|
  406b8c:	7c00 0000 0000 1020 1008 0020 3c00 0442     .|.... ... ..<B.
  406b9c:	0008 0008 3c00 564a 405e 003c 7800 8484     .....<JV^@<..x..
  406bac:	84fc 0084 f800 f884 8484 00f8 7800 8084     .............x..
  406bbc:	8480 0078 f000 8488 8884 00f0 fc00 f880     ..x.............
  406bcc:	8080 00fc fc00 f880 8080 0080 7800 8084     .............x..
  406bdc:	849c 0078 8400 fc84 8484 0084 7c00 1010     ..x..........|..
  406bec:	1010 007c 0400 0404 8484 0078 8800 e090     ..|.......x.....
  406bfc:	8890 0084 8000 8080 8080 00fc 8400 b4cc     ................
  406c0c:	8484 0084 8400 a4c4 8c94 0084 7800 8484     .............x..
  406c1c:	8484 0078 f800 8484 80f8 0080 7800 8484     ..x..........x..
  406c2c:	94a4 0078 f800 8484 88f8 0084 7800 7880     ..x..........x.x
  406c3c:	8404 0078 fe00 1010 1010 0010 8400 8484     ..x.............
  406c4c:	8484 0078 8400 8484 4884 0030 8400 8484     ..x......H0.....
  406c5c:	b484 0048 8400 3048 4830 0084 8200 2844     ..H...H00H....D(
  406c6c:	1010 0010 fc00 1008 4020 00fc 3800 2020     ........ @...8  
  406c7c:	2020 0038 0000 2040 0810 0004 3800 0808       8...@ .....8..
  406c8c:	0808 0038 1000 5438 1010 0010 0000 0000     ..8...8T........
  406c9c:	0000 fe00 423c a199 99a1 3c42 87ff 7b7b     ....<B....B<..{{
  406cac:	7b03 ff7b 07ff 077b 7b7b ff07 87ff 7f7b     .{{...{.{{....{.
  406cbc:	7b7f ff87 0fff 7b77 777b ff0f 03ff 077f     .{....w{{w......
  406ccc:	7f7f ff03 03ff 077f 7f7f ff7f 87ff 7f7b     ..............{.
  406cdc:	7b63 ff87 7bff 037b 7b7b ff7b 83ff efef     c{...{{.{{{.....
  406cec:	efef ff83 fbff fbfb 7b7b ff87 77ff 1f6f     ........{{...wo.
  406cfc:	776f ff7b 7fff 7f7f 7f7f ff03 7bff 4b33     ow{..........{3K
  406d0c:	7b7b ff7b 7bff 5b3b 736b ff7b 87ff 7b7b     {{{..{;[ks{...{{
  406d1c:	7b7b ff87 07ff 7b7b 7f07 ff7f 87ff 7b7b     {{....{{......{{
  406d2c:	6b5b ff87 07ff 7b7b 7707 ff7b 87ff 877f     [k....{{.w{.....
  406d3c:	7bfb ff87 01ff efef efef ffef 7bff 7b7b     .{...........{{{
  406d4c:	7b7b ff87 7bff 7b7b b77b ffcf 7bff 7b7b     {{...{{{{....{{{
  406d5c:	4b7b ffb7 7bff cfb7 b7cf ff7b 7dff d7bb     {K...{....{..}..
  406d6c:	efef ffef 03ff eff7 bfdf ff03 1c00 6010     ...............`
  406d7c:	1010 001c 1000 1010 1010 0010 7000 0c10     .............p..
  406d8c:	1010 0070 1400 0028 0000 0000 4153 344d     ..p...(.....SAM4
  406d9c:	5f53 7453 5064 7265 7069 5f68 7244 7669     S_StdPeriph_Driv
  406dac:	7265 532f 756f 6372 2f65 4153 344d 2f53     er/Source/SAM4S/
  406dbc:	6f73 7275 6563 742f 2e63 0063 7764 6843     source/tc.c.dwCh
  406dcc:	6e61 656e 206c 203c 7328 7a69 6f65 2866     annel < (sizeof(
  406ddc:	7020 6354 3e2d 4354 435f 4148 4e4e 4c45      pTc->TC_CHANNEL
  406dec:	2920 732f 7a69 6f65 2866 7020 6354 3e2d      )/sizeof( pTc->
  406dfc:	4354 435f 4148 4e4e 4c45 305b 205d 2929     TC_CHANNEL[0] ))
  406e0c:	0000 0000 6c75 635f 6168 6e6e 6c65 3c20     ....ul_channel <
  406e1c:	2820 6973 657a 666f 7028 745f 2d63 543e      (sizeof(p_tc->T
  406e2c:	5f43 4843 4e41 454e 294c 2f20 7320 7a69     C_CHANNEL) / siz
  406e3c:	6f65 2866 5f70 6374 3e2d 4354 435f 4148     eof(p_tc->TC_CHA
  406e4c:	4e4e 4c45 305b 295d 0029 0000               NNEL[0]))...

00406e58 <__func__.7216>:
  406e58:	4354 435f 6e6f 6966 7567 6572 0000 0000     TC_Configure....

00406e68 <__func__.7226>:
  406e68:	4354 575f 6972 6574 6152 0000               TC_WriteRa..

00406e74 <__func__.7232>:
  406e74:	4354 575f 6972 6574 6252 0000               TC_WriteRb..

00406e80 <__func__.7238>:
  406e80:	4354 575f 6972 6574 6352 0000               TC_WriteRc..

00406e8c <__func__.7245>:
  406e8c:	4354 455f 616e 6c62 4965 746e 7265 7572     TC_EnableInterru
  406e9c:	7470 0000                                   pt..

00406ea0 <__func__.7252>:
  406ea0:	4354 445f 7369 6261 656c 6e49 6574 7272     TC_DisableInterr
  406eb0:	7075 0074                                   upt.

00406eb4 <__func__.7258>:
  406eb4:	4354 475f 7465 6e49 6574 7272 7075 4d74     TC_GetInterruptM
  406ec4:	7361 006b                                   ask.

00406ec8 <__func__.7264>:
  406ec8:	4354 475f 7465 7453 7461 7375 0000 0000     TC_GetStatus....

00406ed8 <__func__.7270>:
  406ed8:	4354 535f 6174 7472 0000 0000               TC_Start....

00406ee4 <__func__.7276>:
  406ee4:	4354 535f 6f74 0070 4153 344d 5f53 7453     TC_Stop.SAM4S_St
  406ef4:	5064 7265 7069 5f68 7244 7669 7265 532f     dPeriph_Driver/S
  406f04:	756f 6372 2f65 4153 344d 2f53 6f73 7275     ource/SAM4S/sour
  406f14:	6563 702f 636d 632e 0000 0000 7764 6449     ce/pmc.c....dwId
  406f24:	3c20 3320 0035 0000                          < 35...

00406f2c <__func__.7216>:
  406f2c:	4d50 5f43 6e45 6261 656c 6550 6972 6870     PMC_EnablePeriph
  406f3c:	7265 6c61 0000 0000                         eral....

00406f44 <__func__.7220>:
  406f44:	4d50 5f43 6944 6173 6c62 5065 7265 7069     PMC_DisablePerip
  406f54:	6568 6172 006c 0000                         heral...

00406f5c <__func__.7242>:
  406f5c:	4d50 5f43 7349 6550 6972 6870 6e45 6261     PMC_IsPeriphEnab
  406f6c:	656c 0064 4153 344d 5f53 7453 5064 7265     led.SAM4S_StdPer
  406f7c:	7069 5f68 7244 7669 7265 532f 756f 6372     iph_Driver/Sourc
  406f8c:	2f65 4153 344d 2f53 6f73 7275 6563 682f     e/SAM4S/source/h
  406f9c:	6d73 6963 705f 6364 632e 0000 4d70 6963     smci_pdc.c..pMci
  406fac:	0000 0000 4d70 6963 3e2d 4d70 6963 7748     ....pMci->pMciHw
  406fbc:	0000 0000 4d70 6963 7748 0000 6328 6b6c     ....pMciHw..(clk
  406fcc:	6964 2076 2026 7830 4646 4646 4646 3030     div & 0xFFFFFF00
  406fdc:	2029 3d3d 3020 0000                         ) == 0..

00406fe4 <__func__.7229>:
  406fe4:	434d 5f49 6552 6573 0074 0000               MCI_Reset...

00406ff0 <__func__.7244>:
  406ff0:	434d 5f49 6553 5374 6570 6465 0000 0000     MCI_SetSpeed....

00407000 <__func__.7253>:
  407000:	434d 5f49 6e45 6261 656c 7348 6f4d 6564     MCI_EnableHsMode
  407010:	0000 0000                                   ....

00407014 <__func__.7261>:
  407014:	434d 5f49 6553 4274 7375 6957 7464 0068     MCI_SetBusWidth.
  407024:	202c 7566 636e 6974 6e6f 203a 0000 0000     , function: ....
  407034:	7361 6573 7472 6f69 206e 2522 2273 6620     assertion "%s" f
  407044:	6961 656c 3a64 6620 6c69 2065 2522 2273     ailed: file "%s"
  407054:	202c 696c 656e 2520 2564 2573 0a73 0000     , line %d%s%s...
  407064:	0043 0000                                   C...

00407068 <_global_impure_ptr>:
  407068:	0090 2000 3130 3332 3534 3736 3938 4241     ... 0123456789AB
  407078:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  407088:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  407098:	296c 0000                                   l)..

0040709c <zeroes.6721>:
  40709c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

004070ac <blanks.6720>:
  4070ac:	2020 2020 2020 2020 2020 2020 2020 2020                     

004070bc <_init>:
  4070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4070be:	bf00      	nop
  4070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4070c2:	bc08      	pop	{r3}
  4070c4:	469e      	mov	lr, r3
  4070c6:	4770      	bx	lr

004070c8 <__init_array_start>:
  4070c8:	004044a1 	.word	0x004044a1

004070cc <__frame_dummy_init_array_entry>:
  4070cc:	004000f1                                ..@.

004070d0 <_fini>:
  4070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4070d2:	bf00      	nop
  4070d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4070d6:	bc08      	pop	{r3}
  4070d8:	469e      	mov	lr, r3
  4070da:	4770      	bx	lr

004070dc <__fini_array_start>:
  4070dc:	004000cd 	.word	0x004000cd
